
stmDemoDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a180  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e4  0800a3e4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3ec  0800a3ec  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3f0  0800a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800a3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b48  200000d0  0800a4c4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c18  0800a4c4  00020c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aef2  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004091  00000000  00000000  0003b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  0003f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001441  00000000  00000000  00040b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a13a  00000000  00000000  00041f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f24b  00000000  00000000  0005c0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b868  00000000  00000000  0007b31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007654  00000000  00000000  00116b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a308 	.word	0x0800a308

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0800a308 	.word	0x0800a308

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	personFoundFlag = 0;	// Set flag to zero at start
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <main+0x2c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f001 fcb5 	bl	80025d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f80f 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 f957 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f935 	bl	8000edc <MX_DMA_Init>
  MX_CRC_Init();
 8000c72:	f000 f877 	bl	8000d64 <MX_CRC_Init>
  MX_RTC_Init();
 8000c76:	f000 f889 	bl	8000d8c <MX_RTC_Init>
  MX_MEMS_Init();
 8000c7a:	f006 f801 	bl	8006c80 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000c7e:	f006 f805 	bl	8006c8c <MX_MEMS_Process>
 8000c82:	e7fc      	b.n	8000c7e <main+0x26>
 8000c84:	20000160 	.word	0x20000160

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b094      	sub	sp, #80	; 0x50
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2230      	movs	r2, #48	; 0x30
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f008 fde8 	bl	800986c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <SystemClock_Config+0xd4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <SystemClock_Config+0xd4>)
 8000cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <SystemClock_Config+0xd4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <SystemClock_Config+0xd8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd4:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <SystemClock_Config+0xd8>)
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <SystemClock_Config+0xd8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d00:	2310      	movs	r3, #16
 8000d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fc92 	bl	8004640 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d22:	f000 f955 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fef4 	bl	8004b30 <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d4e:	f000 f93f 	bl	8000fd0 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	; 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_CRC_Init+0x20>)
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <MX_CRC_Init+0x24>)
 8000d6c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_CRC_Init+0x20>)
 8000d70:	f001 fdd5 	bl	800291e <HAL_CRC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d7a:	f000 f929 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000f0 	.word	0x200000f0
 8000d88:	40023000 	.word	0x40023000

08000d8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_RTC_Init+0xac>)
 8000da6:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_RTC_Init+0xb0>)
 8000da8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_RTC_Init+0xac>)
 8000db2:	227f      	movs	r2, #127	; 0x7f
 8000db4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_RTC_Init+0xac>)
 8000db8:	22ff      	movs	r2, #255	; 0xff
 8000dba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dce:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dd0:	f004 f9bc 	bl	800514c <HAL_RTC_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000dda:	f000 f8f9 	bl	8000fd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <MX_RTC_Init+0xac>)
 8000dfa:	f004 fa2a 	bl	8005252 <HAL_RTC_SetTime>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f8e4 	bl	8000fd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_RTC_Init+0xac>)
 8000e20:	f004 fb0f 	bl	8005442 <HAL_RTC_SetDate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e2a:	f000 f8d1 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000f8 	.word	0x200000f8
 8000e3c:	40002800 	.word	0x40002800

08000e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <MX_TIM3_Init+0x98>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e64:	f240 3247 	movw	r2, #839	; 0x347
 8000e68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e86:	f004 fc6d 	bl	8005764 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e90:	f000 f89e 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000ea2:	f004 fe30 	bl	8005b06 <HAL_TIM_ConfigClockSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 f890 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000ebe:	f005 f837 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 f882 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000118 	.word	0x20000118
 8000ed8:	40000400 	.word	0x40000400

08000edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2010      	movs	r0, #16
 8000f04:	f001 fcd5 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f08:	2010      	movs	r0, #16
 8000f0a:	f001 fcee 	bl	80028ea <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_GPIO_Init+0xac>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_GPIO_Init+0xb0>)
 8000fba:	f002 f83d 	bl	8003038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101a:	2007      	movs	r0, #7
 800101c:	f001 fc3e 	bl	800289c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_CRC_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_CRC_MspInit+0x40>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_CRC_MspInit+0x40>)
 8001048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_CRC_MspInit+0x40>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023000 	.word	0x40023000
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_RTC_MspInit+0x50>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d111      	bne.n	80010b6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001092:	2302      	movs	r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 ff65 	bl	8004f70 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010ac:	f7ff ff90 	bl	8000fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_RTC_MspInit+0x54>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40002800 	.word	0x40002800
 80010c4:	42470e3c 	.word	0x42470e3c

080010c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_TIM_Base_MspInit+0x48>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d115      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_TIM_Base_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_TIM_Base_MspInit+0x4c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_TIM_Base_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	201d      	movs	r0, #29
 80010fc:	f001 fbd9 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001100:	201d      	movs	r0, #29
 8001102:	f001 fbf2 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40000400 	.word	0x40000400
 8001114:	40023800 	.word	0x40023800

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f001 fa86 	bl	8002674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Stream5_IRQHandler+0x10>)
 8001172:	f001 fcf7 	bl	8002b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000208 	.word	0x20000208

08001180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM3_IRQHandler+0x10>)
 8001186:	f004 fbce 	bl	8005926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000118 	.word	0x20000118

08001194 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <BSP_I2C1_Init+0x58>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <BSP_I2C1_Init+0x5c>)
 80011a2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <BSP_I2C1_Init+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	4912      	ldr	r1, [pc, #72]	; (80011f4 <BSP_I2C1_Init+0x60>)
 80011ac:	600a      	str	r2, [r1, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d117      	bne.n	80011e2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <BSP_I2C1_Init+0x58>)
 80011b4:	f002 fe76 	bl	8003ea4 <HAL_I2C_GetState>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d111      	bne.n	80011e2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <BSP_I2C1_Init+0x58>)
 80011c0:	f000 f8e2 	bl	8001388 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10b      	bne.n	80011e2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <BSP_I2C1_Init+0x58>)
 80011cc:	f000 f8a8 	bl	8001320 <MX_I2C1_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80011d6:	f06f 0307 	mvn.w	r3, #7
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	e001      	b.n	80011e2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80011e2:	687b      	ldr	r3, [r7, #4]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000164 	.word	0x20000164
 80011f0:	40005400 	.word	0x40005400
 80011f4:	200001b8 	.word	0x200001b8

080011f8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <BSP_I2C1_DeInit+0x48>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d014      	beq.n	8001234 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <BSP_I2C1_DeInit+0x48>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <BSP_I2C1_DeInit+0x48>)
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <BSP_I2C1_DeInit+0x48>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <BSP_I2C1_DeInit+0x4c>)
 800121e:	f000 f8fd 	bl	800141c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <BSP_I2C1_DeInit+0x4c>)
 8001224:	f002 face 	bl	80037c4 <HAL_I2C_DeInit>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800122e:	f06f 0307 	mvn.w	r3, #7
 8001232:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001b8 	.word	0x200001b8
 8001244:	20000164 	.word	0x20000164

08001248 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af04      	add	r7, sp, #16
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	461a      	mov	r2, r3
 8001252:	4603      	mov	r3, r0
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	460b      	mov	r3, r1
 8001258:	81bb      	strh	r3, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001262:	89ba      	ldrh	r2, [r7, #12]
 8001264:	89f9      	ldrh	r1, [r7, #14]
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <BSP_I2C1_WriteReg+0x60>)
 8001278:	f002 fae8 	bl	800384c <HAL_I2C_Mem_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <BSP_I2C1_WriteReg+0x60>)
 8001284:	f002 fe1c 	bl	8003ec0 <HAL_I2C_GetError>
 8001288:	4603      	mov	r3, r0
 800128a:	2b04      	cmp	r3, #4
 800128c:	d103      	bne.n	8001296 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800128e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e002      	b.n	800129c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001296:	f06f 0303 	mvn.w	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800129c:	697b      	ldr	r3, [r7, #20]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000164 	.word	0x20000164

080012ac <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	60ba      	str	r2, [r7, #8]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	81fb      	strh	r3, [r7, #14]
 80012ba:	460b      	mov	r3, r1
 80012bc:	81bb      	strh	r3, [r7, #12]
 80012be:	4613      	mov	r3, r2
 80012c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80012c6:	89ba      	ldrh	r2, [r7, #12]
 80012c8:	89f9      	ldrh	r1, [r7, #14]
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <BSP_I2C1_ReadReg+0x60>)
 80012dc:	f002 fbb0 	bl	8003a40 <HAL_I2C_Mem_Read>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00c      	beq.n	8001300 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <BSP_I2C1_ReadReg+0x60>)
 80012e8:	f002 fdea 	bl	8003ec0 <HAL_I2C_GetError>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d103      	bne.n	80012fa <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80012f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e002      	b.n	8001300 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80012fa:	f06f 0303 	mvn.w	r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001300:	697b      	ldr	r3, [r7, #20]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000164 	.word	0x20000164

08001310 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001314:	f001 f9c2 	bl	800269c <HAL_GetTick>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <MX_I2C1_Init+0x60>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <MX_I2C1_Init+0x64>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f002 f8e9 	bl	800353c <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40005400 	.word	0x40005400
 8001384:	00061a80 	.word	0x00061a80

08001388 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <I2C1_MspInit+0x8c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <I2C1_MspInit+0x8c>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <I2C1_MspInit+0x8c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b2:	2312      	movs	r3, #18
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80013be:	2304      	movs	r3, #4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <I2C1_MspInit+0x90>)
 80013ca:	f001 fe35 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80013ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80013e0:	2304      	movs	r3, #4
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <I2C1_MspInit+0x90>)
 80013ec:	f001 fe24 	bl	8003038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <I2C1_MspInit+0x8c>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <I2C1_MspInit+0x8c>)
 80013fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <I2C1_MspInit+0x8c>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <I2C1_MspDeInit+0x30>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <I2C1_MspDeInit+0x30>)
 800142a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800142e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <I2C1_MspDeInit+0x34>)
 8001436:	f001 ff83 	bl	8003340 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800143a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <I2C1_MspDeInit+0x34>)
 8001440:	f001 ff7e 	bl	8003340 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f008 fa0a 	bl	800989c <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20018000 	.word	0x20018000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	200001bc 	.word	0x200001bc
 80014bc:	20000c18 	.word	0x20000c18

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e8:	f7ff ffea 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001512:	f008 f9c9 	bl	80098a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fb9f 	bl	8000c58 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001528:	0800a3f4 	.word	0x0800a3f4
  ldr r2, =_sbss
 800152c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001530:	20000c18 	.word	0x20000c18

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <STHS34PF80_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_RegisterBusIO(STHS34PF80_Object_t *pObj, STHS34PF80_IO_t *pIO)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <STHS34PF80_RegisterBusIO+0x18>
  {
    ret = STHS34PF80_ERROR;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e034      	b.n	80015ba <STHS34PF80_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	7b1a      	ldrb	r2, [r3, #12]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <STHS34PF80_RegisterBusIO+0x8c>)
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <STHS34PF80_RegisterBusIO+0x90>)
 8001592:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <STHS34PF80_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4798      	blx	r3
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	e002      	b.n	80015ba <STHS34PF80_RegisterBusIO+0x82>
    }
    else
    {
      ret = STHS34PF80_ERROR;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	08001c35 	.word	0x08001c35
 80015c8:	08001c6b 	.word	0x08001c6b

080015cc <STHS34PF80_Init>:
  * @brief  Initialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_Init(STHS34PF80_Object_t *pObj)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11b      	bne.n	8001616 <STHS34PF80_Init+0x4a>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable BDU */
    if (sths34pf80_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STHS34PF80_OK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3320      	adds	r3, #32
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fd59 	bl	80020a4 <sths34pf80_block_data_update_set>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <STHS34PF80_Init+0x32>
    {
      return STHS34PF80_ERROR;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	e010      	b.n	8001620 <STHS34PF80_Init+0x54>
    }

    /* Put the component in standby mode. */
    if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3320      	adds	r3, #32
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fc7d 	bl	8001f04 <sths34pf80_tmos_odr_set>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <STHS34PF80_Init+0x4a>
    {
      return STHS34PF80_ERROR;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	e004      	b.n	8001620 <STHS34PF80_Init+0x54>
    }
  }

  pObj->is_initialized = 1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <STHS34PF80_DeInit>:
  * @brief  Deinitialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_DeInit(STHS34PF80_Object_t *pObj)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <STHS34PF80_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STHS34PF80_TEMP_Disable(pObj) != STHS34PF80_OK)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f878 	bl	8001730 <STHS34PF80_TEMP_Disable>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <STHS34PF80_DeInit+0x24>
    {
      return STHS34PF80_ERROR;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e004      	b.n	8001656 <STHS34PF80_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <STHS34PF80_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_ReadID(STHS34PF80_Object_t *pObj, uint8_t *Id)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (sths34pf80_device_id_get(&(pObj->Ctx), &buf) != STHS34PF80_OK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3320      	adds	r3, #32
 800166c:	f107 020f 	add.w	r2, r7, #15
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fb44 	bl	8001d00 <sths34pf80_device_id_get>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <STHS34PF80_ReadID+0x26>
  {
    return STHS34PF80_ERROR;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e003      	b.n	800168c <STHS34PF80_ReadID+0x2e>
  }

  *Id = buf;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	701a      	strb	r2, [r3, #0]

  return STHS34PF80_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <STHS34PF80_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STHS34PF80 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetCapabilities(STHS34PF80_Object_t *pObj, STHS34PF80_Capabilities_t *Capabilities)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2200      	movs	r2, #0
 80016a2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 30.0f;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <STHS34PF80_GetCapabilities+0x54>)
 80016c8:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  return STHS34PF80_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	41f00000 	.word	0x41f00000

080016ec <STHS34PF80_TEMP_Enable>:
  * @brief  Enable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Enable(STHS34PF80_Object_t *pObj)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <STHS34PF80_TEMP_Enable+0x16>
  {
    return STHS34PF80_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e012      	b.n	8001728 <STHS34PF80_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STHS34PF80_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STHS34PF80_OK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f8a1 	bl	8001854 <STHS34PF80_TEMP_SetOutputDataRate>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <STHS34PF80_TEMP_Enable+0x32>
  {
    return STHS34PF80_ERROR;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	e004      	b.n	8001728 <STHS34PF80_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <STHS34PF80_TEMP_Disable>:
  * @brief  Disable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Disable(STHS34PF80_Object_t *pObj)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <STHS34PF80_TEMP_Disable+0x16>
  {
    return STHS34PF80_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e01c      	b.n	8001780 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STHS34PF80_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STHS34PF80_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3334      	adds	r3, #52	; 0x34
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f81b 	bl	8001788 <STHS34PF80_TEMP_GetOutputDataRate>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <STHS34PF80_TEMP_Disable+0x2e>
  {
    return STHS34PF80_ERROR;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	e010      	b.n	8001780 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3320      	adds	r3, #32
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fbcd 	bl	8001f04 <sths34pf80_tmos_odr_set>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <STHS34PF80_TEMP_Disable+0x46>
  {
    return STHS34PF80_ERROR;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	e004      	b.n	8001780 <STHS34PF80_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <STHS34PF80_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetOutputDataRate(STHS34PF80_Object_t *pObj, float_t *Odr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  sths34pf80_tmos_odr_t odr_low_level;

  if (sths34pf80_tmos_odr_get(&(pObj->Ctx), &odr_low_level) != STHS34PF80_OK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3320      	adds	r3, #32
 800179a:	f107 020b 	add.w	r2, r7, #11
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fc29 	bl	8001ff8 <sths34pf80_tmos_odr_get>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <STHS34PF80_TEMP_GetOutputDataRate+0x2a>
  {
    return STHS34PF80_ERROR;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	e048      	b.n	8001844 <STHS34PF80_TEMP_GetOutputDataRate+0xbc>
  }

  switch (odr_low_level)
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d840      	bhi.n	800183a <STHS34PF80_TEMP_GetOutputDataRate+0xb2>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <STHS34PF80_TEMP_GetOutputDataRate+0x38>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017e5 	.word	0x080017e5
 80017c4:	080017ef 	.word	0x080017ef
 80017c8:	080017f9 	.word	0x080017f9
 80017cc:	08001803 	.word	0x08001803
 80017d0:	0800180d 	.word	0x0800180d
 80017d4:	08001817 	.word	0x08001817
 80017d8:	08001821 	.word	0x08001821
 80017dc:	0800182b 	.word	0x0800182b
 80017e0:	08001833 	.word	0x08001833
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *Odr = 0.0f;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
      break;
 80017ec:	e029      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *Odr = 0.25f;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80017f4:	601a      	str	r2, [r3, #0]
      break;
 80017f6:	e024      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *Odr = 0.5f;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80017fe:	601a      	str	r2, [r3, #0]
      break;
 8001800:	e01f      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *Odr = 1.0f;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001808:	601a      	str	r2, [r3, #0]
      break;
 800180a:	e01a      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *Odr = 2.0f;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	601a      	str	r2, [r3, #0]
      break;
 8001814:	e015      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *Odr = 4.0f;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800181c:	601a      	str	r2, [r3, #0]
      break;
 800181e:	e010      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *Odr = 8.0f;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001826:	601a      	str	r2, [r3, #0]
      break;
 8001828:	e00b      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *Odr = 15.0f;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <STHS34PF80_TEMP_GetOutputDataRate+0xc4>)
 800182e:	601a      	str	r2, [r3, #0]
      break;
 8001830:	e007      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *Odr = 30.0f;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4a06      	ldr	r2, [pc, #24]	; (8001850 <STHS34PF80_TEMP_GetOutputDataRate+0xc8>)
 8001836:	601a      	str	r2, [r3, #0]
      break;
 8001838:	e003      	b.n	8001842 <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    default:
      ret = STHS34PF80_ERROR;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	60fb      	str	r3, [r7, #12]
      break;
 8001840:	bf00      	nop
  }

  return ret;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	41700000 	.word	0x41700000
 8001850:	41f00000 	.word	0x41f00000

08001854 <STHS34PF80_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_SetOutputDataRate(STHS34PF80_Object_t *pObj, float_t Odr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
  sths34pf80_tmos_odr_t new_odr;

  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
            : (Odr <= 0.5f) ? STHS34PF80_TMOS_ODR_AT_0Hz50
 8001860:	edd7 7a00 	vldr	s15, [r7]
 8001864:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	d801      	bhi.n	8001876 <STHS34PF80_TEMP_SetOutputDataRate+0x22>
 8001872:	2301      	movs	r3, #1
 8001874:	e042      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001876:	edd7 7a00 	vldr	s15, [r7]
 800187a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800187e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	d801      	bhi.n	800188c <STHS34PF80_TEMP_SetOutputDataRate+0x38>
 8001888:	2302      	movs	r3, #2
 800188a:	e037      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 800188c:	edd7 7a00 	vldr	s15, [r7]
 8001890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d801      	bhi.n	80018a2 <STHS34PF80_TEMP_SetOutputDataRate+0x4e>
 800189e:	2303      	movs	r3, #3
 80018a0:	e02c      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 80018a2:	edd7 7a00 	vldr	s15, [r7]
 80018a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80018aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	d801      	bhi.n	80018b8 <STHS34PF80_TEMP_SetOutputDataRate+0x64>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e021      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 80018b8:	edd7 7a00 	vldr	s15, [r7]
 80018bc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d801      	bhi.n	80018ce <STHS34PF80_TEMP_SetOutputDataRate+0x7a>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e016      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 80018ce:	edd7 7a00 	vldr	s15, [r7]
 80018d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d801      	bhi.n	80018e4 <STHS34PF80_TEMP_SetOutputDataRate+0x90>
 80018e0:	2306      	movs	r3, #6
 80018e2:	e00b      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 80018e4:	edd7 7a00 	vldr	s15, [r7]
 80018e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80018ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d801      	bhi.n	80018fa <STHS34PF80_TEMP_SetOutputDataRate+0xa6>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e000      	b.n	80018fc <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 80018fa:	2308      	movs	r3, #8
  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
 80018fc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STHS34PF80_TMOS_ODR_AT_4Hz
            : (Odr <= 8.0f) ? STHS34PF80_TMOS_ODR_AT_8Hz
            : (Odr <= 15.0f) ? STHS34PF80_TMOS_ODR_AT_15Hz
            :                  STHS34PF80_TMOS_ODR_AT_30Hz;

  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), new_odr) != STHS34PF80_OK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3320      	adds	r3, #32
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fafc 	bl	8001f04 <sths34pf80_tmos_odr_set>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <STHS34PF80_TEMP_SetOutputDataRate+0xc4>
  {
    return STHS34PF80_ERROR;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e000      	b.n	800191a <STHS34PF80_TEMP_SetOutputDataRate+0xc6>
  }

  return STHS34PF80_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <STHS34PF80_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (STHS34PF80_GetAmbientTemperature(pObj, Value) != STHS34PF80_OK)
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f838 	bl	80019a4 <STHS34PF80_GetAmbientTemperature>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <STHS34PF80_TEMP_GetTemperature+0x1e>
  {
    return STHS34PF80_ERROR;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e000      	b.n	8001942 <STHS34PF80_TEMP_GetTemperature+0x20>
  }

  return STHS34PF80_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <STHS34PF80_GetObjectTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetObjectTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  /* Get the object temperature */
  if (sths34pf80_tobject_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3320      	adds	r3, #32
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fbee 	bl	800213c <sths34pf80_tobject_raw_get>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <STHS34PF80_GetObjectTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e000      	b.n	800196e <STHS34PF80_GetObjectTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <STHS34PF80_GetAmbientTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3320      	adds	r3, #32
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fbfb 	bl	8002182 <sths34pf80_tambient_raw_get>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <STHS34PF80_GetAmbientTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e000      	b.n	800199a <STHS34PF80_GetAmbientTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <STHS34PF80_GetAmbientTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  int16_t raw_value;
  int16_t int16_value;

  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3320      	adds	r3, #32
 80019b2:	f107 020c 	add.w	r2, r7, #12
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fbe2 	bl	8002182 <sths34pf80_tambient_raw_get>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <STHS34PF80_GetAmbientTemperature+0x26>
  {
    return STHS34PF80_ERROR;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	e012      	b.n	80019f0 <STHS34PF80_GetAmbientTemperature+0x4c>
  }

  int16_value = raw_value / 100;
 80019ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <STHS34PF80_GetAmbientTemperature+0x54>)
 80019d0:	fb82 1203 	smull	r1, r2, r2, r3
 80019d4:	1152      	asrs	r2, r2, #5
 80019d6:	17db      	asrs	r3, r3, #31
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	81fb      	strh	r3, [r7, #14]
  *Value = (float_t)int16_value;
 80019dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edc3 7a00 	vstr	s15, [r3]

  return STHS34PF80_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	51eb851f 	.word	0x51eb851f

080019fc <STHS34PF80_GetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tobject_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3320      	adds	r3, #32
 8001a0e:	f107 020b 	add.w	r2, r7, #11
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f9ab 	bl	8001d70 <sths34pf80_avg_tobject_num_get>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <STHS34PF80_GetAvgTmos+0x2a>
  {
    return STHS34PF80_ERROR;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	e03f      	b.n	8001aa6 <STHS34PF80_GetAvgTmos+0xaa>
  }

  switch (raw_value)
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	2b07      	cmp	r3, #7
 8001a2a:	d837      	bhi.n	8001a9c <STHS34PF80_GetAvgTmos+0xa0>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <STHS34PF80_GetAvgTmos+0x38>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a55 	.word	0x08001a55
 8001a38:	08001a5d 	.word	0x08001a5d
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	08001a6d 	.word	0x08001a6d
 8001a44:	08001a75 	.word	0x08001a75
 8001a48:	08001a7f 	.word	0x08001a7f
 8001a4c:	08001a89 	.word	0x08001a89
 8001a50:	08001a93 	.word	0x08001a93
  {
    case STHS34PF80_AVG_TMOS_2:
      *Value = 2;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	801a      	strh	r2, [r3, #0]
      break;
 8001a5a:	e023      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_8:
      *Value = 8;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2208      	movs	r2, #8
 8001a60:	801a      	strh	r2, [r3, #0]
      break;
 8001a62:	e01f      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_32:
      *Value = 32;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2220      	movs	r2, #32
 8001a68:	801a      	strh	r2, [r3, #0]
      break;
 8001a6a:	e01b      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_128:
      *Value = 128;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	801a      	strh	r2, [r3, #0]
      break;
 8001a72:	e017      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_256:
      *Value = 256;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7a:	801a      	strh	r2, [r3, #0]
      break;
 8001a7c:	e012      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_512:
      *Value = 512;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a84:	801a      	strh	r2, [r3, #0]
      break;
 8001a86:	e00d      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_1024:
      *Value = 1024;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	801a      	strh	r2, [r3, #0]
      break;
 8001a90:	e008      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_2048:
      *Value = 2048;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a98:	801a      	strh	r2, [r3, #0]
      break;
 8001a9a:	e003      	b.n	8001aa4 <STHS34PF80_GetAvgTmos+0xa8>

    default:
      ret = STHS34PF80_ERROR;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	60fb      	str	r3, [r7, #12]
      break;
 8001aa2:	bf00      	nop
  }

  return ret;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <STHS34PF80_SetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value the value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_SetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t Value)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  int32_t ret = STHS34PF80_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
            : (Value <= 8U) ? STHS34PF80_AVG_TMOS_8
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d922      	bls.n	8001b0c <STHS34PF80_SetAvgTmos+0x5c>
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d91d      	bls.n	8001b08 <STHS34PF80_SetAvgTmos+0x58>
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d918      	bls.n	8001b04 <STHS34PF80_SetAvgTmos+0x54>
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	2b80      	cmp	r3, #128	; 0x80
 8001ad6:	d913      	bls.n	8001b00 <STHS34PF80_SetAvgTmos+0x50>
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ade:	d90d      	bls.n	8001afc <STHS34PF80_SetAvgTmos+0x4c>
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae6:	d907      	bls.n	8001af8 <STHS34PF80_SetAvgTmos+0x48>
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d801      	bhi.n	8001af4 <STHS34PF80_SetAvgTmos+0x44>
 8001af0:	2306      	movs	r3, #6
 8001af2:	e00c      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001af4:	2307      	movs	r3, #7
 8001af6:	e00a      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001af8:	2305      	movs	r3, #5
 8001afa:	e008      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e006      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e004      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e002      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <STHS34PF80_SetAvgTmos+0x5e>
 8001b0c:	2300      	movs	r3, #0
  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
 8001b0e:	72fb      	strb	r3, [r7, #11]
            : (Value <= 256U) ? STHS34PF80_AVG_TMOS_256
            : (Value <= 512U) ? STHS34PF80_AVG_TMOS_512
            : (Value <= 1024U) ? STHS34PF80_AVG_TMOS_1024
            :                    STHS34PF80_AVG_TMOS_2048;

  if (sths34pf80_avg_tobject_num_set(&(pObj->Ctx), raw_value) != STHS34PF80_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3320      	adds	r3, #32
 8001b14:	7afa      	ldrb	r2, [r7, #11]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f902 	bl	8001d22 <sths34pf80_avg_tobject_num_set>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <STHS34PF80_SetAvgTmos+0x7a>
  {
    return STHS34PF80_ERROR;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	e000      	b.n	8001b2c <STHS34PF80_SetAvgTmos+0x7c>
  }

  return ret;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <STHS34PF80_GetAvgT>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgT(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tambient_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tambient_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3320      	adds	r3, #32
 8001b46:	f107 020b 	add.w	r2, r7, #11
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f95f 	bl	8001e10 <sths34pf80_avg_tambient_num_get>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <STHS34PF80_GetAvgT+0x2a>
  {
    return STHS34PF80_ERROR;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	e023      	b.n	8001ba6 <STHS34PF80_GetAvgT+0x72>
  }

  switch (raw_value)
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d81b      	bhi.n	8001b9c <STHS34PF80_GetAvgT+0x68>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <STHS34PF80_GetAvgT+0x38>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001b95 	.word	0x08001b95
  {
    case STHS34PF80_AVG_T_8:
      *Value = 8;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e00f      	b.n	8001ba4 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_4:
      *Value = 4;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2204      	movs	r2, #4
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e00b      	b.n	8001ba4 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_2:
      *Value = 2;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	e007      	b.n	8001ba4 <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_1:
      *Value = 1;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e003      	b.n	8001ba4 <STHS34PF80_GetAvgT+0x70>

    default:
      ret = STHS34PF80_ERROR;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	60fb      	str	r3, [r7, #12]
      break;
 8001ba2:	bf00      	nop
  }

  return ret;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop

08001bb0 <STHS34PF80_GetGainFactor>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetGainFactor(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  sths34pf80_gain_mode_t raw_value;

  /* Get the raw value */
  if (sths34pf80_gain_mode_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3320      	adds	r3, #32
 8001bc2:	f107 020b 	add.w	r2, r7, #11
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f959 	bl	8001e80 <sths34pf80_gain_mode_get>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <STHS34PF80_GetGainFactor+0x2a>
  {
    return STHS34PF80_ERROR;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	e012      	b.n	8001c00 <STHS34PF80_GetGainFactor+0x50>
  }

  switch (raw_value)
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <STHS34PF80_GetGainFactor+0x36>
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d004      	beq.n	8001bee <STHS34PF80_GetGainFactor+0x3e>
 8001be4:	e007      	b.n	8001bf6 <STHS34PF80_GetGainFactor+0x46>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *Value = 8;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	701a      	strb	r2, [r3, #0]
      break;
 8001bec:	e007      	b.n	8001bfe <STHS34PF80_GetGainFactor+0x4e>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *Value = 1;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e003      	b.n	8001bfe <STHS34PF80_GetGainFactor+0x4e>

    default:
      ret = STHS34PF80_ERROR;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	60fb      	str	r3, [r7, #12]
      break;
 8001bfc:	bf00      	nop
  }

  return ret;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <STHS34PF80_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the sensitivity is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetSensitivity(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  if (sths34pf80_tmos_sensitivity_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3320      	adds	r3, #32
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f958 	bl	8001ece <sths34pf80_tmos_sensitivity_get>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <STHS34PF80_GetSensitivity+0x22>
  {
    return STHS34PF80_ERROR;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
 8001c28:	e000      	b.n	8001c2c <STHS34PF80_GetSensitivity+0x24>
  }

  return STHS34PF80_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	72fb      	strb	r3, [r7, #11]
 8001c44:	4613      	mov	r3, r2
 8001c46:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	695c      	ldr	r4, [r3, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	7b1b      	ldrb	r3, [r3, #12]
 8001c54:	b298      	uxth	r0, r3
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	893b      	ldrh	r3, [r7, #8]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	47a0      	blx	r4
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}

08001c6a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b087      	sub	sp, #28
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	461a      	mov	r2, r3
 8001c76:	460b      	mov	r3, r1
 8001c78:	72fb      	strb	r3, [r7, #11]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	691c      	ldr	r4, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	7b1b      	ldrb	r3, [r3, #12]
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	893b      	ldrh	r3, [r7, #8]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	47a0      	blx	r4
 8001c96:	4603      	mov	r3, r0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}

08001ca0 <sths34pf80_read_reg>:
  *
  */
int32_t __weak sths34pf80_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	461a      	mov	r2, r3
 8001cac:	460b      	mov	r3, r1
 8001cae:	72fb      	strb	r3, [r7, #11]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685c      	ldr	r4, [r3, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	68d8      	ldr	r0, [r3, #12]
 8001cbc:	893b      	ldrh	r3, [r7, #8]
 8001cbe:	7af9      	ldrb	r1, [r7, #11]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	47a0      	blx	r4
 8001cc4:	6178      	str	r0, [r7, #20]

  return ret;
 8001cc6:	697b      	ldr	r3, [r7, #20]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}

08001cd0 <sths34pf80_write_reg>:
  *
  */
int32_t __weak sths34pf80_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	460b      	mov	r3, r1
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681c      	ldr	r4, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68d8      	ldr	r0, [r3, #12]
 8001cec:	893b      	ldrh	r3, [r7, #8]
 8001cee:	7af9      	ldrb	r1, [r7, #11]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	47a0      	blx	r4
 8001cf4:	6178      	str	r0, [r7, #20]

  return ret;
 8001cf6:	697b      	ldr	r3, [r7, #20]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <sths34pf80_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_WHO_AM_I, val, 1);
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	210f      	movs	r1, #15
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ffc5 	bl	8001ca0 <sths34pf80_read_reg>
 8001d16:	60f8      	str	r0, [r7, #12]

  return ret;
 8001d18:	68fb      	ldr	r3, [r7, #12]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <sths34pf80_avg_tobject_num_set>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_set(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t val)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001d2e:	f107 0208 	add.w	r2, r7, #8
 8001d32:	2301      	movs	r3, #1
 8001d34:	2110      	movs	r1, #16
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffb2 	bl	8001ca0 <sths34pf80_read_reg>
 8001d3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10f      	bne.n	8001d64 <sths34pf80_avg_tobject_num_set+0x42>
  {
    avg_trim.avg_tmos = ((uint8_t)val & 0x7);
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	7a3b      	ldrb	r3, [r7, #8]
 8001d4e:	f362 0302 	bfi	r3, r2, #0, #3
 8001d52:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001d54:	f107 0208 	add.w	r2, r7, #8
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffb7 	bl	8001cd0 <sths34pf80_write_reg>
 8001d62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <sths34pf80_avg_tobject_num_get>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t *val)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001d7a:	f107 0208 	add.w	r2, r7, #8
 8001d7e:	2301      	movs	r3, #1
 8001d80:	2110      	movs	r1, #16
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ff8c 	bl	8001ca0 <sths34pf80_read_reg>
 8001d88:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_tmos)
 8001d8a:	7a3b      	ldrb	r3, [r7, #8]
 8001d8c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b07      	cmp	r3, #7
 8001d94:	d832      	bhi.n	8001dfc <sths34pf80_avg_tobject_num_get+0x8c>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <sths34pf80_avg_tobject_num_get+0x2c>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dbd 	.word	0x08001dbd
 8001da0:	08001dc5 	.word	0x08001dc5
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	08001dd5 	.word	0x08001dd5
 8001dac:	08001ddd 	.word	0x08001ddd
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	08001ded 	.word	0x08001ded
 8001db8:	08001df5 	.word	0x08001df5
  {
    case STHS34PF80_AVG_TMOS_2:
      *val = STHS34PF80_AVG_TMOS_2;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e01f      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_8:
      *val = STHS34PF80_AVG_TMOS_8;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
      break;
 8001dca:	e01b      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_32:
      *val = STHS34PF80_AVG_TMOS_32;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
      break;
 8001dd2:	e017      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_128:
      *val = STHS34PF80_AVG_TMOS_128;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	701a      	strb	r2, [r3, #0]
      break;
 8001dda:	e013      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_256:
      *val = STHS34PF80_AVG_TMOS_256;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2204      	movs	r2, #4
 8001de0:	701a      	strb	r2, [r3, #0]
      break;
 8001de2:	e00f      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_512:
      *val = STHS34PF80_AVG_TMOS_512;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2205      	movs	r2, #5
 8001de8:	701a      	strb	r2, [r3, #0]
      break;
 8001dea:	e00b      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_1024:
      *val = STHS34PF80_AVG_TMOS_1024;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2206      	movs	r2, #6
 8001df0:	701a      	strb	r2, [r3, #0]
      break;
 8001df2:	e007      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_2048:
      *val = STHS34PF80_AVG_TMOS_2048;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2207      	movs	r2, #7
 8001df8:	701a      	strb	r2, [r3, #0]
      break;
 8001dfa:	e003      	b.n	8001e04 <sths34pf80_avg_tobject_num_get+0x94>

    default:
      *val = STHS34PF80_AVG_TMOS_2;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
      break;
 8001e02:	bf00      	nop
  }
  return ret;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop

08001e10 <sths34pf80_avg_tambient_num_get>:
  * @param  val      AVG_T_8, AVG_T_4, AVG_T_2, AVG_T_1,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tambient_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tambient_num_t *val)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001e1a:	f107 0208 	add.w	r2, r7, #8
 8001e1e:	2301      	movs	r3, #1
 8001e20:	2110      	movs	r1, #16
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff3c 	bl	8001ca0 <sths34pf80_read_reg>
 8001e28:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_t)
 8001e2a:	7a3b      	ldrb	r3, [r7, #8]
 8001e2c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d81a      	bhi.n	8001e6c <sths34pf80_avg_tambient_num_get+0x5c>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <sths34pf80_avg_tambient_num_get+0x2c>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e55 	.word	0x08001e55
 8001e44:	08001e5d 	.word	0x08001e5d
 8001e48:	08001e65 	.word	0x08001e65
  {
    case STHS34PF80_AVG_T_8:
      *val = STHS34PF80_AVG_T_8;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
      break;
 8001e52:	e00f      	b.n	8001e74 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_4:
      *val = STHS34PF80_AVG_T_4;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
      break;
 8001e5a:	e00b      	b.n	8001e74 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_2:
      *val = STHS34PF80_AVG_T_2;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
      break;
 8001e62:	e007      	b.n	8001e74 <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_1:
      *val = STHS34PF80_AVG_T_1;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e003      	b.n	8001e74 <sths34pf80_avg_tambient_num_get+0x64>

    default:
      *val = STHS34PF80_AVG_T_8;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
      break;
 8001e72:	bf00      	nop
  }
  return ret;
 8001e74:	68fb      	ldr	r3, [r7, #12]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop

08001e80 <sths34pf80_gain_mode_get>:
  * @param  val      range: GAIN_WIDE_MODE, GAIN_DEFAULT_MODE
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_gain_mode_get(stmdev_ctx_t *ctx, sths34pf80_gain_mode_t *val)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl0_t ctrl0;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL0, (uint8_t *)&ctrl0, 1);
 8001e8a:	f107 0208 	add.w	r2, r7, #8
 8001e8e:	2301      	movs	r3, #1
 8001e90:	2117      	movs	r1, #23
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff04 	bl	8001ca0 <sths34pf80_read_reg>
 8001e98:	60f8      	str	r0, [r7, #12]

  switch (ctrl0.gain)
 8001e9a:	7a3b      	ldrb	r3, [r7, #8]
 8001e9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <sths34pf80_gain_mode_get+0x2c>
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d004      	beq.n	8001eb4 <sths34pf80_gain_mode_get+0x34>
 8001eaa:	e007      	b.n	8001ebc <sths34pf80_gain_mode_get+0x3c>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *val = STHS34PF80_GAIN_WIDE_MODE;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
      break;
 8001eb2:	e007      	b.n	8001ec4 <sths34pf80_gain_mode_get+0x44>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	e003      	b.n	8001ec4 <sths34pf80_gain_mode_get+0x44>

    default:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	701a      	strb	r2, [r3, #0]
      break;
 8001ec2:	bf00      	nop
  }

  return ret;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <sths34pf80_tmos_sensitivity_get>:
  * @param  val      rounded sensitivity value
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_sensitivity_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  sths34pf80_sens_data_t data;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_SENS_DATA, (uint8_t *)&data, 1);
 8001ed8:	f107 0208 	add.w	r2, r7, #8
 8001edc:	2301      	movs	r3, #1
 8001ede:	211d      	movs	r1, #29
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fedd 	bl	8001ca0 <sths34pf80_read_reg>
 8001ee6:	60f8      	str	r0, [r7, #12]
  *val = (int8_t)data.sens * 16 + 2048;
 8001ee8:	7a3b      	ldrb	r3, [r7, #8]
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	3380      	adds	r3, #128	; 0x80
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <sths34pf80_tmos_odr_set>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_set(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t val)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  sths34pf80_avg_trim_t avg_trim;
  sths34pf80_tmos_odr_t max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 8001f10:	2308      	movs	r3, #8
 8001f12:	75fb      	strb	r3, [r7, #23]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001f14:	f107 020c 	add.w	r2, r7, #12
 8001f18:	2301      	movs	r3, #1
 8001f1a:	2120      	movs	r1, #32
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff febf 	bl	8001ca0 <sths34pf80_read_reg>
 8001f22:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d12e      	bne.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
  {
    ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8001f2a:	f107 0208 	add.w	r2, r7, #8
 8001f2e:	2301      	movs	r3, #1
 8001f30:	2110      	movs	r1, #16
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff feb4 	bl	8001ca0 <sths34pf80_read_reg>
 8001f38:	6138      	str	r0, [r7, #16]

    switch (avg_trim.avg_tmos)
 8001f3a:	7a3b      	ldrb	r3, [r7, #8]
 8001f3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3b03      	subs	r3, #3
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d80d      	bhi.n	8001f64 <sths34pf80_tmos_odr_set+0x60>
 8001f48:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <sths34pf80_tmos_odr_set+0x4c>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f6b 	.word	0x08001f6b
 8001f54:	08001f71 	.word	0x08001f71
 8001f58:	08001f77 	.word	0x08001f77
 8001f5c:	08001f7d 	.word	0x08001f7d
 8001f60:	08001f83 	.word	0x08001f83
    {
      case STHS34PF80_AVG_TMOS_2:
      case STHS34PF80_AVG_TMOS_8:
      case STHS34PF80_AVG_TMOS_32:
        max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 8001f64:	2308      	movs	r3, #8
 8001f66:	75fb      	strb	r3, [r7, #23]
        break;
 8001f68:	e00e      	b.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_128:
        max_odr = STHS34PF80_TMOS_ODR_AT_8Hz;
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	75fb      	strb	r3, [r7, #23]
        break;
 8001f6e:	e00b      	b.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_256:
        max_odr = STHS34PF80_TMOS_ODR_AT_4Hz;
 8001f70:	2305      	movs	r3, #5
 8001f72:	75fb      	strb	r3, [r7, #23]
        break;
 8001f74:	e008      	b.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_512:
        max_odr = STHS34PF80_TMOS_ODR_AT_2Hz;
 8001f76:	2304      	movs	r3, #4
 8001f78:	75fb      	strb	r3, [r7, #23]
        break;
 8001f7a:	e005      	b.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_1024:
        max_odr = STHS34PF80_TMOS_ODR_AT_1Hz;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8001f80:	e002      	b.n	8001f88 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_2048:
        max_odr = STHS34PF80_TMOS_ODR_AT_0Hz50;
 8001f82:	2302      	movs	r3, #2
 8001f84:	75fb      	strb	r3, [r7, #23]
        break;
 8001f86:	bf00      	nop
    }
  }

  if (ret == 0)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12f      	bne.n	8001fee <sths34pf80_tmos_odr_set+0xea>
  {
    if (val > max_odr)
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d902      	bls.n	8001f9c <sths34pf80_tmos_odr_set+0x98>
    {
      return -1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e029      	b.n	8001ff0 <sths34pf80_tmos_odr_set+0xec>
    }

    if (val > 0)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d012      	beq.n	8001fc8 <sths34pf80_tmos_odr_set+0xc4>
    {
      /*
       * Do a clean reset algo procedure everytime odr is changed to an
       * operative state.
       */
      ctrl1.odr = 0;
 8001fa2:	7b3b      	ldrb	r3, [r7, #12]
 8001fa4:	f36f 0303 	bfc	r3, #0, #4
 8001fa8:	733b      	strb	r3, [r7, #12]
      ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001faa:	f107 020c 	add.w	r2, r7, #12
 8001fae:	2301      	movs	r3, #1
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe8c 	bl	8001cd0 <sths34pf80_write_reg>
 8001fb8:	6138      	str	r0, [r7, #16]

      ret += sths34pf80_reset_algo(ctx);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f993 	bl	80022e6 <sths34pf80_reset_algo>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    }

    ctrl1.odr = ((uint8_t)val & 0xf);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	7b3b      	ldrb	r3, [r7, #12]
 8001fd2:	f362 0303 	bfi	r3, r2, #0, #4
 8001fd6:	733b      	strb	r3, [r7, #12]
    ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8001fd8:	f107 020c 	add.w	r2, r7, #12
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2120      	movs	r1, #32
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fe75 	bl	8001cd0 <sths34pf80_write_reg>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8001fee:	693b      	ldr	r3, [r7, #16]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <sths34pf80_tmos_odr_get>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_get(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t *val)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002002:	f107 0208 	add.w	r2, r7, #8
 8002006:	2301      	movs	r3, #1
 8002008:	2120      	movs	r1, #32
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fe48 	bl	8001ca0 <sths34pf80_read_reg>
 8002010:	60f8      	str	r0, [r7, #12]

  switch (ctrl1.odr)
 8002012:	7a3b      	ldrb	r3, [r7, #8]
 8002014:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b08      	cmp	r3, #8
 800201c:	d838      	bhi.n	8002090 <sths34pf80_tmos_odr_get+0x98>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <sths34pf80_tmos_odr_get+0x2c>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002049 	.word	0x08002049
 8002028:	08002051 	.word	0x08002051
 800202c:	08002059 	.word	0x08002059
 8002030:	08002061 	.word	0x08002061
 8002034:	08002069 	.word	0x08002069
 8002038:	08002071 	.word	0x08002071
 800203c:	08002079 	.word	0x08002079
 8002040:	08002081 	.word	0x08002081
 8002044:	08002089 	.word	0x08002089
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *val = STHS34PF80_TMOS_ODR_OFF;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	e023      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz25;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
      break;
 8002056:	e01f      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz50;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
      break;
 800205e:	e01b      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *val = STHS34PF80_TMOS_ODR_AT_1Hz;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
      break;
 8002066:	e017      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *val = STHS34PF80_TMOS_ODR_AT_2Hz;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	701a      	strb	r2, [r3, #0]
      break;
 800206e:	e013      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *val = STHS34PF80_TMOS_ODR_AT_4Hz;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2205      	movs	r2, #5
 8002074:	701a      	strb	r2, [r3, #0]
      break;
 8002076:	e00f      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *val = STHS34PF80_TMOS_ODR_AT_8Hz;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2206      	movs	r2, #6
 800207c:	701a      	strb	r2, [r3, #0]
      break;
 800207e:	e00b      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *val = STHS34PF80_TMOS_ODR_AT_15Hz;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2207      	movs	r2, #7
 8002084:	701a      	strb	r2, [r3, #0]
      break;
 8002086:	e007      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *val = STHS34PF80_TMOS_ODR_AT_30Hz;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2208      	movs	r2, #8
 800208c:	701a      	strb	r2, [r3, #0]
      break;
 800208e:	e003      	b.n	8002098 <sths34pf80_tmos_odr_get+0xa0>

    default:
      *val = STHS34PF80_TMOS_ODR_OFF;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
      break;
 8002096:	bf00      	nop
  }
  return ret;
 8002098:	68fb      	ldr	r3, [r7, #12]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop

080020a4 <sths34pf80_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80020b0:	f107 0208 	add.w	r2, r7, #8
 80020b4:	2301      	movs	r3, #1
 80020b6:	2120      	movs	r1, #32
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fdf1 	bl	8001ca0 <sths34pf80_read_reg>
 80020be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <sths34pf80_block_data_update_set+0x42>
  {
    ctrl1.bdu = val;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	7a3b      	ldrb	r3, [r7, #8]
 80020d0:	f362 1304 	bfi	r3, r2, #4, #1
 80020d4:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80020d6:	f107 0208 	add.w	r2, r7, #8
 80020da:	2301      	movs	r3, #1
 80020dc:	2120      	movs	r1, #32
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fdf6 	bl	8001cd0 <sths34pf80_write_reg>
 80020e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <sths34pf80_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_mem_bank_set(stmdev_ctx_t *ctx, sths34pf80_mem_bank_t val)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl2_t ctrl2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 80020fc:	f107 0208 	add.w	r2, r7, #8
 8002100:	2301      	movs	r3, #1
 8002102:	2121      	movs	r1, #33	; 0x21
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fdcb 	bl	8001ca0 <sths34pf80_read_reg>
 800210a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <sths34pf80_mem_bank_set+0x42>
  {
    ctrl2.func_cfg_access = ((uint8_t)val & 0x1);
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	7a3b      	ldrb	r3, [r7, #8]
 800211c:	f362 1304 	bfi	r3, r2, #4, #1
 8002120:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 8002122:	f107 0208 	add.w	r2, r7, #8
 8002126:	2301      	movs	r3, #1
 8002128:	2121      	movs	r1, #33	; 0x21
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fdd0 	bl	8001cd0 <sths34pf80_write_reg>
 8002130:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <sths34pf80_tobject_raw_get>:
  * @param  val      Object temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tobject_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TOBJECT_L, &buff[0], 2);
 8002146:	f107 0208 	add.w	r2, r7, #8
 800214a:	2302      	movs	r3, #2
 800214c:	2126      	movs	r1, #38	; 0x26
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fda6 	bl	8001ca0 <sths34pf80_read_reg>
 8002154:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 8002156:	7a7b      	ldrb	r3, [r7, #9]
 8002158:	b21a      	sxth	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002164:	b29b      	uxth	r3, r3
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b29a      	uxth	r2, r3
 800216a:	7a3b      	ldrb	r3, [r7, #8]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	b21a      	sxth	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	801a      	strh	r2, [r3, #0]

  return ret;
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <sths34pf80_tambient_raw_get>:
  * @param  val      Ambient temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tambient_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TAMBIENT_L, &buff[0], 2);
 800218c:	f107 0208 	add.w	r2, r7, #8
 8002190:	2302      	movs	r3, #2
 8002192:	2128      	movs	r1, #40	; 0x28
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fd83 	bl	8001ca0 <sths34pf80_read_reg>
 800219a:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 800219c:	7a7b      	ldrb	r3, [r7, #9]
 800219e:	b21a      	sxth	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	7a3b      	ldrb	r3, [r7, #8]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	801a      	strh	r2, [r3, #0]

  return ret;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <sths34pf80_func_cfg_write>:
  * @param  len      embedded register data len
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_func_cfg_write(stmdev_ctx_t *ctx, uint8_t addr, uint8_t *data, uint8_t len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	72fb      	strb	r3, [r7, #11]
 80021d8:	4613      	mov	r3, r2
 80021da:	72bb      	strb	r3, [r7, #10]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  sths34pf80_page_rw_t page_rw = {0};
 80021dc:	2300      	movs	r3, #0
 80021de:	753b      	strb	r3, [r7, #20]
  int32_t ret;
  uint8_t i;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80021e0:	f107 0218 	add.w	r2, r7, #24
 80021e4:	2301      	movs	r3, #1
 80021e6:	2120      	movs	r1, #32
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fd59 	bl	8001ca0 <sths34pf80_read_reg>
 80021ee:	61f8      	str	r0, [r7, #28]
  odr = ctrl1.odr;
 80021f0:	7e3b      	ldrb	r3, [r7, #24]
 80021f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	76bb      	strb	r3, [r7, #26]
  ctrl1.odr = 0;
 80021fa:	7e3b      	ldrb	r3, [r7, #24]
 80021fc:	f36f 0303 	bfc	r3, #0, #4
 8002200:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002202:	f107 0218 	add.w	r2, r7, #24
 8002206:	2301      	movs	r3, #1
 8002208:	2120      	movs	r1, #32
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fd60 	bl	8001cd0 <sths34pf80_write_reg>
 8002210:	4602      	mov	r2, r0
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	61fb      	str	r3, [r7, #28]

  /* Enable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_EMBED_FUNC_MEM_BANK);
 8002218:	2101      	movs	r1, #1
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff ff68 	bl	80020f0 <sths34pf80_mem_bank_set>
 8002220:	4602      	mov	r2, r0
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	61fb      	str	r3, [r7, #28]

  /* Enable write mode */
  page_rw.func_cfg_write = 1;
 8002228:	7d3b      	ldrb	r3, [r7, #20]
 800222a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222e:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8002230:	f107 0214 	add.w	r2, r7, #20
 8002234:	2301      	movs	r3, #1
 8002236:	2111      	movs	r1, #17
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fd49 	bl	8001cd0 <sths34pf80_write_reg>
 800223e:	4602      	mov	r2, r0
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	61fb      	str	r3, [r7, #28]

  /* Select register address (it will autoincrement when writing) */
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_ADDR, &addr, 1);
 8002246:	f107 020b 	add.w	r2, r7, #11
 800224a:	2301      	movs	r3, #1
 800224c:	2108      	movs	r1, #8
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff fd3e 	bl	8001cd0 <sths34pf80_write_reg>
 8002254:	4602      	mov	r2, r0
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	61fb      	str	r3, [r7, #28]

  for (i = 0; i < len; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	76fb      	strb	r3, [r7, #27]
 8002260:	e00e      	b.n	8002280 <sths34pf80_func_cfg_write+0xb8>
  {
    /* Write data */
    ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_DATA, &data[i], 1);
 8002262:	7efb      	ldrb	r3, [r7, #27]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	441a      	add	r2, r3
 8002268:	2301      	movs	r3, #1
 800226a:	2109      	movs	r1, #9
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff fd2f 	bl	8001cd0 <sths34pf80_write_reg>
 8002272:	4602      	mov	r2, r0
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < len; i++)
 800227a:	7efb      	ldrb	r3, [r7, #27]
 800227c:	3301      	adds	r3, #1
 800227e:	76fb      	strb	r3, [r7, #27]
 8002280:	7efa      	ldrb	r2, [r7, #27]
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3ec      	bcc.n	8002262 <sths34pf80_func_cfg_write+0x9a>
  }

  /* Disable write mode */
  page_rw.func_cfg_write = 0;
 8002288:	7d3b      	ldrb	r3, [r7, #20]
 800228a:	f36f 1386 	bfc	r3, #6, #1
 800228e:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8002290:	f107 0214 	add.w	r2, r7, #20
 8002294:	2301      	movs	r3, #1
 8002296:	2111      	movs	r1, #17
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff fd19 	bl	8001cd0 <sths34pf80_write_reg>
 800229e:	4602      	mov	r2, r0
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]

  /* Disable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_MAIN_MEM_BANK);
 80022a6:	2100      	movs	r1, #0
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff ff21 	bl	80020f0 <sths34pf80_mem_bank_set>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	61fb      	str	r3, [r7, #28]

  /* Set saved odr back */
  ctrl1.odr = odr;
 80022b6:	7ebb      	ldrb	r3, [r7, #26]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	7e3b      	ldrb	r3, [r7, #24]
 80022c0:	f362 0303 	bfi	r3, r2, #0, #4
 80022c4:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 80022c6:	f107 0218 	add.w	r2, r7, #24
 80022ca:	2301      	movs	r3, #1
 80022cc:	2120      	movs	r1, #32
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fcfe 	bl	8001cd0 <sths34pf80_write_reg>
 80022d4:	4602      	mov	r2, r0
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]

  return ret;
 80022dc:	69fb      	ldr	r3, [r7, #28]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <sths34pf80_reset_algo>:
  * @param  val      reset algo structure
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_reset_algo(stmdev_ctx_t *ctx)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  tmp = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	72fb      	strb	r3, [r7, #11]
  ret = sths34pf80_func_cfg_write(ctx, STHS34PF80_RESET_ALGO, &tmp, 1);
 80022f2:	f107 020b 	add.w	r2, r7, #11
 80022f6:	2301      	movs	r3, #1
 80022f8:	212a      	movs	r1, #42	; 0x2a
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff64 	bl	80021c8 <sths34pf80_func_cfg_write>
 8002300:	60f8      	str	r0, [r7, #12]

  return ret;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <BSP_LED_Init+0x20>)
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	0800a38c 	.word	0x0800a38c

08002330 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <BSP_LED_On+0x28>)
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	2120      	movs	r1, #32
 8002344:	2201      	movs	r2, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f001 f8de 	bl	8003508 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000028 	.word	0x20000028

0800235c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <BSP_LED_Off+0x28>)
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	2120      	movs	r1, #32
 8002370:	2200      	movs	r2, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f001 f8c8 	bl	8003508 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000028 	.word	0x20000028

08002388 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a10      	ldr	r2, [pc, #64]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <LED_USER_GPIO_Init+0x7c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2120      	movs	r1, #32
 80023da:	480b      	ldr	r0, [pc, #44]	; (8002408 <LED_USER_GPIO_Init+0x80>)
 80023dc:	f001 f894 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80023e0:	2320      	movs	r3, #32
 80023e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	4619      	mov	r1, r3
 80023f6:	4804      	ldr	r0, [pc, #16]	; (8002408 <LED_USER_GPIO_Init+0x80>)
 80023f8:	f000 fe1e 	bl	8003038 <HAL_GPIO_Init>

}
 80023fc:	bf00      	nop
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	40020000 	.word	0x40020000

0800240c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d903      	bls.n	8002428 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002420:	f06f 0301 	mvn.w	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e025      	b.n	8002474 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	4914      	ldr	r1, [pc, #80]	; (8002480 <BSP_COM_Init+0x74>)
 800242e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002432:	4814      	ldr	r0, [pc, #80]	; (8002484 <BSP_COM_Init+0x78>)
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4403      	add	r3, r0
 800243e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002440:	79fa      	ldrb	r2, [r7, #7]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <BSP_COM_Init+0x78>)
 800244c:	4413      	add	r3, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f848 	bl	80024e4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002454:	79fa      	ldrb	r2, [r7, #7]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <BSP_COM_Init+0x78>)
 8002460:	4413      	add	r3, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f810 	bl	8002488 <MX_USART2_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800246e:	f06f 0303 	mvn.w	r3, #3
 8002472:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002474:	68fb      	ldr	r3, [r7, #12]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000002c 	.word	0x2000002c
 8002484:	200001c0 	.word	0x200001c0

08002488 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <MX_USART2_UART_Init+0x58>)
 8002498:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80024a0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f003 fdb4 	bl	8006034 <HAL_UART_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40004400 	.word	0x40004400

080024e4 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <USART2_MspInit+0xdc>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <USART2_MspInit+0xdc>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <USART2_MspInit+0xdc>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <USART2_MspInit+0xdc>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <USART2_MspInit+0xdc>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <USART2_MspInit+0xdc>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002524:	2304      	movs	r3, #4
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002534:	2307      	movs	r3, #7
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4821      	ldr	r0, [pc, #132]	; (80025c4 <USART2_MspInit+0xe0>)
 8002540:	f000 fd7a 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002544:	2308      	movs	r3, #8
 8002546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002554:	2307      	movs	r3, #7
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4819      	ldr	r0, [pc, #100]	; (80025c4 <USART2_MspInit+0xe0>)
 8002560:	f000 fd6a 	bl	8003038 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <USART2_MspInit+0xe4>)
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <USART2_MspInit+0xe8>)
 8002568:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <USART2_MspInit+0xe4>)
 800256c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002570:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <USART2_MspInit+0xe4>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <USART2_MspInit+0xe4>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <USART2_MspInit+0xe4>)
 8002580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002584:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <USART2_MspInit+0xe4>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <USART2_MspInit+0xe4>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <USART2_MspInit+0xe4>)
 8002594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002598:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <USART2_MspInit+0xe4>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <USART2_MspInit+0xe4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart2_rx);
 80025a6:	4808      	ldr	r0, [pc, #32]	; (80025c8 <USART2_MspInit+0xe4>)
 80025a8:	f000 f9d6 	bl	8002958 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <USART2_MspInit+0xe4>)
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <USART2_MspInit+0xe4>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020000 	.word	0x40020000
 80025c8:	20000208 	.word	0x20000208
 80025cc:	40026088 	.word	0x40026088

080025d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_Init+0x40>)
 80025da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <HAL_Init+0x40>)
 80025e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x40>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f000 f94f 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fe:	2000      	movs	r0, #0
 8002600:	f000 f808 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002604:	f7fe fcea 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00

08002614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x54>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x58>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	fbb3 f3f1 	udiv	r3, r3, r1
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f967 	bl	8002906 <HAL_SYSTICK_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00e      	b.n	8002660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d80a      	bhi.n	800265e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002648:	2200      	movs	r2, #0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f000 f92f 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <HAL_InitTick+0x5c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000000 	.word	0x20000000
 800266c:	20000034 	.word	0x20000034
 8002670:	20000030 	.word	0x20000030

08002674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000034 	.word	0x20000034
 8002698:	20000268 	.word	0x20000268

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000268 	.word	0x20000268

080026b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d005      	beq.n	80026da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_Delay+0x44>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026da:	bf00      	nop
 80026dc:	f7ff ffde 	bl	800269c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8f7      	bhi.n	80026dc <HAL_Delay+0x28>
  {
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000034 	.word	0x20000034

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00e      	b.n	800294e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe fb73 	bl	800102c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff fe9a 	bl	800269c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e099      	b.n	8002aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	e00f      	b.n	80029b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002996:	f7ff fe81 	bl	800269c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d908      	bls.n	80029b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e078      	b.n	8002aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_DMA_Init+0x158>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d117      	bne.n	8002a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa6f 	bl	8002f40 <DMA_CheckFifoParam>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a76:	2301      	movs	r3, #1
 8002a78:	e016      	b.n	8002aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa26 	bl	8002ed4 <DMA_CalcBaseAndBitshift>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	f010803f 	.word	0xf010803f

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Start_IT+0x26>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e040      	b.n	8002b5c <HAL_DMA_Start_IT+0xa8>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d12f      	bne.n	8002b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9b8 	bl	8002e78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	223f      	movs	r2, #63	; 0x3f
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0216 	orr.w	r2, r2, #22
 8002b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e005      	b.n	8002b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b70:	4b8e      	ldr	r3, [pc, #568]	; (8002dac <HAL_DMA_IRQHandler+0x248>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8e      	ldr	r2, [pc, #568]	; (8002db0 <HAL_DMA_IRQHandler+0x24c>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2208      	movs	r2, #8
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2204      	movs	r2, #4
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2210      	movs	r2, #16
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d043      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d03c      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2210      	movs	r2, #16
 8002c60:	409a      	lsls	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
 8002c92:	e01f      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
 8002ca4:	e016      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0208 	bic.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2220      	movs	r2, #32
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 808f 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8087 	beq.w	8002e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d136      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0216 	bic.w	r2, r2, #22
 8002d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x1da>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	223f      	movs	r2, #63	; 0x3f
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d07e      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
        }
        return;
 8002d7a:	e079      	b.n	8002e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	e02c      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000
 8002db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d023      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e01e      	b.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0210 	bic.w	r2, r2, #16
 8002de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d032      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d307      	bcc.n	8002e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f2      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x2cc>
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e70:	bf00      	nop
    }
  }
}
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d108      	bne.n	8002eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eb6:	e007      	b.n	8002ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3b10      	subs	r3, #16
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <DMA_CalcBaseAndBitshift+0x64>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <DMA_CalcBaseAndBitshift+0x68>)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d909      	bls.n	8002f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	; 0x58
 8002f14:	e007      	b.n	8002f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	aaaaaaab 	.word	0xaaaaaaab
 8002f3c:	0800a390 	.word	0x0800a390

08002f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11f      	bne.n	8002f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d856      	bhi.n	800300e <DMA_CheckFifoParam+0xce>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <DMA_CheckFifoParam+0x28>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f8b 	.word	0x08002f8b
 8002f70:	08002f79 	.word	0x08002f79
 8002f74:	0800300f 	.word	0x0800300f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d046      	beq.n	8003012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f88:	e043      	b.n	8003012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f92:	d140      	bne.n	8003016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f98:	e03d      	b.n	8003016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa2:	d121      	bne.n	8002fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d837      	bhi.n	800301a <DMA_CheckFifoParam+0xda>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <DMA_CheckFifoParam+0x70>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fc7 	.word	0x08002fc7
 8002fb8:	08002fc1 	.word	0x08002fc1
 8002fbc:	08002fd9 	.word	0x08002fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc4:	e030      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d025      	beq.n	800301e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd6:	e022      	b.n	800301e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe0:	d11f      	bne.n	8003022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fe6:	e01c      	b.n	8003022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d903      	bls.n	8002ff6 <DMA_CheckFifoParam+0xb6>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d003      	beq.n	8002ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ff4:	e018      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8002ffa:	e015      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e00b      	b.n	8003026 <DMA_CheckFifoParam+0xe6>
      break;
 800300e:	bf00      	nop
 8003010:	e00a      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e008      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003016:	bf00      	nop
 8003018:	e006      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 800301a:	bf00      	nop
 800301c:	e004      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 800301e:	bf00      	nop
 8003020:	e002      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;   
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
    }
  } 
  
  return status; 
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e159      	b.n	8003308 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	f040 8148 	bne.w	8003302 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d005      	beq.n	800308a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	2b02      	cmp	r3, #2
 8003088:	d130      	bne.n	80030ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d017      	beq.n	8003128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d123      	bne.n	800317c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a2 	beq.w	8003302 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_GPIO_Init+0x2e8>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <HAL_GPIO_Init+0x2e8>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_GPIO_Init+0x2e8>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_Init+0x2ec>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a49      	ldr	r2, [pc, #292]	; (8003328 <HAL_GPIO_Init+0x2f0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <HAL_GPIO_Init+0x202>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a48      	ldr	r2, [pc, #288]	; (800332c <HAL_GPIO_Init+0x2f4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0x1fe>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a47      	ldr	r2, [pc, #284]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x1fa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a46      	ldr	r2, [pc, #280]	; (8003334 <HAL_GPIO_Init+0x2fc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x1f6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a45      	ldr	r2, [pc, #276]	; (8003338 <HAL_GPIO_Init+0x300>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x1f2>
 8003226:	2304      	movs	r3, #4
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x204>
 800322a:	2307      	movs	r3, #7
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x204>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x204>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x204>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x204>
 800323a:	2300      	movs	r3, #0
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324c:	4935      	ldr	r1, [pc, #212]	; (8003324 <HAL_GPIO_Init+0x2ec>)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_GPIO_Init+0x304>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <HAL_GPIO_Init+0x304>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_GPIO_Init+0x304>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <HAL_GPIO_Init+0x304>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_GPIO_Init+0x304>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_GPIO_Init+0x304>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_GPIO_Init+0x304>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032fc:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_GPIO_Init+0x304>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f aea2 	bls.w	8003054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40013800 	.word	0x40013800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40021000 	.word	0x40021000
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e0bb      	b.n	80034d4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800335c:	2201      	movs	r2, #1
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	429a      	cmp	r2, r3
 8003374:	f040 80ab 	bne.w	80034ce <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003378:	4a5c      	ldr	r2, [pc, #368]	; (80034ec <HAL_GPIO_DeInit+0x1ac>)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a54      	ldr	r2, [pc, #336]	; (80034f0 <HAL_GPIO_DeInit+0x1b0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_DeInit+0x96>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a53      	ldr	r2, [pc, #332]	; (80034f4 <HAL_GPIO_DeInit+0x1b4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_DeInit+0x92>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_GPIO_DeInit+0x1b8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_DeInit+0x8e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a51      	ldr	r2, [pc, #324]	; (80034fc <HAL_GPIO_DeInit+0x1bc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_DeInit+0x8a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a50      	ldr	r2, [pc, #320]	; (8003500 <HAL_GPIO_DeInit+0x1c0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_DeInit+0x86>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_DeInit+0x98>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_DeInit+0x98>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_DeInit+0x98>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_DeInit+0x98>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_DeInit+0x98>
 80033d6:	2300      	movs	r3, #0
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d132      	bne.n	800344e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4944      	ldr	r1, [pc, #272]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033f6:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4941      	ldr	r1, [pc, #260]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 8003400:	4013      	ands	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43db      	mvns	r3, r3
 800340c:	493d      	ldr	r1, [pc, #244]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 800340e:	4013      	ands	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43db      	mvns	r3, r3
 800341a:	493a      	ldr	r1, [pc, #232]	; (8003504 <HAL_GPIO_DeInit+0x1c4>)
 800341c:	4013      	ands	r3, r2
 800341e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003430:	4a2e      	ldr	r2, [pc, #184]	; (80034ec <HAL_GPIO_DeInit+0x1ac>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	43da      	mvns	r2, r3
 8003440:	482a      	ldr	r0, [pc, #168]	; (80034ec <HAL_GPIO_DeInit+0x1ac>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	400a      	ands	r2, r1
 8003448:	3302      	adds	r3, #2
 800344a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2103      	movs	r1, #3
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	08d2      	lsrs	r2, r2, #3
 8003484:	4019      	ands	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2103      	movs	r1, #3
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	2101      	movs	r1, #1
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2103      	movs	r1, #3
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	f67f af40 	bls.w	800335c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40021000 	.word	0x40021000
 8003504:	40013c00 	.word	0x40013c00

08003508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	619a      	str	r2, [r3, #24]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f95d 	bl	8003822 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a0:	f001 fcbe 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a81      	ldr	r2, [pc, #516]	; (80037b0 <HAL_I2C_Init+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <HAL_I2C_Init+0x84>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_I2C_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bf94      	ite	ls
 80035b8:	2301      	movls	r3, #1
 80035ba:	2300      	movhi	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e006      	b.n	80035ce <HAL_I2C_Init+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <HAL_I2C_Init+0x27c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e7      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a78      	ldr	r2, [pc, #480]	; (80037bc <HAL_I2C_Init+0x280>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a6a      	ldr	r2, [pc, #424]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <HAL_I2C_Init+0xd4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	e009      	b.n	8003624 <HAL_I2C_Init+0xe8>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_I2C_Init+0x284>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	495c      	ldr	r1, [pc, #368]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d819      	bhi.n	8003678 <HAL_I2C_Init+0x13c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003658:	400b      	ands	r3, r1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_I2C_Init+0x138>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	e051      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003674:	2304      	movs	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x168>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x18e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x196>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e021      	b.n	800381a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2224      	movs	r2, #36	; 0x24
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f821 	bl	8003836 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003866:	f7fe ff19 	bl	800269c <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 80d9 	bne.w	8003a2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2319      	movs	r3, #25
 8003880:	2201      	movs	r2, #1
 8003882:	496d      	ldr	r1, [pc, #436]	; (8003a38 <HAL_I2C_Mem_Write+0x1ec>)
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fca5 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	e0cc      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x56>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0c5      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d007      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a4d      	ldr	r2, [pc, #308]	; (8003a3c <HAL_I2C_Mem_Write+0x1f0>)
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800390a:	88f8      	ldrh	r0, [r7, #6]
 800390c:	893a      	ldrh	r2, [r7, #8]
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	4603      	mov	r3, r0
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fadc 	bl	8003ed8 <I2C_RequestMemoryWrite>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d052      	beq.n	80039cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e081      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fd6a 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d11b      	bne.n	80039cc <HAL_I2C_Mem_Write+0x180>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d017      	beq.n	80039cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1aa      	bne.n	800392a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fd5d 	bl	8004498 <I2C_WaitOnBTFFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00d      	beq.n	8003a00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d107      	bne.n	80039fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e016      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	00100002 	.word	0x00100002
 8003a3c:	ffff0000 	.word	0xffff0000

08003a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5a:	f7fe fe1f 	bl	800269c <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	f040 8214 	bne.w	8003e96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2319      	movs	r3, #25
 8003a74:	2201      	movs	r2, #1
 8003a76:	497b      	ldr	r1, [pc, #492]	; (8003c64 <HAL_I2C_Mem_Read+0x224>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fbab 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	e207      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x56>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e200      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d007      	beq.n	8003abc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2222      	movs	r2, #34	; 0x22
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <HAL_I2C_Mem_Read+0x228>)
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003afe:	88f8      	ldrh	r0, [r7, #6]
 8003b00:	893a      	ldrh	r2, [r7, #8]
 8003b02:	8979      	ldrh	r1, [r7, #10]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa78 	bl	8004004 <I2C_RequestMemoryRead>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1bc      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d113      	bne.n	8003b4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e190      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d11b      	bne.n	8003b8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e170      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d11b      	bne.n	8003bce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	e150      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003be4:	e144      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	f200 80f1 	bhi.w	8003dd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d123      	bne.n	8003c40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fc93 	bl	8004528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e145      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c3e:	e117      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d14e      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	2200      	movs	r2, #0
 8003c50:	4906      	ldr	r1, [pc, #24]	; (8003c6c <HAL_I2C_Mem_Read+0x22c>)
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fabe 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e11a      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
 8003c62:	bf00      	nop
 8003c64:	00100002 	.word	0x00100002
 8003c68:	ffff0000 	.word	0xffff0000
 8003c6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ce4:	e0c4      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2200      	movs	r2, #0
 8003cee:	496c      	ldr	r1, [pc, #432]	; (8003ea0 <HAL_I2C_Mem_Read+0x460>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 fa6f 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0cb      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4955      	ldr	r1, [pc, #340]	; (8003ea0 <HAL_I2C_Mem_Read+0x460>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa41 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e09d      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd0:	e04e      	b.n	8003e70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fba6 	bl	8004528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e058      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d124      	bne.n	8003e70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d107      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f aeb6 	bne.w	8003be6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00010004 	.word	0x00010004

08003ea4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	817b      	strh	r3, [r7, #10]
 8003eea:	460b      	mov	r3, r1
 8003eec:	813b      	strh	r3, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f960 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00d      	beq.n	8003f36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f28:	d103      	bne.n	8003f32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e05f      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	492d      	ldr	r1, [pc, #180]	; (8004000 <I2C_RequestMemoryWrite+0x128>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f9bb 	bl	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e04c      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	6a39      	ldr	r1, [r7, #32]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa46 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d107      	bne.n	8003f9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e02b      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	611a      	str	r2, [r3, #16]
 8003fae:	e021      	b.n	8003ff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb0:	893b      	ldrh	r3, [r7, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa20 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d107      	bne.n	8003fe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e005      	b.n	8003ff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00010002 	.word	0x00010002

08004004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2200      	movs	r2, #0
 8004046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8c2 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	d103      	bne.n	800406e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0aa      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	4952      	ldr	r1, [pc, #328]	; (80041d0 <I2C_RequestMemoryRead+0x1cc>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f91d 	bl	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e097      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9a8 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e076      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e021      	b.n	8004130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f982 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e050      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6a39      	ldr	r1, [r7, #32]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f967 	bl	8004408 <I2C_WaitOnTXEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2b04      	cmp	r3, #4
 8004146:	d107      	bne.n	8004158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e035      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2200      	movs	r2, #0
 8004174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f82b 	bl	80041d4 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d103      	bne.n	800419c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e013      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6a3a      	ldr	r2, [r7, #32]
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <I2C_RequestMemoryRead+0x1cc>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f886 	bl	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	00010002 	.word	0x00010002

080041d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	e048      	b.n	8004278 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d044      	beq.n	8004278 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fe fa55 	bl	800269c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d139      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10d      	bne.n	800422a <I2C_WaitOnFlagUntilTimeout+0x56>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	e00c      	b.n	8004244 <I2C_WaitOnFlagUntilTimeout+0x70>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	43da      	mvns	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	429a      	cmp	r2, r3
 8004248:	d116      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e023      	b.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10d      	bne.n	800429e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	43da      	mvns	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	e00c      	b.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	43da      	mvns	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4013      	ands	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d093      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d6:	e071      	b.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d123      	bne.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f043 0204 	orr.w	r2, r3, #4
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e067      	b.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d041      	beq.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe f9b0 	bl	800269c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d136      	bne.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10c      	bne.n	8004372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e00b      	b.n	800438a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	43da      	mvns	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e021      	b.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0c1b      	lsrs	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10c      	bne.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	43da      	mvns	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e00b      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	43da      	mvns	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bf14      	ite	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	2300      	moveq	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f47f af6d 	bne.w	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004414:	e034      	b.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f8e3 	bl	80045e2 <I2C_IsAcknowledgeFailed>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e034      	b.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d028      	beq.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fe f935 	bl	800269c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11d      	bne.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b80      	cmp	r3, #128	; 0x80
 8004450:	d016      	beq.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e007      	b.n	8004490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d1c3      	bne.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a4:	e034      	b.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f89b 	bl	80045e2 <I2C_IsAcknowledgeFailed>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e034      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d028      	beq.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fe f8ed 	bl	800269c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11d      	bne.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d016      	beq.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e007      	b.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d1c3      	bne.n	80044a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004534:	e049      	b.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d119      	bne.n	8004578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e030      	b.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7fe f890 	bl	800269c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d016      	beq.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e007      	b.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d1ae      	bne.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f8:	d11b      	bne.n	8004632 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004602:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e267      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d075      	beq.n	800474a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800465e:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00c      	beq.n	8004684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466a:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d112      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d10b      	bne.n	800469c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d05b      	beq.n	8004748 <HAL_RCC_OscConfig+0x108>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d157      	bne.n	8004748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e242      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d106      	bne.n	80046b4 <HAL_RCC_OscConfig+0x74>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e01d      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6f      	ldr	r2, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0xb0>
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a68      	ldr	r2, [pc, #416]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a65      	ldr	r2, [pc, #404]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd ffd0 	bl	800269c <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004700:	f7fd ffcc 	bl	800269c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e207      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0xc0>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fd ffbc 	bl	800269c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004728:	f7fd ffb8 	bl	800269c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e1f3      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0xe8>
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d063      	beq.n	800481e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476a:	2b08      	cmp	r3, #8
 800476c:	d11c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d116      	bne.n	80047a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e1c7      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004792:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4937      	ldr	r1, [pc, #220]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a6:	e03a      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b0:	4b34      	ldr	r3, [pc, #208]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd ff71 	bl	800269c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047be:	f7fd ff6d 	bl	800269c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1a8      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	4b2b      	ldr	r3, [pc, #172]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4925      	ldr	r1, [pc, #148]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	e015      	b.n	800481e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x244>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd ff50 	bl	800269c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004800:	f7fd ff4c 	bl	800269c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e187      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004834:	2201      	movs	r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd ff30 	bl	800269c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004840:	f7fd ff2c 	bl	800269c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e167      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_OscConfig+0x240>)
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x200>
 800485e:	e01b      	b.n	8004898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_OscConfig+0x248>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fd ff19 	bl	800269c <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00e      	b.n	800488c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486e:	f7fd ff15 	bl	800269c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d907      	bls.n	800488c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e150      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	42470000 	.word	0x42470000
 8004888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ea      	bne.n	800486e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8097 	beq.w	80049d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b81      	ldr	r3, [pc, #516]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b7d      	ldr	r3, [pc, #500]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a7c      	ldr	r2, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b77      	ldr	r3, [pc, #476]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b74      	ldr	r3, [pc, #464]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fed5 	bl	800269c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd fed1 	bl	800269c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e10c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCC_OscConfig+0x474>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x2ea>
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	; 0x70
 8004928:	e01c      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b05      	cmp	r3, #5
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x30c>
 8004932:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a5e      	ldr	r2, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a5b      	ldr	r2, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0x324>
 800494c:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	4b55      	ldr	r3, [pc, #340]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a54      	ldr	r2, [pc, #336]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fd fe96 	bl	800269c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fd fe92 	bl	800269c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0cb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ee      	beq.n	8004974 <HAL_RCC_OscConfig+0x334>
 8004996:	e014      	b.n	80049c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004998:	f7fd fe80 	bl	800269c <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a0:	f7fd fe7c 	bl	800269c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b5      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ee      	bne.n	80049a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c8:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80a1 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d05c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d141      	bne.n	8004a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd fe50 	bl	800269c <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd fe4c 	bl	800269c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e087      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fd fe25 	bl	800269c <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fd fe21 	bl	800269c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e05c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x416>
 8004a74:	e054      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x478>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fe0e 	bl	800269c <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fe0a 	bl	800269c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_OscConfig+0x470>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
 8004aa2:	e03d      	b.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e038      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x4ec>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d121      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d11a      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	3b01      	subs	r3, #1
 8004b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0cc      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90c      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b65      	ldr	r3, [pc, #404]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b8      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	494d      	ldr	r1, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d119      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d003      	beq.n	8004bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e067      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b37      	ldr	r3, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4934      	ldr	r1, [pc, #208]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c20:	f7fd fd3c 	bl	800269c <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fd fd38 	bl	800269c <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e04f      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d20c      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e032      	b.n	8004cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4916      	ldr	r1, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cb6:	f000 f821 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	490a      	ldr	r1, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	5ccb      	ldrb	r3, [r1, r3]
 8004cca:	fa22 f303 	lsr.w	r3, r2, r3
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fc9c 	bl	8002614 <HAL_InitTick>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023c00 	.word	0x40023c00
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	0800a374 	.word	0x0800a374
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	20000030 	.word	0x20000030

08004cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d00:	b094      	sub	sp, #80	; 0x50
 8004d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
 8004d08:	2300      	movs	r3, #0
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x40>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	f200 80e1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d2e:	e0db      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d34:	e0db      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b73      	ldr	r3, [pc, #460]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3a:	e0d8      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b6d      	ldr	r3, [pc, #436]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2200      	movs	r2, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	2300      	movs	r3, #0
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d80:	0150      	lsls	r0, r2, #5
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4621      	mov	r1, r4
 8004d88:	1a51      	subs	r1, r2, r1
 8004d8a:	6139      	str	r1, [r7, #16]
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da0:	4659      	mov	r1, fp
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004daa:	4651      	mov	r1, sl
 8004dac:	018a      	lsls	r2, r1, #6
 8004dae:	4651      	mov	r1, sl
 8004db0:	ebb2 0801 	subs.w	r8, r2, r1
 8004db4:	4659      	mov	r1, fp
 8004db6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	462b      	mov	r3, r5
 8004ddc:	eb49 0303 	adc.w	r3, r9, r3
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dee:	4629      	mov	r1, r5
 8004df0:	024b      	lsls	r3, r1, #9
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004df8:	4621      	mov	r1, r4
 8004dfa:	024a      	lsls	r2, r1, #9
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	2200      	movs	r2, #0
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0c:	f7fb fda6 	bl	800095c <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	e058      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	4611      	mov	r1, r2
 8004e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	0159      	lsls	r1, r3, #5
 8004e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e46:	0150      	lsls	r0, r2, #5
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e52:	4649      	mov	r1, r9
 8004e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e70:	eb63 050b 	sbc.w	r5, r3, fp
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	00eb      	lsls	r3, r5, #3
 8004e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e82:	00e2      	lsls	r2, r4, #3
 8004e84:	4614      	mov	r4, r2
 8004e86:	461d      	mov	r5, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb45 0303 	adc.w	r3, r5, r3
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec0:	f7fb fd4c 	bl	800095c <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3750      	adds	r7, #80	; 0x50
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	0800a384 	.word	0x0800a384

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f4c:	f7ff ffdc 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0b5b      	lsrs	r3, r3, #13
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800a384 	.word	0x0800a384

08004f70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d035      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f98:	4b67      	ldr	r3, [pc, #412]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9e:	f7fd fb7d 	bl	800269c <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fa6:	f7fd fb79 	bl	800269c <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0ba      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb8:	4b60      	ldr	r3, [pc, #384]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f0      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	019a      	lsls	r2, r3, #6
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	071b      	lsls	r3, r3, #28
 8004fd0:	495a      	ldr	r1, [pc, #360]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fd8:	4b57      	ldr	r3, [pc, #348]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fd fb5d 	bl	800269c <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fe6:	f7fd fb59 	bl	800269c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e09a      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff8:	4b50      	ldr	r3, [pc, #320]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8083 	beq.w	8005118 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	4b49      	ldr	r3, [pc, #292]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a48      	ldr	r2, [pc, #288]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
 8005022:	4b46      	ldr	r3, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800502e:	4b44      	ldr	r3, [pc, #272]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a43      	ldr	r2, [pc, #268]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800503a:	f7fd fb2f 	bl	800269c <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005042:	f7fd fb2b 	bl	800269c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e06c      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005068:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02f      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	429a      	cmp	r2, r3
 800507c:	d028      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005086:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005088:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800508e:	4b2d      	ldr	r3, [pc, #180]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005094:	4a29      	ldr	r2, [pc, #164]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d114      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050a6:	f7fd faf9 	bl	800269c <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ae:	f7fd faf5 	bl	800269c <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	4293      	cmp	r3, r2
 80050be:	d901      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e034      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ee      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050dc:	d10d      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	4912      	ldr	r1, [pc, #72]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	4a0f      	ldr	r2, [pc, #60]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005100:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005104:	6093      	str	r3, [r2, #8]
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005112:	490a      	ldr	r1, [pc, #40]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7c1a      	ldrb	r2, [r3, #16]
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800512a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	42470068 	.word	0x42470068
 800513c:	40023800 	.word	0x40023800
 8005140:	40007000 	.word	0x40007000
 8005144:	42470e40 	.word	0x42470e40
 8005148:	424711e0 	.word	0x424711e0

0800514c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e073      	b.n	800524a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7f5b      	ldrb	r3, [r3, #29]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d105      	bne.n	8005178 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb ff7c 	bl	8001070 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	d055      	beq.n	8005238 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ca      	movs	r2, #202	; 0xca
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2253      	movs	r2, #83	; 0x53
 800519a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa49 	bl	8005634 <RTC_EnterInitMode>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d12c      	bne.n	8005206 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051be:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6919      	ldr	r1, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	041a      	lsls	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fa50 	bl	80056a2 <RTC_ExitInitMode>
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d110      	bne.n	800522e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
 8005236:	e001      	b.n	800523c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005252:	b590      	push	{r4, r7, lr}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	7f1b      	ldrb	r3, [r3, #28]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_RTC_SetTime+0x1c>
 800526a:	2302      	movs	r3, #2
 800526c:	e087      	b.n	800537e <HAL_RTC_SetTime+0x12c>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2202      	movs	r2, #2
 8005278:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d126      	bne.n	80052ce <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2200      	movs	r2, #0
 8005292:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa27 	bl	80056ec <RTC_ByteToBcd2>
 800529e:	4603      	mov	r3, r0
 80052a0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa20 	bl	80056ec <RTC_ByteToBcd2>
 80052ac:	4603      	mov	r3, r0
 80052ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052b0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	789b      	ldrb	r3, [r3, #2]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fa18 	bl	80056ec <RTC_ByteToBcd2>
 80052bc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	78db      	ldrb	r3, [r3, #3]
 80052c6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e018      	b.n	8005300 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052ee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80052f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	78db      	ldrb	r3, [r3, #3]
 80052fa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	22ca      	movs	r2, #202	; 0xca
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2253      	movs	r2, #83	; 0x53
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f98f 	bl	8005634 <RTC_EnterInitMode>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800531a:	7cfb      	ldrb	r3, [r7, #19]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d120      	bne.n	8005362 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800532a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800533e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f9a2 	bl	80056a2 <RTC_ExitInitMode>
 800535e:	4603      	mov	r3, r0
 8005360:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]

  return status;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
}
 800537e:	4618      	mov	r0, r3
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}

08005386 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	0d9b      	lsrs	r3, r3, #22
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d11a      	bne.n	8005438 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f98e 	bl	8005728 <RTC_Bcd2ToByte>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f985 	bl	8005728 <RTC_Bcd2ToByte>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f97c 	bl	8005728 <RTC_Bcd2ToByte>
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005442:	b590      	push	{r4, r7, lr}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	7f1b      	ldrb	r3, [r3, #28]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_RTC_SetDate+0x1c>
 800545a:	2302      	movs	r3, #2
 800545c:	e071      	b.n	8005542 <HAL_RTC_SetDate+0x100>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2202      	movs	r2, #2
 8005468:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10e      	bne.n	800548e <HAL_RTC_SetDate+0x4c>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	f023 0310 	bic.w	r3, r3, #16
 8005484:	b2db      	uxtb	r3, r3
 8005486:	330a      	adds	r3, #10
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11c      	bne.n	80054ce <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	78db      	ldrb	r3, [r3, #3]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f927 	bl	80056ec <RTC_ByteToBcd2>
 800549e:	4603      	mov	r3, r0
 80054a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f920 	bl	80056ec <RTC_ByteToBcd2>
 80054ac:	4603      	mov	r3, r0
 80054ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	789b      	ldrb	r3, [r3, #2]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f918 	bl	80056ec <RTC_ByteToBcd2>
 80054bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80054be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e00e      	b.n	80054ec <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	78db      	ldrb	r3, [r3, #3]
 80054d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80054e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	22ca      	movs	r2, #202	; 0xca
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2253      	movs	r2, #83	; 0x53
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f899 	bl	8005634 <RTC_EnterInitMode>
 8005502:	4603      	mov	r3, r0
 8005504:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005506:	7cfb      	ldrb	r3, [r7, #19]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10c      	bne.n	8005526 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800551a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f8c0 	bl	80056a2 <RTC_ExitInitMode>
 8005522:	4603      	mov	r3, r0
 8005524:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	22ff      	movs	r2, #255	; 0xff
 8005538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]

  return status;
 8005540:	7cfb      	ldrb	r3, [r7, #19]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005564:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005568:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	0b5b      	lsrs	r3, r3, #13
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11a      	bne.n	80055de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f8bb 	bl	8005728 <RTC_Bcd2ToByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	785b      	ldrb	r3, [r3, #1]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f8b2 	bl	8005728 <RTC_Bcd2ToByte>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	789b      	ldrb	r3, [r3, #2]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f8a9 	bl	8005728 <RTC_Bcd2ToByte>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a0d      	ldr	r2, [pc, #52]	; (8005630 <HAL_RTC_WaitForSynchro+0x48>)
 80055fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055fc:	f7fd f84e 	bl	800269c <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005602:	e009      	b.n	8005618 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005604:	f7fd f84a 	bl	800269c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005612:	d901      	bls.n	8005618 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e007      	b.n	8005628 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ee      	beq.n	8005604 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	00013f5f 	.word	0x00013f5f

08005634 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d122      	bne.n	8005698 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005660:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005662:	f7fd f81b 	bl	800269c <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005668:	e00c      	b.n	8005684 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800566a:	f7fd f817 	bl	800269c <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005678:	d904      	bls.n	8005684 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2204      	movs	r2, #4
 800567e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <RTC_EnterInitMode+0x64>
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d1e8      	bne.n	800566a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7ff ff8b 	bl	80055e8 <HAL_RTC_WaitForSynchro>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2204      	movs	r2, #4
 80056dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80056fa:	e005      	b.n	8005708 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	3b0a      	subs	r3, #10
 8005706:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b09      	cmp	r3, #9
 800570c:	d8f6      	bhi.n	80056fc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	b2da      	uxtb	r2, r3
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4313      	orrs	r3, r2
 800571a:	b2db      	uxtb	r3, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	b2db      	uxtb	r3, r3
 8005754:	4413      	add	r3, r2
 8005756:	b2db      	uxtb	r3, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb fc9c 	bl	80010c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fa9e 	bl	8005ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e044      	b.n	80058a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d013      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_TIM_Base_Start_IT+0xb8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d111      	bne.n	8005894 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d010      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	e007      	b.n	80058a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40014000 	.word	0x40014000

080058c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10f      	bne.n	8005910 <HAL_TIM_Base_Stop_IT+0x48>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	f240 4344 	movw	r3, #1092	; 0x444
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_Base_Stop_IT+0x48>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01b      	beq.n	800598a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0202 	mvn.w	r2, #2
 800595a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f999 	bl	8005ca8 <HAL_TIM_IC_CaptureCallback>
 8005976:	e005      	b.n	8005984 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f98b 	bl	8005c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f99c 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0204 	mvn.w	r2, #4
 80059a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f973 	bl	8005ca8 <HAL_TIM_IC_CaptureCallback>
 80059c2:	e005      	b.n	80059d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f965 	bl	8005c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f976 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d020      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01b      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0208 	mvn.w	r2, #8
 80059f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2204      	movs	r2, #4
 80059f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f94d 	bl	8005ca8 <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e005      	b.n	8005a1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f93f 	bl	8005c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f950 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f06f 0210 	mvn.w	r2, #16
 8005a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2208      	movs	r2, #8
 8005a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f927 	bl	8005ca8 <HAL_TIM_IC_CaptureCallback>
 8005a5a:	e005      	b.n	8005a68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f919 	bl	8005c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f92a 	bl	8005cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0201 	mvn.w	r2, #1
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 f903 	bl	8006c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fab5 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f8fb 	bl	8005cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0220 	mvn.w	r2, #32
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa87 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_ConfigClockSource+0x1c>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e0b4      	b.n	8005c8c <HAL_TIM_ConfigClockSource+0x186>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5a:	d03e      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0xd4>
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b60:	f200 8087 	bhi.w	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	f000 8086 	beq.w	8005c78 <HAL_TIM_ConfigClockSource+0x172>
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b70:	d87f      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b72:	2b70      	cmp	r3, #112	; 0x70
 8005b74:	d01a      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0xa6>
 8005b76:	2b70      	cmp	r3, #112	; 0x70
 8005b78:	d87b      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b7a:	2b60      	cmp	r3, #96	; 0x60
 8005b7c:	d050      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0x11a>
 8005b7e:	2b60      	cmp	r3, #96	; 0x60
 8005b80:	d877      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b82:	2b50      	cmp	r3, #80	; 0x50
 8005b84:	d03c      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xfa>
 8005b86:	2b50      	cmp	r3, #80	; 0x50
 8005b88:	d873      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d058      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x13a>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d86f      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b92:	2b30      	cmp	r3, #48	; 0x30
 8005b94:	d064      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x15a>
 8005b96:	2b30      	cmp	r3, #48	; 0x30
 8005b98:	d86b      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d060      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x15a>
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d867      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d05c      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d05a      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x15a>
 8005baa:	e062      	b.n	8005c72 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bbc:	f000 f998 	bl	8005ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]
      break;
 8005bd8:	e04f      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bea:	f000 f981 	bl	8005ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bfc:	609a      	str	r2, [r3, #8]
      break;
 8005bfe:	e03c      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f000 f8f5 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2150      	movs	r1, #80	; 0x50
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f94e 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e02c      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f000 f914 	bl	8005e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2160      	movs	r1, #96	; 0x60
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f93e 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e01c      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f000 f8d5 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2140      	movs	r1, #64	; 0x40
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f92e 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c5e:	e00c      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 f925 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c70:	e003      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      break;
 8005c76:	e000      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3a      	ldr	r2, [pc, #232]	; (8005de0 <TIM_Base_SetConfig+0xfc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00f      	beq.n	8005d1c <TIM_Base_SetConfig+0x38>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d02:	d00b      	beq.n	8005d1c <TIM_Base_SetConfig+0x38>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a37      	ldr	r2, [pc, #220]	; (8005de4 <TIM_Base_SetConfig+0x100>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_Base_SetConfig+0x38>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a36      	ldr	r2, [pc, #216]	; (8005de8 <TIM_Base_SetConfig+0x104>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_Base_SetConfig+0x38>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a35      	ldr	r2, [pc, #212]	; (8005dec <TIM_Base_SetConfig+0x108>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d108      	bne.n	8005d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2b      	ldr	r2, [pc, #172]	; (8005de0 <TIM_Base_SetConfig+0xfc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_Base_SetConfig+0x100>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <TIM_Base_SetConfig+0x104>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <TIM_Base_SetConfig+0x108>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <TIM_Base_SetConfig+0x10c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <TIM_Base_SetConfig+0x110>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <TIM_Base_SetConfig+0x114>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <TIM_Base_SetConfig+0xfc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d103      	bne.n	8005db4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f023 0201 	bic.w	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]
  }
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f023 0210 	bic.w	r2, r3, #16
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e050      	b.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d013      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40014000 	.word	0x40014000

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e042      	b.n	80060cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f83a 	bl	80060d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fb8d 	bl	8006798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b20      	cmp	r3, #32
 8006106:	d175      	bne.n	80061f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_UART_Transmit+0x2c>
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e06e      	b.n	80061f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2221      	movs	r2, #33	; 0x21
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006126:	f7fc fab9 	bl	800269c <HAL_GetTick>
 800612a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006140:	d108      	bne.n	8006154 <HAL_UART_Transmit+0x6c>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	e003      	b.n	800615c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800615c:	e02e      	b.n	80061bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2200      	movs	r2, #0
 8006166:	2180      	movs	r1, #128	; 0x80
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f995 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e03a      	b.n	80061f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	3302      	adds	r3, #2
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e007      	b.n	80061ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1cb      	bne.n	800615e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	2140      	movs	r1, #64	; 0x40
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f961 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e006      	b.n	80061f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061f4:	2302      	movs	r3, #2
  }
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b20      	cmp	r3, #32
 8006216:	d112      	bne.n	800623e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_UART_Receive_DMA+0x26>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e00b      	b.n	8006240 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	461a      	mov	r2, r3
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 f989 	bl	800654c <UART_Start_Receive_DMA>
 800623a:	4603      	mov	r3, r0
 800623c:	e000      	b.n	8006240 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b09c      	sub	sp, #112	; 0x70
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d172      	bne.n	800639e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80062b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ba:	2200      	movs	r2, #0
 80062bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062de:	65ba      	str	r2, [r7, #88]	; 0x58
 80062e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e5      	bne.n	80062be <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006312:	647a      	str	r2, [r7, #68]	; 0x44
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	623b      	str	r3, [r7, #32]
   return(result);
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	663b      	str	r3, [r7, #96]	; 0x60
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006346:	633a      	str	r2, [r7, #48]	; 0x30
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800635a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	2b01      	cmp	r3, #1
 8006368:	d119      	bne.n	800639e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	60fb      	str	r3, [r7, #12]
   return(result);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0310 	bic.w	r3, r3, #16
 8006380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800638a:	61fa      	str	r2, [r7, #28]
 800638c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	69b9      	ldr	r1, [r7, #24]
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	617b      	str	r3, [r7, #20]
   return(result);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a0:	2200      	movs	r2, #0
 80063a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d106      	bne.n	80063ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b0:	4619      	mov	r1, r3
 80063b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063b4:	f7ff ff66 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b8:	e002      	b.n	80063c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80063ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80063bc:	f7ff ff44 	bl	8006248 <HAL_UART_RxCpltCallback>
}
 80063c0:	bf00      	nop
 80063c2:	3770      	adds	r7, #112	; 0x70
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d108      	bne.n	80063f6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4619      	mov	r1, r3
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff ff48 	bl	8006284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063f4:	e002      	b.n	80063fc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff30 	bl	800625c <HAL_UART_RxHalfCpltCallback>
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b21      	cmp	r3, #33	; 0x21
 8006436:	d108      	bne.n	800644a <UART_DMAError+0x46>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006444:	68b8      	ldr	r0, [r7, #8]
 8006446:	f000 f91b 	bl	8006680 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b22      	cmp	r3, #34	; 0x22
 800646a:	d108      	bne.n	800647e <UART_DMAError+0x7a>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006478:	68b8      	ldr	r0, [r7, #8]
 800647a:	f000 f929 	bl	80066d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	f043 0210 	orr.w	r2, r3, #16
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648a:	68b8      	ldr	r0, [r7, #8]
 800648c:	f7ff fef0 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a8:	e03b      	b.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d037      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b2:	f7fc f8f3 	bl	800269c <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e03a      	b.n	8006542 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d023      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b80      	cmp	r3, #128	; 0x80
 80064de:	d020      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d01d      	beq.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d116      	bne.n	8006522 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f8e0 	bl	80066d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2208      	movs	r2, #8
 8006514:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e00f      	b.n	8006542 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	429a      	cmp	r2, r3
 800653e:	d0b4      	beq.n	80064aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b098      	sub	sp, #96	; 0x60
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2222      	movs	r2, #34	; 0x22
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <UART_Start_Receive_DMA+0x128>)
 800657a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	4a3d      	ldr	r2, [pc, #244]	; (8006678 <UART_Start_Receive_DMA+0x12c>)
 8006582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006588:	4a3c      	ldr	r2, [pc, #240]	; (800667c <UART_Start_Receive_DMA+0x130>)
 800658a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	2200      	movs	r2, #0
 8006592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	f7fc fa82 	bl	8002ab4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d019      	beq.n	8006602 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80065f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80065fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	657b      	str	r3, [r7, #84]	; 0x54
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006622:	63ba      	str	r2, [r7, #56]	; 0x38
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	617b      	str	r3, [r7, #20]
   return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006656:	627a      	str	r2, [r7, #36]	; 0x24
 8006658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6a39      	ldr	r1, [r7, #32]
 800665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	61fb      	str	r3, [r7, #28]
   return(result);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3760      	adds	r7, #96	; 0x60
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	0800629d 	.word	0x0800629d
 8006678:	080063c9 	.word	0x080063c9
 800667c:	08006405 	.word	0x08006405

08006680 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b089      	sub	sp, #36	; 0x24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	60bb      	str	r3, [r7, #8]
   return(result);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800669e:	61fb      	str	r3, [r7, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	61ba      	str	r2, [r7, #24]
 80066aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	613b      	str	r3, [r7, #16]
   return(result);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80066c4:	bf00      	nop
 80066c6:	3724      	adds	r7, #36	; 0x24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b095      	sub	sp, #84	; 0x54
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066f8:	643a      	str	r2, [r7, #64]	; 0x40
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	61fb      	str	r3, [r7, #28]
   return(result);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	64bb      	str	r3, [r7, #72]	; 0x48
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3314      	adds	r3, #20
 800672a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800672c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	2b01      	cmp	r3, #1
 8006746:	d119      	bne.n	800677c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	60bb      	str	r3, [r7, #8]
   return(result);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f023 0310 	bic.w	r3, r3, #16
 800675e:	647b      	str	r3, [r7, #68]	; 0x44
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006768:	61ba      	str	r2, [r7, #24]
 800676a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6979      	ldr	r1, [r7, #20]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	613b      	str	r3, [r7, #16]
   return(result);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
}
 800678a:	bf00      	nop
 800678c:	3754      	adds	r7, #84	; 0x54
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b0c0      	sub	sp, #256	; 0x100
 800679e:	af00      	add	r7, sp, #0
 80067a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	ea40 0301 	orr.w	r3, r0, r1
 80067c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f0:	f021 010c 	bic.w	r1, r1, #12
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067fe:	430b      	orrs	r3, r1
 8006800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006812:	6999      	ldr	r1, [r3, #24]
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	ea40 0301 	orr.w	r3, r0, r1
 800681e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b8f      	ldr	r3, [pc, #572]	; (8006a64 <UART_SetConfig+0x2cc>)
 8006828:	429a      	cmp	r2, r3
 800682a:	d005      	beq.n	8006838 <UART_SetConfig+0xa0>
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b8d      	ldr	r3, [pc, #564]	; (8006a68 <UART_SetConfig+0x2d0>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d104      	bne.n	8006842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe fb86 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 800683c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006840:	e003      	b.n	800684a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006842:	f7fe fb6d 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8006846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006854:	f040 810c 	bne.w	8006a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685c:	2200      	movs	r2, #0
 800685e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	1891      	adds	r1, r2, r2
 8006870:	65b9      	str	r1, [r7, #88]	; 0x58
 8006872:	415b      	adcs	r3, r3
 8006874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800687a:	4621      	mov	r1, r4
 800687c:	eb12 0801 	adds.w	r8, r2, r1
 8006880:	4629      	mov	r1, r5
 8006882:	eb43 0901 	adc.w	r9, r3, r1
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689a:	4690      	mov	r8, r2
 800689c:	4699      	mov	r9, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	eb18 0303 	adds.w	r3, r8, r3
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb49 0303 	adc.w	r3, r9, r3
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068c6:	460b      	mov	r3, r1
 80068c8:	18db      	adds	r3, r3, r3
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	4613      	mov	r3, r2
 80068ce:	eb42 0303 	adc.w	r3, r2, r3
 80068d2:	657b      	str	r3, [r7, #84]	; 0x54
 80068d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068dc:	f7fa f83e 	bl	800095c <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4b61      	ldr	r3, [pc, #388]	; (8006a6c <UART_SetConfig+0x2d4>)
 80068e6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	011c      	lsls	r4, r3, #4
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	64b9      	str	r1, [r7, #72]	; 0x48
 8006908:	415b      	adcs	r3, r3
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006910:	4641      	mov	r1, r8
 8006912:	eb12 0a01 	adds.w	sl, r2, r1
 8006916:	4649      	mov	r1, r9
 8006918:	eb43 0b01 	adc.w	fp, r3, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800692c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006930:	4692      	mov	sl, r2
 8006932:	469b      	mov	fp, r3
 8006934:	4643      	mov	r3, r8
 8006936:	eb1a 0303 	adds.w	r3, sl, r3
 800693a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800693e:	464b      	mov	r3, r9
 8006940:	eb4b 0303 	adc.w	r3, fp, r3
 8006944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800695c:	460b      	mov	r3, r1
 800695e:	18db      	adds	r3, r3, r3
 8006960:	643b      	str	r3, [r7, #64]	; 0x40
 8006962:	4613      	mov	r3, r2
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
 800696a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800696e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006972:	f7f9 fff3 	bl	800095c <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4611      	mov	r1, r2
 800697c:	4b3b      	ldr	r3, [pc, #236]	; (8006a6c <UART_SetConfig+0x2d4>)
 800697e:	fba3 2301 	umull	r2, r3, r3, r1
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2264      	movs	r2, #100	; 0x64
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	1acb      	subs	r3, r1, r3
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006992:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006994:	fba3 2302 	umull	r2, r3, r3, r2
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a0:	441c      	add	r4, r3
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	1891      	adds	r1, r2, r2
 80069ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80069bc:	415b      	adcs	r3, r3
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069c4:	4641      	mov	r1, r8
 80069c6:	1851      	adds	r1, r2, r1
 80069c8:	6339      	str	r1, [r7, #48]	; 0x30
 80069ca:	4649      	mov	r1, r9
 80069cc:	414b      	adcs	r3, r1
 80069ce:	637b      	str	r3, [r7, #52]	; 0x34
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069dc:	4659      	mov	r1, fp
 80069de:	00cb      	lsls	r3, r1, #3
 80069e0:	4651      	mov	r1, sl
 80069e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e6:	4651      	mov	r1, sl
 80069e8:	00ca      	lsls	r2, r1, #3
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	4642      	mov	r2, r8
 80069f2:	189b      	adds	r3, r3, r2
 80069f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f8:	464b      	mov	r3, r9
 80069fa:	460a      	mov	r2, r1
 80069fc:	eb42 0303 	adc.w	r3, r2, r3
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a18:	460b      	mov	r3, r1
 8006a1a:	18db      	adds	r3, r3, r3
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1e:	4613      	mov	r3, r2
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a2e:	f7f9 ff95 	bl	800095c <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <UART_SetConfig+0x2d4>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 0207 	and.w	r2, r3, #7
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4422      	add	r2, r4
 8006a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a60:	e106      	b.n	8006c70 <UART_SetConfig+0x4d8>
 8006a62:	bf00      	nop
 8006a64:	40011000 	.word	0x40011000
 8006a68:	40011400 	.word	0x40011400
 8006a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a82:	4642      	mov	r2, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	6239      	str	r1, [r7, #32]
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a92:	4641      	mov	r1, r8
 8006a94:	1854      	adds	r4, r2, r1
 8006a96:	4649      	mov	r1, r9
 8006a98:	eb43 0501 	adc.w	r5, r3, r1
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	00eb      	lsls	r3, r5, #3
 8006aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aaa:	00e2      	lsls	r2, r4, #3
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ab8:	464b      	mov	r3, r9
 8006aba:	eb45 0303 	adc.w	r3, r5, r3
 8006abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ade:	4629      	mov	r1, r5
 8006ae0:	008b      	lsls	r3, r1, #2
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae8:	4621      	mov	r1, r4
 8006aea:	008a      	lsls	r2, r1, #2
 8006aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006af0:	f7f9 ff34 	bl	800095c <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b60      	ldr	r3, [pc, #384]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	61b9      	str	r1, [r7, #24]
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b24:	4641      	mov	r1, r8
 8006b26:	1851      	adds	r1, r2, r1
 8006b28:	6139      	str	r1, [r7, #16]
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	414b      	adcs	r3, r1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	00cb      	lsls	r3, r1, #3
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b46:	4651      	mov	r1, sl
 8006b48:	00ca      	lsls	r2, r1, #3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4642      	mov	r2, r8
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b58:	464b      	mov	r3, r9
 8006b5a:	460a      	mov	r2, r1
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	008b      	lsls	r3, r1, #2
 8006b80:	4641      	mov	r1, r8
 8006b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b86:	4641      	mov	r1, r8
 8006b88:	008a      	lsls	r2, r1, #2
 8006b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b8e:	f7f9 fee5 	bl	800095c <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	4b38      	ldr	r3, [pc, #224]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	2264      	movs	r2, #100	; 0x64
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	1acb      	subs	r3, r1, r3
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	3332      	adds	r3, #50	; 0x32
 8006bac:	4a33      	ldr	r2, [pc, #204]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb8:	441c      	add	r4, r3
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8006bc2:	677a      	str	r2, [r7, #116]	; 0x74
 8006bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	460a      	mov	r2, r1
 8006c0e:	eb42 0303 	adc.w	r3, r2, r3
 8006c12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c1e:	667a      	str	r2, [r7, #100]	; 0x64
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	008b      	lsls	r3, r1, #2
 8006c30:	4641      	mov	r1, r8
 8006c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c36:	4641      	mov	r1, r8
 8006c38:	008a      	lsls	r2, r1, #2
 8006c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c3e:	f7f9 fe8d 	bl	800095c <__aeabi_uldivmod>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006c48:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	2164      	movs	r1, #100	; 0x64
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	3332      	adds	r3, #50	; 0x32
 8006c5a:	4a08      	ldr	r2, [pc, #32]	; (8006c7c <UART_SetConfig+0x4e4>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4422      	add	r2, r4
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c76:	46bd      	mov	sp, r7
 8006c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7c:	51eb851f 	.word	0x51eb851f

08006c80 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_PresenceDetection_Init();
 8006c84:	f000 f820 	bl	8006cc8 <MX_PresenceDetection_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_PresenceDetection_Process();
 8006c90:	f000 f85c 	bl	8006d4c <MX_PresenceDetection_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8006c94:	bf00      	nop
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *              the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d102      	bne.n	8006cb2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	20000118 	.word	0x20000118
 8006cc4:	2000029c 	.word	0x2000029c

08006cc8 <MX_PresenceDetection_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_PresenceDetection_Init(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f7fb fb1d 	bl	800230c <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	f7fb fb9a 	bl	800240c <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8006cd8:	f7fa f8b2 	bl	8000e40 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8006cdc:	201e      	movs	r0, #30
 8006cde:	f000 f9b3 	bl	8007048 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8006ce2:	f000 f89f 	bl	8006e24 <Init_Sensors>

  Odr = (uint8_t)TEMP_ODR;
 8006ce6:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <MX_PresenceDetection_Init+0x68>)
 8006ce8:	221e      	movs	r2, #30
 8006cea:	701a      	strb	r2, [r3, #0]
  BSP_SENSOR_TEMP_GetAvgTmos(&AvgTmos);
 8006cec:	4811      	ldr	r0, [pc, #68]	; (8006d34 <MX_PresenceDetection_Init+0x6c>)
 8006cee:	f001 f8c7 	bl	8007e80 <BSP_SENSOR_TEMP_GetAvgTmos>
  BSP_SENSOR_TEMP_GetAvgT(&AvgT);
 8006cf2:	4811      	ldr	r0, [pc, #68]	; (8006d38 <MX_PresenceDetection_Init+0x70>)
 8006cf4:	f001 f8de 	bl	8007eb4 <BSP_SENSOR_TEMP_GetAvgT>
  BSP_SENSOR_TEMP_GetGainFactor(&GainFactor);
 8006cf8:	4810      	ldr	r0, [pc, #64]	; (8006d3c <MX_PresenceDetection_Init+0x74>)
 8006cfa:	f001 f8e7 	bl	8007ecc <BSP_SENSOR_TEMP_GetGainFactor>
  BSP_SENSOR_TEMP_GetSensitivity(&Sensitivity);
 8006cfe:	4810      	ldr	r0, [pc, #64]	; (8006d40 <MX_PresenceDetection_Init+0x78>)
 8006d00:	f001 f8f0 	bl	8007ee4 <BSP_SENSOR_TEMP_GetSensitivity>

  /* PresenceDetection API initialization function */
  InfraredPD_manager_init();
 8006d04:	f001 fd2c 	bl	8008760 <InfraredPD_manager_init>

  /* OPTIONAL */
  /* Get library version */
  InfraredPD_manager_get_version(LibVersion, &LibVersionLen);
 8006d08:	490e      	ldr	r1, [pc, #56]	; (8006d44 <MX_PresenceDetection_Init+0x7c>)
 8006d0a:	480f      	ldr	r0, [pc, #60]	; (8006d48 <MX_PresenceDetection_Init+0x80>)
 8006d0c:	f001 fd76 	bl	80087fc <InfraredPD_manager_get_version>

  DWT_Init();
 8006d10:	f000 f9ce 	bl	80070b0 <DWT_Init>

  BSP_LED_On(LED2);
 8006d14:	2000      	movs	r0, #0
 8006d16:	f7fb fb0b 	bl	8002330 <BSP_LED_On>
  HAL_Delay(500);
 8006d1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d1e:	f7fb fcc9 	bl	80026b4 <HAL_Delay>
  BSP_LED_Off(LED2);
 8006d22:	2000      	movs	r0, #0
 8006d24:	f7fb fb1a 	bl	800235c <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8006d28:	f000 fae6 	bl	80072f8 <UART_StartReceiveMsg>
}
 8006d2c:	bf00      	nop
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2000044c 	.word	0x2000044c
 8006d34:	2000044e 	.word	0x2000044e
 8006d38:	20000450 	.word	0x20000450
 8006d3c:	20000451 	.word	0x20000451
 8006d40:	20000452 	.word	0x20000452
 8006d44:	20000298 	.word	0x20000298
 8006d48:	20000274 	.word	0x20000274

08006d4c <MX_PresenceDetection_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_PresenceDetection_Process(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8006d50:	482d      	ldr	r0, [pc, #180]	; (8006e08 <MX_PresenceDetection_Process+0xbc>)
 8006d52:	f000 f9ff 	bl	8007154 <UART_ReceivedMSG>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d106      	bne.n	8006d6a <MX_PresenceDetection_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <MX_PresenceDetection_Process+0xbc>)
 8006d5e:	791b      	ldrb	r3, [r3, #4]
 8006d60:	2b32      	cmp	r3, #50	; 0x32
 8006d62:	d102      	bne.n	8006d6a <MX_PresenceDetection_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8006d64:	4828      	ldr	r0, [pc, #160]	; (8006e08 <MX_PresenceDetection_Process+0xbc>)
 8006d66:	f001 f8fb 	bl	8007f60 <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 8006d6a:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <MX_PresenceDetection_Process+0xc0>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d146      	bne.n	8006e02 <MX_PresenceDetection_Process+0xb6>
  {
    SensorReadRequest = 0;
 8006d74:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <MX_PresenceDetection_Process+0xc0>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 8006d7a:	4825      	ldr	r0, [pc, #148]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006d7c:	f000 f86a 	bl	8006e54 <RTC_Handler>
    Infrared_Sensor_Handler(&msg_dat);
 8006d80:	4823      	ldr	r0, [pc, #140]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006d82:	f000 f933 	bl	8006fec <Infrared_Sensor_Handler>

    if (DiscardSamples < 1U)
 8006d86:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <MX_PresenceDetection_Process+0xc8>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <MX_PresenceDetection_Process+0x48>
    {
      /* PresenceDetection specific part */
      PD_Data_Handler(&msg_dat);
 8006d8e:	4820      	ldr	r0, [pc, #128]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006d90:	f000 f8d4 	bl	8006f3c <PD_Data_Handler>
    }

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 8006d94:	481e      	ldr	r0, [pc, #120]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006d96:	f001 f8c9 	bl	8007f2c <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 8006d9a:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006d9c:	221d      	movs	r2, #29
 8006d9e:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 8006da0:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <MX_PresenceDetection_Process+0xcc>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d11e      	bne.n	8006de6 <MX_PresenceDetection_Process+0x9a>
    {
      OfflineDataCount--;
 8006da8:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <MX_PresenceDetection_Process+0xd0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <MX_PresenceDetection_Process+0xd0>)
 8006db0:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 8006db2:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <MX_PresenceDetection_Process+0xd0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da02      	bge.n	8006dc0 <MX_PresenceDetection_Process+0x74>
      {
        OfflineDataCount = 0;
 8006dba:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <MX_PresenceDetection_Process+0xd0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <MX_PresenceDetection_Process+0xd4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	4a16      	ldr	r2, [pc, #88]	; (8006e20 <MX_PresenceDetection_Process+0xd4>)
 8006dc8:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <MX_PresenceDetection_Process+0xd4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b07      	cmp	r3, #7
 8006dd0:	dd02      	ble.n	8006dd8 <MX_PresenceDetection_Process+0x8c>
      {
        OfflineDataReadIndex = 0;
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <MX_PresenceDetection_Process+0xd4>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <MX_PresenceDetection_Process+0xd0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dd02      	ble.n	8006de6 <MX_PresenceDetection_Process+0x9a>
      {
        SensorReadRequest = 1;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <MX_PresenceDetection_Process+0xc0>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (DiscardSamples > 0U)
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <MX_PresenceDetection_Process+0xc8>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <MX_PresenceDetection_Process+0xb0>
    {
      DiscardSamples--;
 8006dee:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <MX_PresenceDetection_Process+0xc8>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <MX_PresenceDetection_Process+0xc8>)
 8006df8:	701a      	strb	r2, [r3, #0]
    else
    {
      UART_SendMsg(&msg_dat);
    }
  }
}
 8006dfa:	e002      	b.n	8006e02 <MX_PresenceDetection_Process+0xb6>
      UART_SendMsg(&msg_dat);
 8006dfc:	4804      	ldr	r0, [pc, #16]	; (8006e10 <MX_PresenceDetection_Process+0xc4>)
 8006dfe:	f000 fa5f 	bl	80072c0 <UART_SendMsg>
}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	2000045c 	.word	0x2000045c
 8006e0c:	2000029c 	.word	0x2000029c
 8006e10:	20000560 	.word	0x20000560
 8006e14:	20000454 	.word	0x20000454
 8006e18:	2000029d 	.word	0x2000029d
 8006e1c:	20000448 	.word	0x20000448
 8006e20:	20000440 	.word	0x20000440

08006e24 <Init_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Init_Sensors(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8006e28:	f000 ff82 	bl	8007d30 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8006e2c:	f000 ff87 	bl	8007d3e <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8006e30:	f000 ff8c 	bl	8007d4c <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8006e34:	f000 ff91 	bl	8007d5a <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8006e38:	f000 ff96 	bl	8007d68 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8006e3c:	f000 ff9c 	bl	8007d78 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_TEMP_SetAvgTmos(AVG_TMOS);
 8006e40:	2020      	movs	r0, #32
 8006e42:	f001 f829 	bl	8007e98 <BSP_SENSOR_TEMP_SetAvgTmos>
  BSP_SENSOR_TEMP_SetOutputDataRate(TEMP_ODR);
 8006e46:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8006e4a:	f000 fff2 	bl	8007e32 <BSP_SENSOR_TEMP_SetOutputDataRate>
}
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <RTC_Handler>:
  * @brief  Handles the time+date getting/sending
  * @param  Msg the time+date part of the stream
  * @retval None
  */
static void RTC_Handler(TMsg *Msg)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08c      	sub	sp, #48	; 0x30
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8006e62:	4b32      	ldr	r3, [pc, #200]	; (8006f2c <RTC_Handler+0xd8>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 8006e68:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <RTC_Handler+0xdc>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d12b      	bne.n	8006ec8 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8006e70:	4b30      	ldr	r3, [pc, #192]	; (8006f34 <RTC_Handler+0xe0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a30      	ldr	r2, [pc, #192]	; (8006f38 <RTC_Handler+0xe4>)
 8006e76:	2134      	movs	r1, #52	; 0x34
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	781a      	ldrb	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8006e84:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <RTC_Handler+0xe0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a2b      	ldr	r2, [pc, #172]	; (8006f38 <RTC_Handler+0xe4>)
 8006e8a:	2134      	movs	r1, #52	; 0x34
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	4413      	add	r3, r2
 8006e92:	3301      	adds	r3, #1
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 8006e9a:	4b26      	ldr	r3, [pc, #152]	; (8006f34 <RTC_Handler+0xe0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <RTC_Handler+0xe4>)
 8006ea0:	2134      	movs	r1, #52	; 0x34
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 8006eb0:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <RTC_Handler+0xe0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <RTC_Handler+0xe4>)
 8006eb6:	2134      	movs	r1, #52	; 0x34
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	3303      	adds	r3, #3
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 8006ec6:	e02d      	b.n	8006f24 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 8006ec8:	f107 0308 	add.w	r3, r7, #8
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4816      	ldr	r0, [pc, #88]	; (8006f2c <RTC_Handler+0xd8>)
 8006ed2:	f7fe fa58 	bl	8005386 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 8006ed6:	f107 031c 	add.w	r3, r7, #28
 8006eda:	2200      	movs	r2, #0
 8006edc:	4619      	mov	r1, r3
 8006ede:	4813      	ldr	r0, [pc, #76]	; (8006f2c <RTC_Handler+0xd8>)
 8006ee0:	f7fe fb33 	bl	800554a <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2264      	movs	r2, #100	; 0x64
 8006eec:	fb02 f303 	mul.w	r3, r2, r3
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 8006f0a:	7a3a      	ldrb	r2, [r7, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8006f10:	7a7a      	ldrb	r2, [r7, #9]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 8006f16:	7aba      	ldrb	r2, [r7, #10]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f22:	729a      	strb	r2, [r3, #10]
}
 8006f24:	bf00      	nop
 8006f26:	3730      	adds	r7, #48	; 0x30
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200000f8 	.word	0x200000f8
 8006f30:	2000029d 	.word	0x2000029d
 8006f34:	20000440 	.word	0x20000440
 8006f38:	200002a0 	.word	0x200002a0

08006f3c <PD_Data_Handler>:
  * @brief  Presence Detection data handler
  * @param  Msg the Presence Detection data part of the stream
  * @retval None
  */
static void PD_Data_Handler(TMsg *Msg)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
  IPD_input_t data_in = {.t_amb = 0, .t_obj = 0};
 8006f48:	2300      	movs	r3, #0
 8006f4a:	813b      	strh	r3, [r7, #8]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	817b      	strh	r3, [r7, #10]
  static IPD_output_t data_out;

  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8006f50:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <PD_Data_Handler+0xa0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d13b      	bne.n	8006fd4 <PD_Data_Handler+0x98>
  {
    /* Fill input data */
    data_in.t_amb = TAmbRaw;
 8006f5c:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <PD_Data_Handler+0xa4>)
 8006f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f62:	813b      	strh	r3, [r7, #8]
    data_in.t_obj = TObjRaw;
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <PD_Data_Handler+0xa8>)
 8006f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f6a:	817b      	strh	r3, [r7, #10]

    /* Run Presence Detection algorithm */
    BSP_LED_On(LED2);
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f7fb f9df 	bl	8002330 <BSP_LED_On>
    DWT_Start();
 8006f72:	f000 f8b5 	bl	80070e0 <DWT_Start>
    InfraredPD_manager_run(&data_in, &data_out);
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	491b      	ldr	r1, [pc, #108]	; (8006fe8 <PD_Data_Handler+0xac>)
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 fc2b 	bl	80087d8 <InfraredPD_manager_run>
    elapsed_time_us = DWT_Stop();
 8006f82:	f000 f8bf 	bl	8007104 <DWT_Stop>
 8006f86:	60f8      	str	r0, [r7, #12]
    BSP_LED_Off(LED2);
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f7fb f9e7 	bl	800235c <BSP_LED_Off>

    Serialize_s32(&Msg->Data[15], (int32_t)data_out.t_obj_comp, 4);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3313      	adds	r3, #19
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <PD_Data_Handler+0xac>)
 8006f94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fd37 	bl	8008a10 <Serialize_s32>
    Serialize_s32(&Msg->Data[19], (int32_t)data_out.t_obj_change, 4);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3317      	adds	r3, #23
 8006fa6:	4a10      	ldr	r2, [pc, #64]	; (8006fe8 <PD_Data_Handler+0xac>)
 8006fa8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8006fac:	4611      	mov	r1, r2
 8006fae:	2204      	movs	r2, #4
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fd2d 	bl	8008a10 <Serialize_s32>
    Msg->Data[23] = (uint8_t)data_out.mot_flag;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <PD_Data_Handler+0xac>)
 8006fb8:	791a      	ldrb	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	76da      	strb	r2, [r3, #27]
    Msg->Data[24] = (uint8_t)data_out.pres_flag;
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <PD_Data_Handler+0xac>)
 8006fc0:	795a      	ldrb	r2, [r3, #5]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	771a      	strb	r2, [r3, #28]

    Serialize_s32(&Msg->Data[25], (int32_t)elapsed_time_us, 4);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	331d      	adds	r3, #29
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fd1e 	bl	8008a10 <Serialize_s32>
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000270 	.word	0x20000270
 8006fe0:	20000456 	.word	0x20000456
 8006fe4:	20000458 	.word	0x20000458
 8006fe8:	20000664 	.word	0x20000664

08006fec <Infrared_Sensor_Handler>:
  * @brief  Handles the Infrared data getting/sending
  * @param  Msg the IR part of the stream
  * @retval None
  */
static void Infrared_Sensor_Handler(TMsg *Msg)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <Infrared_Sensor_Handler+0x50>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d119      	bne.n	8007034 <Infrared_Sensor_Handler+0x48>
  {
    BSP_SENSOR_TEMP_GetTAmbRaw(&TAmbRaw);
 8007000:	480f      	ldr	r0, [pc, #60]	; (8007040 <Infrared_Sensor_Handler+0x54>)
 8007002:	f000 ff25 	bl	8007e50 <BSP_SENSOR_TEMP_GetTAmbRaw>
    BSP_SENSOR_TEMP_GetTObjRaw(&TObjRaw);
 8007006:	480f      	ldr	r0, [pc, #60]	; (8007044 <Infrared_Sensor_Handler+0x58>)
 8007008:	f000 ff2e 	bl	8007e68 <BSP_SENSOR_TEMP_GetTObjRaw>

    Serialize_s32(&Msg->Data[7], (int32_t)TAmbRaw, 4);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	330b      	adds	r3, #11
 8007010:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <Infrared_Sensor_Handler+0x54>)
 8007012:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007016:	4611      	mov	r1, r2
 8007018:	2204      	movs	r2, #4
 800701a:	4618      	mov	r0, r3
 800701c:	f001 fcf8 	bl	8008a10 <Serialize_s32>
    Serialize_s32(&Msg->Data[11], (int32_t)TObjRaw, 4);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	330f      	adds	r3, #15
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <Infrared_Sensor_Handler+0x58>)
 8007026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800702a:	4611      	mov	r1, r2
 800702c:	2204      	movs	r2, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f001 fcee 	bl	8008a10 <Serialize_s32>
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000270 	.word	0x20000270
 8007040:	20000456 	.word	0x20000456
 8007044:	20000458 	.word	0x20000458

08007048 <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8007050:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007054:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <TIM_Config+0x60>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8007070:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <TIM_Config+0x64>)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <TIM_Config+0x64>)
 8007078:	2200      	movs	r2, #0
 800707a:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800707c:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <TIM_Config+0x64>)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <TIM_Config+0x64>)
 8007084:	2200      	movs	r2, #0
 8007086:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <TIM_Config+0x64>)
 800708a:	2200      	movs	r2, #0
 800708c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800708e:	4807      	ldr	r0, [pc, #28]	; (80070ac <TIM_Config+0x64>)
 8007090:	f7fe fb68 	bl	8005764 <HAL_TIM_Base_Init>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <TIM_Config+0x56>
  {
    Error_Handler();
 800709a:	f7f9 ff99 	bl	8000fd0 <Error_Handler>
  }
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000000 	.word	0x20000000
 80070ac:	20000118 	.word	0x20000118

080070b0 <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80070b4:	4b08      	ldr	r3, [pc, #32]	; (80070d8 <DWT_Init+0x28>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4a07      	ldr	r2, [pc, #28]	; (80070d8 <DWT_Init+0x28>)
 80070ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070be:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <DWT_Init+0x2c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a05      	ldr	r2, [pc, #20]	; (80070dc <DWT_Init+0x2c>)
 80070c6:	f023 0301 	bic.w	r3, r3, #1
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000edf0 	.word	0xe000edf0
 80070dc:	e0001000 	.word	0xe0001000

080070e0 <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <DWT_Start+0x20>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <DWT_Start+0x20>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a04      	ldr	r2, [pc, #16]	; (8007100 <DWT_Start+0x20>)
 80070f0:	f043 0301 	orr.w	r3, r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e0001000 	.word	0xe0001000

08007104 <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <DWT_Stop+0x44>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <DWT_Stop+0x44>)
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <DWT_Stop+0x44>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <DWT_Stop+0x48>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a09      	ldr	r2, [pc, #36]	; (8007150 <DWT_Stop+0x4c>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	0c9b      	lsrs	r3, r3, #18
 8007130:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e0001000 	.word	0xe0001000
 800714c:	20000000 	.word	0x20000000
 8007150:	431bde83 	.word	0x431bde83

08007154 <UART_ReceivedMSG>:
  * @brief  Check if a message is received via UART
  * @param  Msg the pointer to the message to be received
  * @retval 1 if a complete message is found, 0 otherwise
  */
int UART_ReceivedMSG(TMsg *Msg)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8007160:	4b54      	ldr	r3, [pc, #336]	; (80072b4 <UART_ReceivedMSG+0x160>)
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f8df 	bl	8007328 <Get_DMA_Flag_Status>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 809c 	bne.w	80072aa <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8007172:	4b50      	ldr	r3, [pc, #320]	; (80072b4 <UART_ReceivedMSG+0x160>)
 8007174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fab8 	bl	80076ec <Get_DMA_Counter>
 800717c:	4603      	mov	r3, r0
 800717e:	b29b      	uxth	r3, r3
 8007180:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007184:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 8007186:	4b4c      	ldr	r3, [pc, #304]	; (80072b8 <UART_ReceivedMSG+0x164>)
 8007188:	889b      	ldrh	r3, [r3, #4]
 800718a:	8bba      	ldrh	r2, [r7, #28]
 800718c:	429a      	cmp	r2, r3
 800718e:	d305      	bcc.n	800719c <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8007190:	4b49      	ldr	r3, [pc, #292]	; (80072b8 <UART_ReceivedMSG+0x164>)
 8007192:	889b      	ldrh	r3, [r3, #4]
 8007194:	8bba      	ldrh	r2, [r7, #28]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	843b      	strh	r3, [r7, #32]
 800719a:	e007      	b.n	80071ac <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800719c:	4b46      	ldr	r3, [pc, #280]	; (80072b8 <UART_ReceivedMSG+0x164>)
 800719e:	889b      	ldrh	r3, [r3, #4]
 80071a0:	8bba      	ldrh	r2, [r7, #28]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80071aa:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 80071ac:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <UART_ReceivedMSG+0x164>)
 80071ae:	889b      	ldrh	r3, [r3, #4]
 80071b0:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	847b      	strh	r3, [r7, #34]	; 0x22
 80071b6:	e06d      	b.n	8007294 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 80071b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ba:	4a40      	ldr	r2, [pc, #256]	; (80072bc <UART_ReceivedMSG+0x168>)
 80071bc:	5cd3      	ldrb	r3, [r2, r3]
 80071be:	76fb      	strb	r3, [r7, #27]
      j++;
 80071c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c2:	3301      	adds	r3, #1
 80071c4:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 80071c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071cc:	d301      	bcc.n	80071d2 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80071d2:	7efb      	ldrb	r3, [r7, #27]
 80071d4:	2bf0      	cmp	r3, #240	; 0xf0
 80071d6:	d15a      	bne.n	800728e <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80071d8:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <UART_ReceivedMSG+0x164>)
 80071da:	889b      	ldrh	r3, [r3, #4]
 80071dc:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 80071de:	2300      	movs	r3, #0
 80071e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80071e2:	e03a      	b.n	800725a <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80071e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e6:	3301      	adds	r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80071f0:	8bfb      	ldrh	r3, [r7, #30]
 80071f2:	2bff      	cmp	r3, #255	; 0xff
 80071f4:	d904      	bls.n	8007200 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80071f6:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <UART_ReceivedMSG+0x164>)
 80071f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fa:	8093      	strh	r3, [r2, #4]
            return 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e055      	b.n	80072ac <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8007200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007202:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <UART_ReceivedMSG+0x168>)
 8007204:	5cd3      	ldrb	r3, [r2, r3]
 8007206:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8007208:	8b3b      	ldrh	r3, [r7, #24]
 800720a:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <UART_ReceivedMSG+0x168>)
 800720c:	5cd3      	ldrb	r3, [r2, r3]
 800720e:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8007210:	8bfb      	ldrh	r3, [r7, #30]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	3304      	adds	r3, #4
 8007218:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800721a:	7db9      	ldrb	r1, [r7, #22]
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fb54 	bl	80088ce <ReverseByteStuffCopyByte2>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8007230:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <UART_ReceivedMSG+0x164>)
 8007232:	8b3b      	ldrh	r3, [r7, #24]
 8007234:	8093      	strh	r3, [r2, #4]
            return 0;
 8007236:	2300      	movs	r3, #0
 8007238:	e038      	b.n	80072ac <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	b29a      	uxth	r2, r3
 800723e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007240:	4413      	add	r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800724a:	8bfb      	ldrh	r3, [r7, #30]
 800724c:	3301      	adds	r3, #1
 800724e:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	b29a      	uxth	r2, r3
 8007254:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007256:	4413      	add	r3, r2
 8007258:	84fb      	strh	r3, [r7, #38]	; 0x26
 800725a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800725c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800725e:	429a      	cmp	r2, r3
 8007260:	d3c0      	bcc.n	80071e4 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8007262:	8bfa      	ldrh	r2, [r7, #30]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8007268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800726a:	3301      	adds	r3, #1
 800726c:	b29b      	uxth	r3, r3
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8007274:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <UART_ReceivedMSG+0x164>)
 8007276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007278:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fb78 	bl	8008970 <CHK_CheckAndRemove>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf14      	ite	ne
 8007286:	2301      	movne	r3, #1
 8007288:	2300      	moveq	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	e00e      	b.n	80072ac <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 800728e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007290:	3301      	adds	r3, #1
 8007292:	847b      	strh	r3, [r7, #34]	; 0x22
 8007294:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007296:	8c3b      	ldrh	r3, [r7, #32]
 8007298:	429a      	cmp	r2, r3
 800729a:	d38d      	bcc.n	80071b8 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800729c:	8c3b      	ldrh	r3, [r7, #32]
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	d902      	bls.n	80072aa <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 80072a4:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <UART_ReceivedMSG+0x164>)
 80072a6:	8bbb      	ldrh	r3, [r7, #28]
 80072a8:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3728      	adds	r7, #40	; 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200001c0 	.word	0x200001c0
 80072b8:	2000086c 	.word	0x2000086c
 80072bc:	2000066c 	.word	0x2000066c

080072c0 <UART_SendMsg>:
  * @brief  Send a message via UART
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
void UART_SendMsg(TMsg *Msg)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fb27 	bl	800891c <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	4807      	ldr	r0, [pc, #28]	; (80072f0 <UART_SendMsg+0x30>)
 80072d2:	f001 face 	bl	8008872 <ByteStuffCopy>
 80072d6:	4603      	mov	r3, r0
 80072d8:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80072da:	89fa      	ldrh	r2, [r7, #14]
 80072dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80072e0:	4903      	ldr	r1, [pc, #12]	; (80072f0 <UART_SendMsg+0x30>)
 80072e2:	4804      	ldr	r0, [pc, #16]	; (80072f4 <UART_SendMsg+0x34>)
 80072e4:	f7fe ff00 	bl	80060e8 <HAL_UART_Transmit>
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000874 	.word	0x20000874
 80072f4:	200001c0 	.word	0x200001c0

080072f8 <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <UART_StartReceiveMsg+0x28>)
 80072fe:	4a09      	ldr	r2, [pc, #36]	; (8007324 <UART_StartReceiveMsg+0x2c>)
 8007300:	629a      	str	r2, [r3, #40]	; 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8007302:	4b07      	ldr	r3, [pc, #28]	; (8007320 <UART_StartReceiveMsg+0x28>)
 8007304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007308:	859a      	strh	r2, [r3, #44]	; 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <UART_StartReceiveMsg+0x28>)
 800730c:	2200      	movs	r2, #0
 800730e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8007310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007314:	4903      	ldr	r1, [pc, #12]	; (8007324 <UART_StartReceiveMsg+0x2c>)
 8007316:	4802      	ldr	r0, [pc, #8]	; (8007320 <UART_StartReceiveMsg+0x28>)
 8007318:	f7fe ff71 	bl	80061fe <HAL_UART_Receive_DMA>
}
 800731c:	bf00      	nop
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200001c0 	.word	0x200001c0
 8007324:	2000066c 	.word	0x2000066c

08007328 <Get_DMA_Flag_Status>:
  * @brief  Get the DMA Stream pending flags
  * @param  handle_dma DMA handle
  * @retval The state of FLAG (SET or RESET)
  */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	4b8c      	ldr	r3, [pc, #560]	; (8007568 <Get_DMA_Flag_Status+0x240>)
 8007338:	429a      	cmp	r2, r3
 800733a:	d961      	bls.n	8007400 <Get_DMA_Flag_Status+0xd8>
 800733c:	4b8b      	ldr	r3, [pc, #556]	; (800756c <Get_DMA_Flag_Status+0x244>)
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	498a      	ldr	r1, [pc, #552]	; (8007570 <Get_DMA_Flag_Status+0x248>)
 8007346:	428b      	cmp	r3, r1
 8007348:	d057      	beq.n	80073fa <Get_DMA_Flag_Status+0xd2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4989      	ldr	r1, [pc, #548]	; (8007574 <Get_DMA_Flag_Status+0x24c>)
 8007350:	428b      	cmp	r3, r1
 8007352:	d050      	beq.n	80073f6 <Get_DMA_Flag_Status+0xce>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4987      	ldr	r1, [pc, #540]	; (8007578 <Get_DMA_Flag_Status+0x250>)
 800735a:	428b      	cmp	r3, r1
 800735c:	d049      	beq.n	80073f2 <Get_DMA_Flag_Status+0xca>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4986      	ldr	r1, [pc, #536]	; (800757c <Get_DMA_Flag_Status+0x254>)
 8007364:	428b      	cmp	r3, r1
 8007366:	d042      	beq.n	80073ee <Get_DMA_Flag_Status+0xc6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4984      	ldr	r1, [pc, #528]	; (8007580 <Get_DMA_Flag_Status+0x258>)
 800736e:	428b      	cmp	r3, r1
 8007370:	d03a      	beq.n	80073e8 <Get_DMA_Flag_Status+0xc0>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4983      	ldr	r1, [pc, #524]	; (8007584 <Get_DMA_Flag_Status+0x25c>)
 8007378:	428b      	cmp	r3, r1
 800737a:	d032      	beq.n	80073e2 <Get_DMA_Flag_Status+0xba>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4981      	ldr	r1, [pc, #516]	; (8007588 <Get_DMA_Flag_Status+0x260>)
 8007382:	428b      	cmp	r3, r1
 8007384:	d02a      	beq.n	80073dc <Get_DMA_Flag_Status+0xb4>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4980      	ldr	r1, [pc, #512]	; (800758c <Get_DMA_Flag_Status+0x264>)
 800738c:	428b      	cmp	r3, r1
 800738e:	d022      	beq.n	80073d6 <Get_DMA_Flag_Status+0xae>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	497e      	ldr	r1, [pc, #504]	; (8007590 <Get_DMA_Flag_Status+0x268>)
 8007396:	428b      	cmp	r3, r1
 8007398:	d01a      	beq.n	80073d0 <Get_DMA_Flag_Status+0xa8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	497d      	ldr	r1, [pc, #500]	; (8007594 <Get_DMA_Flag_Status+0x26c>)
 80073a0:	428b      	cmp	r3, r1
 80073a2:	d012      	beq.n	80073ca <Get_DMA_Flag_Status+0xa2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	497b      	ldr	r1, [pc, #492]	; (8007598 <Get_DMA_Flag_Status+0x270>)
 80073aa:	428b      	cmp	r3, r1
 80073ac:	d00a      	beq.n	80073c4 <Get_DMA_Flag_Status+0x9c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	497a      	ldr	r1, [pc, #488]	; (800759c <Get_DMA_Flag_Status+0x274>)
 80073b4:	428b      	cmp	r3, r1
 80073b6:	d102      	bne.n	80073be <Get_DMA_Flag_Status+0x96>
 80073b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073bc:	e01e      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073c2:	e01b      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073c8:	e018      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073ce:	e015      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073d4:	e012      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073da:	e00f      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e0:	e00c      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e6:	e009      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ec:	e006      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073ee:	2308      	movs	r3, #8
 80073f0:	e004      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073f2:	2308      	movs	r3, #8
 80073f4:	e002      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073f6:	2308      	movs	r3, #8
 80073f8:	e000      	b.n	80073fc <Get_DMA_Flag_Status+0xd4>
 80073fa:	2308      	movs	r3, #8
 80073fc:	4013      	ands	r3, r2
 80073fe:	e154      	b.n	80076aa <Get_DMA_Flag_Status+0x382>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <Get_DMA_Flag_Status+0x278>)
 8007408:	429a      	cmp	r2, r3
 800740a:	d961      	bls.n	80074d0 <Get_DMA_Flag_Status+0x1a8>
 800740c:	4b57      	ldr	r3, [pc, #348]	; (800756c <Get_DMA_Flag_Status+0x244>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4956      	ldr	r1, [pc, #344]	; (8007570 <Get_DMA_Flag_Status+0x248>)
 8007416:	428b      	cmp	r3, r1
 8007418:	d057      	beq.n	80074ca <Get_DMA_Flag_Status+0x1a2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4955      	ldr	r1, [pc, #340]	; (8007574 <Get_DMA_Flag_Status+0x24c>)
 8007420:	428b      	cmp	r3, r1
 8007422:	d050      	beq.n	80074c6 <Get_DMA_Flag_Status+0x19e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4953      	ldr	r1, [pc, #332]	; (8007578 <Get_DMA_Flag_Status+0x250>)
 800742a:	428b      	cmp	r3, r1
 800742c:	d049      	beq.n	80074c2 <Get_DMA_Flag_Status+0x19a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4952      	ldr	r1, [pc, #328]	; (800757c <Get_DMA_Flag_Status+0x254>)
 8007434:	428b      	cmp	r3, r1
 8007436:	d042      	beq.n	80074be <Get_DMA_Flag_Status+0x196>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4950      	ldr	r1, [pc, #320]	; (8007580 <Get_DMA_Flag_Status+0x258>)
 800743e:	428b      	cmp	r3, r1
 8007440:	d03a      	beq.n	80074b8 <Get_DMA_Flag_Status+0x190>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	494f      	ldr	r1, [pc, #316]	; (8007584 <Get_DMA_Flag_Status+0x25c>)
 8007448:	428b      	cmp	r3, r1
 800744a:	d032      	beq.n	80074b2 <Get_DMA_Flag_Status+0x18a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	494d      	ldr	r1, [pc, #308]	; (8007588 <Get_DMA_Flag_Status+0x260>)
 8007452:	428b      	cmp	r3, r1
 8007454:	d02a      	beq.n	80074ac <Get_DMA_Flag_Status+0x184>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	494c      	ldr	r1, [pc, #304]	; (800758c <Get_DMA_Flag_Status+0x264>)
 800745c:	428b      	cmp	r3, r1
 800745e:	d022      	beq.n	80074a6 <Get_DMA_Flag_Status+0x17e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	494a      	ldr	r1, [pc, #296]	; (8007590 <Get_DMA_Flag_Status+0x268>)
 8007466:	428b      	cmp	r3, r1
 8007468:	d01a      	beq.n	80074a0 <Get_DMA_Flag_Status+0x178>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4949      	ldr	r1, [pc, #292]	; (8007594 <Get_DMA_Flag_Status+0x26c>)
 8007470:	428b      	cmp	r3, r1
 8007472:	d012      	beq.n	800749a <Get_DMA_Flag_Status+0x172>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4947      	ldr	r1, [pc, #284]	; (8007598 <Get_DMA_Flag_Status+0x270>)
 800747a:	428b      	cmp	r3, r1
 800747c:	d00a      	beq.n	8007494 <Get_DMA_Flag_Status+0x16c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4946      	ldr	r1, [pc, #280]	; (800759c <Get_DMA_Flag_Status+0x274>)
 8007484:	428b      	cmp	r3, r1
 8007486:	d102      	bne.n	800748e <Get_DMA_Flag_Status+0x166>
 8007488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800748c:	e01e      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 800748e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007492:	e01b      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 8007494:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007498:	e018      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 800749a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800749e:	e015      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074a4:	e012      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074aa:	e00f      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b0:	e00c      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	e009      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074bc:	e006      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074be:	2308      	movs	r3, #8
 80074c0:	e004      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074c2:	2308      	movs	r3, #8
 80074c4:	e002      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074c6:	2308      	movs	r3, #8
 80074c8:	e000      	b.n	80074cc <Get_DMA_Flag_Status+0x1a4>
 80074ca:	2308      	movs	r3, #8
 80074cc:	4013      	ands	r3, r2
 80074ce:	e0ec      	b.n	80076aa <Get_DMA_Flag_Status+0x382>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	4b33      	ldr	r3, [pc, #204]	; (80075a4 <Get_DMA_Flag_Status+0x27c>)
 80074d8:	429a      	cmp	r2, r3
 80074da:	f240 8085 	bls.w	80075e8 <Get_DMA_Flag_Status+0x2c0>
 80074de:	4b32      	ldr	r3, [pc, #200]	; (80075a8 <Get_DMA_Flag_Status+0x280>)
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4922      	ldr	r1, [pc, #136]	; (8007570 <Get_DMA_Flag_Status+0x248>)
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d07a      	beq.n	80075e2 <Get_DMA_Flag_Status+0x2ba>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4920      	ldr	r1, [pc, #128]	; (8007574 <Get_DMA_Flag_Status+0x24c>)
 80074f2:	428b      	cmp	r3, r1
 80074f4:	d073      	beq.n	80075de <Get_DMA_Flag_Status+0x2b6>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	491f      	ldr	r1, [pc, #124]	; (8007578 <Get_DMA_Flag_Status+0x250>)
 80074fc:	428b      	cmp	r3, r1
 80074fe:	d06c      	beq.n	80075da <Get_DMA_Flag_Status+0x2b2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	491d      	ldr	r1, [pc, #116]	; (800757c <Get_DMA_Flag_Status+0x254>)
 8007506:	428b      	cmp	r3, r1
 8007508:	d065      	beq.n	80075d6 <Get_DMA_Flag_Status+0x2ae>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	491c      	ldr	r1, [pc, #112]	; (8007580 <Get_DMA_Flag_Status+0x258>)
 8007510:	428b      	cmp	r3, r1
 8007512:	d05d      	beq.n	80075d0 <Get_DMA_Flag_Status+0x2a8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	491a      	ldr	r1, [pc, #104]	; (8007584 <Get_DMA_Flag_Status+0x25c>)
 800751a:	428b      	cmp	r3, r1
 800751c:	d055      	beq.n	80075ca <Get_DMA_Flag_Status+0x2a2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4919      	ldr	r1, [pc, #100]	; (8007588 <Get_DMA_Flag_Status+0x260>)
 8007524:	428b      	cmp	r3, r1
 8007526:	d04d      	beq.n	80075c4 <Get_DMA_Flag_Status+0x29c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4917      	ldr	r1, [pc, #92]	; (800758c <Get_DMA_Flag_Status+0x264>)
 800752e:	428b      	cmp	r3, r1
 8007530:	d045      	beq.n	80075be <Get_DMA_Flag_Status+0x296>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4916      	ldr	r1, [pc, #88]	; (8007590 <Get_DMA_Flag_Status+0x268>)
 8007538:	428b      	cmp	r3, r1
 800753a:	d03d      	beq.n	80075b8 <Get_DMA_Flag_Status+0x290>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4914      	ldr	r1, [pc, #80]	; (8007594 <Get_DMA_Flag_Status+0x26c>)
 8007542:	428b      	cmp	r3, r1
 8007544:	d035      	beq.n	80075b2 <Get_DMA_Flag_Status+0x28a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4913      	ldr	r1, [pc, #76]	; (8007598 <Get_DMA_Flag_Status+0x270>)
 800754c:	428b      	cmp	r3, r1
 800754e:	d02d      	beq.n	80075ac <Get_DMA_Flag_Status+0x284>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4911      	ldr	r1, [pc, #68]	; (800759c <Get_DMA_Flag_Status+0x274>)
 8007556:	428b      	cmp	r3, r1
 8007558:	d102      	bne.n	8007560 <Get_DMA_Flag_Status+0x238>
 800755a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800755e:	e041      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 8007560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007564:	e03e      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 8007566:	bf00      	nop
 8007568:	40026458 	.word	0x40026458
 800756c:	40026400 	.word	0x40026400
 8007570:	40026010 	.word	0x40026010
 8007574:	40026410 	.word	0x40026410
 8007578:	40026070 	.word	0x40026070
 800757c:	40026470 	.word	0x40026470
 8007580:	40026028 	.word	0x40026028
 8007584:	40026428 	.word	0x40026428
 8007588:	40026088 	.word	0x40026088
 800758c:	40026488 	.word	0x40026488
 8007590:	40026040 	.word	0x40026040
 8007594:	40026440 	.word	0x40026440
 8007598:	400260a0 	.word	0x400260a0
 800759c:	400264a0 	.word	0x400264a0
 80075a0:	400260b8 	.word	0x400260b8
 80075a4:	40026058 	.word	0x40026058
 80075a8:	40026000 	.word	0x40026000
 80075ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075b0:	e018      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075b6:	e015      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075bc:	e012      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c2:	e00f      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c8:	e00c      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ce:	e009      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d4:	e006      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075d6:	2308      	movs	r3, #8
 80075d8:	e004      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075da:	2308      	movs	r3, #8
 80075dc:	e002      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075de:	2308      	movs	r3, #8
 80075e0:	e000      	b.n	80075e4 <Get_DMA_Flag_Status+0x2bc>
 80075e2:	2308      	movs	r3, #8
 80075e4:	4013      	ands	r3, r2
 80075e6:	e060      	b.n	80076aa <Get_DMA_Flag_Status+0x382>
 80075e8:	4b33      	ldr	r3, [pc, #204]	; (80076b8 <Get_DMA_Flag_Status+0x390>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4932      	ldr	r1, [pc, #200]	; (80076bc <Get_DMA_Flag_Status+0x394>)
 80075f2:	428b      	cmp	r3, r1
 80075f4:	d057      	beq.n	80076a6 <Get_DMA_Flag_Status+0x37e>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4931      	ldr	r1, [pc, #196]	; (80076c0 <Get_DMA_Flag_Status+0x398>)
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d050      	beq.n	80076a2 <Get_DMA_Flag_Status+0x37a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	492f      	ldr	r1, [pc, #188]	; (80076c4 <Get_DMA_Flag_Status+0x39c>)
 8007606:	428b      	cmp	r3, r1
 8007608:	d049      	beq.n	800769e <Get_DMA_Flag_Status+0x376>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	492e      	ldr	r1, [pc, #184]	; (80076c8 <Get_DMA_Flag_Status+0x3a0>)
 8007610:	428b      	cmp	r3, r1
 8007612:	d042      	beq.n	800769a <Get_DMA_Flag_Status+0x372>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	492c      	ldr	r1, [pc, #176]	; (80076cc <Get_DMA_Flag_Status+0x3a4>)
 800761a:	428b      	cmp	r3, r1
 800761c:	d03a      	beq.n	8007694 <Get_DMA_Flag_Status+0x36c>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	492b      	ldr	r1, [pc, #172]	; (80076d0 <Get_DMA_Flag_Status+0x3a8>)
 8007624:	428b      	cmp	r3, r1
 8007626:	d032      	beq.n	800768e <Get_DMA_Flag_Status+0x366>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4929      	ldr	r1, [pc, #164]	; (80076d4 <Get_DMA_Flag_Status+0x3ac>)
 800762e:	428b      	cmp	r3, r1
 8007630:	d02a      	beq.n	8007688 <Get_DMA_Flag_Status+0x360>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4928      	ldr	r1, [pc, #160]	; (80076d8 <Get_DMA_Flag_Status+0x3b0>)
 8007638:	428b      	cmp	r3, r1
 800763a:	d022      	beq.n	8007682 <Get_DMA_Flag_Status+0x35a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4926      	ldr	r1, [pc, #152]	; (80076dc <Get_DMA_Flag_Status+0x3b4>)
 8007642:	428b      	cmp	r3, r1
 8007644:	d01a      	beq.n	800767c <Get_DMA_Flag_Status+0x354>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4925      	ldr	r1, [pc, #148]	; (80076e0 <Get_DMA_Flag_Status+0x3b8>)
 800764c:	428b      	cmp	r3, r1
 800764e:	d012      	beq.n	8007676 <Get_DMA_Flag_Status+0x34e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4923      	ldr	r1, [pc, #140]	; (80076e4 <Get_DMA_Flag_Status+0x3bc>)
 8007656:	428b      	cmp	r3, r1
 8007658:	d00a      	beq.n	8007670 <Get_DMA_Flag_Status+0x348>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4922      	ldr	r1, [pc, #136]	; (80076e8 <Get_DMA_Flag_Status+0x3c0>)
 8007660:	428b      	cmp	r3, r1
 8007662:	d102      	bne.n	800766a <Get_DMA_Flag_Status+0x342>
 8007664:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007668:	e01e      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 800766a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800766e:	e01b      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 8007670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007674:	e018      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 8007676:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800767a:	e015      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 800767c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007680:	e012      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 8007682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007686:	e00f      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 8007688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800768c:	e00c      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 800768e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007692:	e009      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 8007694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007698:	e006      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 800769a:	2308      	movs	r3, #8
 800769c:	e004      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 800769e:	2308      	movs	r3, #8
 80076a0:	e002      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 80076a2:	2308      	movs	r3, #8
 80076a4:	e000      	b.n	80076a8 <Get_DMA_Flag_Status+0x380>
 80076a6:	2308      	movs	r3, #8
 80076a8:	4013      	ands	r3, r2
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40026000 	.word	0x40026000
 80076bc:	40026010 	.word	0x40026010
 80076c0:	40026410 	.word	0x40026410
 80076c4:	40026070 	.word	0x40026070
 80076c8:	40026470 	.word	0x40026470
 80076cc:	40026028 	.word	0x40026028
 80076d0:	40026428 	.word	0x40026428
 80076d4:	40026088 	.word	0x40026088
 80076d8:	40026488 	.word	0x40026488
 80076dc:	40026040 	.word	0x40026040
 80076e0:	40026440 	.word	0x40026440
 80076e4:	400260a0 	.word	0x400260a0
 80076e8:	400264a0 	.word	0x400264a0

080076ec <Get_DMA_Counter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
  * @param  handle_dma DMA handle
  * @retval The number of remaining data units in the current DMA Stream transfer
  */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <CUSTOM_ENV_SENSOR_Init>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08c      	sub	sp, #48	; 0x30
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8007716:	2301      	movs	r3, #1
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
  CUSTOM_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d138      	bne.n	8007796 <CUSTOM_ENV_SENSOR_Init+0x8e>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_0_Probe(Functions) != BSP_ERROR_NONE)
 8007724:	6838      	ldr	r0, [r7, #0]
 8007726:	f000 f941 	bl	80079ac <STHS34PF80_0_Probe>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <CUSTOM_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295
 8007734:	e069      	b.n	800780a <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007736:	4a37      	ldr	r2, [pc, #220]	; (8007814 <CUSTOM_ENV_SENSOR_Init+0x10c>)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4935      	ldr	r1, [pc, #212]	; (8007818 <CUSTOM_ENV_SENSOR_Init+0x110>)
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <CUSTOM_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007756:	f06f 0306 	mvn.w	r3, #6
 800775a:	e056      	b.n	800780a <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (cap.Temperature == 1U)
 800775c:	7a3b      	ldrb	r3, [r7, #8]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d103      	bne.n	800776a <CUSTOM_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800776a:	7abb      	ldrb	r3, [r7, #10]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d103      	bne.n	8007778 <CUSTOM_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f043 0304 	orr.w	r3, r3, #4
 8007776:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8007778:	7a7b      	ldrb	r3, [r7, #9]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d103      	bne.n	8007786 <CUSTOM_ENV_SENSOR_Init+0x7e>
      {
        component_functions |= ENV_PRESSURE;
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d108      	bne.n	800779e <CUSTOM_ENV_SENSOR_Init+0x96>
      {
        component_functions |= ENV_GAS;
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	f043 0308 	orr.w	r3, r3, #8
 8007792:	623b      	str	r3, [r7, #32]
      }
      break;
 8007794:	e003      	b.n	800779e <CUSTOM_ENV_SENSOR_Init+0x96>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007796:	f06f 0301 	mvn.w	r3, #1
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800779c:	e000      	b.n	80077a0 <CUSTOM_ENV_SENSOR_Init+0x98>
      break;
 800779e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <CUSTOM_ENV_SENSOR_Init+0xa2>
  {
    return ret;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	e02f      	b.n	800780a <CUSTOM_ENV_SENSOR_Init+0x102>
  }

  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	627b      	str	r3, [r7, #36]	; 0x24
 80077ae:	e028      	b.n	8007802 <CUSTOM_ENV_SENSOR_Init+0xfa>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	4013      	ands	r3, r2
 80077b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d11c      	bne.n	80077f6 <CUSTOM_ENV_SENSOR_Init+0xee>
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	4013      	ands	r3, r2
 80077c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d116      	bne.n	80077f6 <CUSTOM_ENV_SENSOR_Init+0xee>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <CUSTOM_ENV_SENSOR_Init+0x114>)
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d0:	4913      	ldr	r1, [pc, #76]	; (8007820 <CUSTOM_ENV_SENSOR_Init+0x118>)
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	0092      	lsls	r2, r2, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	490e      	ldr	r1, [pc, #56]	; (8007818 <CUSTOM_ENV_SENSOR_Init+0x110>)
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80077e6:	4610      	mov	r0, r2
 80077e8:	4798      	blx	r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <CUSTOM_ENV_SENSOR_Init+0xee>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80077f0:	f06f 0304 	mvn.w	r3, #4
 80077f4:	e009      	b.n	800780a <CUSTOM_ENV_SENSOR_Init+0x102>
      }
    }
    function = function << 1;
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	3301      	adds	r3, #1
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b03      	cmp	r3, #3
 8007806:	d9d3      	bls.n	80077b0 <CUSTOM_ENV_SENSOR_Init+0xa8>
  }

  return ret;
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800780a:	4618      	mov	r0, r3
 800780c:	3730      	adds	r7, #48	; 0x30
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000a88 	.word	0x20000a88
 8007818:	20000a74 	.word	0x20000a74
 800781c:	2000003c 	.word	0x2000003c
 8007820:	20000a78 	.word	0x20000a78

08007824 <CUSTOM_ENV_SENSOR_Enable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <CUSTOM_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007834:	f06f 0301 	mvn.w	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e026      	b.n	800788a <CUSTOM_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800783c:	4a15      	ldr	r2, [pc, #84]	; (8007894 <CUSTOM_ENV_SENSOR_Enable+0x70>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	4013      	ands	r3, r2
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d11a      	bne.n	8007884 <CUSTOM_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800784e:	4a12      	ldr	r2, [pc, #72]	; (8007898 <CUSTOM_ENV_SENSOR_Enable+0x74>)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007856:	4911      	ldr	r1, [pc, #68]	; (800789c <CUSTOM_ENV_SENSOR_Enable+0x78>)
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	0092      	lsls	r2, r2, #2
 800785c:	4413      	add	r3, r2
 800785e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	490e      	ldr	r1, [pc, #56]	; (80078a0 <CUSTOM_ENV_SENSOR_Enable+0x7c>)
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800786c:	4610      	mov	r0, r2
 800786e:	4798      	blx	r3
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <CUSTOM_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007876:	f06f 0304 	mvn.w	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e005      	b.n	800788a <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e002      	b.n	800788a <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007884:	f06f 0301 	mvn.w	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800788a:	68fb      	ldr	r3, [r7, #12]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20000a8c 	.word	0x20000a8c
 8007898:	2000003c 	.word	0x2000003c
 800789c:	20000a78 	.word	0x20000a78
 80078a0:	20000a74 	.word	0x20000a74

080078a4 <CUSTOM_ENV_SENSOR_Disable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <CUSTOM_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80078b4:	f06f 0301 	mvn.w	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	e026      	b.n	800790a <CUSTOM_ENV_SENSOR_Disable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80078bc:	4a15      	ldr	r2, [pc, #84]	; (8007914 <CUSTOM_ENV_SENSOR_Disable+0x70>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	4013      	ands	r3, r2
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d11a      	bne.n	8007904 <CUSTOM_ENV_SENSOR_Disable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80078ce:	4a12      	ldr	r2, [pc, #72]	; (8007918 <CUSTOM_ENV_SENSOR_Disable+0x74>)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078d6:	4911      	ldr	r1, [pc, #68]	; (800791c <CUSTOM_ENV_SENSOR_Disable+0x78>)
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	0092      	lsls	r2, r2, #2
 80078dc:	4413      	add	r3, r2
 80078de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	490e      	ldr	r1, [pc, #56]	; (8007920 <CUSTOM_ENV_SENSOR_Disable+0x7c>)
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <CUSTOM_ENV_SENSOR_Disable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80078f6:	f06f 0304 	mvn.w	r3, #4
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e005      	b.n	800790a <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	e002      	b.n	800790a <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007904:	f06f 0301 	mvn.w	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000a8c 	.word	0x20000a8c
 8007918:	2000003c 	.word	0x2000003c
 800791c:	20000a78 	.word	0x20000a78
 8007920:	20000a74 	.word	0x20000a74

08007924 <CUSTOM_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_GAS
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007938:	f06f 0301 	mvn.w	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	e028      	b.n	8007992 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007940:	4a16      	ldr	r2, [pc, #88]	; (800799c <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x78>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	429a      	cmp	r2, r3
 8007950:	d11c      	bne.n	800798c <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x7c>)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800795a:	4912      	ldr	r1, [pc, #72]	; (80079a4 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x80>)
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	4413      	add	r3, r2
 8007962:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	490f      	ldr	r1, [pc, #60]	; (80079a8 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x84>)
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007970:	ed97 0a01 	vldr	s0, [r7, #4]
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800797e:	f06f 0304 	mvn.w	r3, #4
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e005      	b.n	8007992 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	e002      	b.n	8007992 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800798c:	f06f 0301 	mvn.w	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007992:	697b      	ldr	r3, [r7, #20]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000a8c 	.word	0x20000a8c
 80079a0:	2000003c 	.word	0x2000003c
 80079a4:	20000a78 	.word	0x20000a78
 80079a8:	20000a74 	.word	0x20000a74

080079ac <STHS34PF80_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be:
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STHS34PF80_0_Probe(uint32_t Functions)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b092      	sub	sp, #72	; 0x48
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  STHS34PF80_IO_t            io_ctx;
  uint8_t                    id;
  int32_t                    ret = BSP_ERROR_NONE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
  static STHS34PF80_Object_t sths34pf80_obj_0;
  STHS34PF80_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STHS34PF80_I2C_BUS; /* I2C */
 80079b8:	2300      	movs	r3, #0
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STHS34PF80_I2C_ADD;
 80079bc:	23b5      	movs	r3, #181	; 0xb5
 80079be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = CUSTOM_STHS34PF80_0_I2C_Init;
 80079c2:	4b47      	ldr	r3, [pc, #284]	; (8007ae0 <STHS34PF80_0_Probe+0x134>)
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = CUSTOM_STHS34PF80_0_I2C_DeInit;
 80079c6:	4b47      	ldr	r3, [pc, #284]	; (8007ae4 <STHS34PF80_0_Probe+0x138>)
 80079c8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = CUSTOM_STHS34PF80_0_I2C_ReadReg;
 80079ca:	4b47      	ldr	r3, [pc, #284]	; (8007ae8 <STHS34PF80_0_Probe+0x13c>)
 80079cc:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = CUSTOM_STHS34PF80_0_I2C_WriteReg;
 80079ce:	4b47      	ldr	r3, [pc, #284]	; (8007aec <STHS34PF80_0_Probe+0x140>)
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = BSP_GetTick;
 80079d2:	4b47      	ldr	r3, [pc, #284]	; (8007af0 <STHS34PF80_0_Probe+0x144>)
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.Delay       = HAL_Delay;
 80079d6:	4b47      	ldr	r3, [pc, #284]	; (8007af4 <STHS34PF80_0_Probe+0x148>)
 80079d8:	643b      	str	r3, [r7, #64]	; 0x40

  if (STHS34PF80_RegisterBusIO(&sths34pf80_obj_0, &io_ctx) != STHS34PF80_OK)
 80079da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079de:	4619      	mov	r1, r3
 80079e0:	4845      	ldr	r0, [pc, #276]	; (8007af8 <STHS34PF80_0_Probe+0x14c>)
 80079e2:	f7f9 fda9 	bl	8001538 <STHS34PF80_RegisterBusIO>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <STHS34PF80_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80079ec:	f06f 0306 	mvn.w	r3, #6
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
 80079f2:	e06f      	b.n	8007ad4 <STHS34PF80_0_Probe+0x128>
  }
  else if (STHS34PF80_ReadID(&sths34pf80_obj_0, &id) != STHS34PF80_OK)
 80079f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80079f8:	4619      	mov	r1, r3
 80079fa:	483f      	ldr	r0, [pc, #252]	; (8007af8 <STHS34PF80_0_Probe+0x14c>)
 80079fc:	f7f9 fe2f 	bl	800165e <STHS34PF80_ReadID>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <STHS34PF80_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007a06:	f06f 0306 	mvn.w	r3, #6
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0c:	e062      	b.n	8007ad4 <STHS34PF80_0_Probe+0x128>
  }
  else if (id != STHS34PF80_ID)
 8007a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a12:	2bd3      	cmp	r3, #211	; 0xd3
 8007a14:	d003      	beq.n	8007a1e <STHS34PF80_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007a16:	f06f 0306 	mvn.w	r3, #6
 8007a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1c:	e05a      	b.n	8007ad4 <STHS34PF80_0_Probe+0x128>
  }
  else
  {
    (void)STHS34PF80_GetCapabilities(&sths34pf80_obj_0, &cap);
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4619      	mov	r1, r3
 8007a24:	4834      	ldr	r0, [pc, #208]	; (8007af8 <STHS34PF80_0_Probe+0x14c>)
 8007a26:	f7f9 fe35 	bl	8001694 <STHS34PF80_GetCapabilities>

    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8007a2a:	7a3b      	ldrb	r3, [r7, #8]
 8007a2c:	461a      	mov	r2, r3
                                          | ((uint32_t)cap.Pressure << 1)
 8007a2e:	7a7b      	ldrb	r3, [r7, #9]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Humidity << 2)
 8007a34:	7abb      	ldrb	r3, [r7, #10]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Gas      << 3);
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	4313      	orrs	r3, r2
    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8007a40:	4a2e      	ldr	r2, [pc, #184]	; (8007afc <STHS34PF80_0_Probe+0x150>)
 8007a42:	6013      	str	r3, [r2, #0]

    EnvCompObj[CUSTOM_STHS34PF80_0] = &sths34pf80_obj_0;
 8007a44:	4b2e      	ldr	r3, [pc, #184]	; (8007b00 <STHS34PF80_0_Probe+0x154>)
 8007a46:	4a2c      	ldr	r2, [pc, #176]	; (8007af8 <STHS34PF80_0_Probe+0x14c>)
 8007a48:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[CUSTOM_STHS34PF80_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STHS34PF80_COMMON_Driver;
 8007a4a:	4b2e      	ldr	r3, [pc, #184]	; (8007b04 <STHS34PF80_0_Probe+0x158>)
 8007a4c:	4a2e      	ldr	r2, [pc, #184]	; (8007b08 <STHS34PF80_0_Probe+0x15c>)
 8007a4e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11d      	bne.n	8007a92 <STHS34PF80_0_Probe+0xe6>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d018      	beq.n	8007a92 <STHS34PF80_0_Probe+0xe6>
 8007a60:	7a3b      	ldrb	r3, [r7, #8]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d115      	bne.n	8007a92 <STHS34PF80_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_STHS34PF80_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STHS34PF80_TEMP_Driver;
 8007a66:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <STHS34PF80_0_Probe+0x160>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <STHS34PF80_0_Probe+0x164>)
 8007a6c:	4929      	ldr	r1, [pc, #164]	; (8007b14 <STHS34PF80_0_Probe+0x168>)
 8007a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_STHS34PF80_0]->Init(EnvCompObj[CUSTOM_STHS34PF80_0]) != STHS34PF80_OK)
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <STHS34PF80_0_Probe+0x158>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <STHS34PF80_0_Probe+0x154>)
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <STHS34PF80_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007a86:	f06f 0304 	mvn.w	r3, #4
 8007a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8c:	e001      	b.n	8007a92 <STHS34PF80_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d107      	bne.n	8007aa8 <STHS34PF80_0_Probe+0xfc>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <STHS34PF80_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007aa2:	f06f 0304 	mvn.w	r3, #4
 8007aa6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8007aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d107      	bne.n	8007abe <STHS34PF80_0_Probe+0x112>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d002      	beq.n	8007abe <STHS34PF80_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ab8:	f06f 0304 	mvn.w	r3, #4
 8007abc:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8007abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d107      	bne.n	8007ad4 <STHS34PF80_0_Probe+0x128>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <STHS34PF80_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ace:	f06f 0304 	mvn.w	r3, #4
 8007ad2:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8007ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3748      	adds	r7, #72	; 0x48
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	08001195 	.word	0x08001195
 8007ae4:	080011f9 	.word	0x080011f9
 8007ae8:	080012ad 	.word	0x080012ad
 8007aec:	08001249 	.word	0x08001249
 8007af0:	08001311 	.word	0x08001311
 8007af4:	080026b5 	.word	0x080026b5
 8007af8:	20000a90 	.word	0x20000a90
 8007afc:	20000a8c 	.word	0x20000a8c
 8007b00:	20000a74 	.word	0x20000a74
 8007b04:	20000a88 	.word	0x20000a88
 8007b08:	20000004 	.word	0x20000004
 8007b0c:	2000003c 	.word	0x2000003c
 8007b10:	20000a78 	.word	0x20000a78
 8007b14:	20000014 	.word	0x20000014

08007b18 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>:
  * @param  Instance the device instance
  * @param  Value the ambient raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TAmbRaw(uint32_t Instance, int16_t *Value)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d111      	bne.n	8007b4c <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAmbientTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007b28:	4a0d      	ldr	r2, [pc, #52]	; (8007b60 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x48>)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7f9 ff1f 	bl	8001976 <STHS34PF80_GetAmbientTemperatureRaw>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b3e:	f06f 0304 	mvn.w	r3, #4
 8007b42:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007b44:	e006      	b.n	8007b54 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
      break;
 8007b4a:	e003      	b.n	8007b54 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007b4c:	f06f 0301 	mvn.w	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
      break;
 8007b52:	bf00      	nop
  }

  return ret;
 8007b54:	68fb      	ldr	r3, [r7, #12]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000a74 	.word	0x20000a74

08007b64 <CUSTOM_ENV_SENSOR_Get_TObjRaw>:
  * @param  Instance the device instance
  * @param  Value the object raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TObjRaw(uint32_t Instance, int16_t *Value)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d111      	bne.n	8007b98 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetObjectTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007b74:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x48>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7f9 fee3 	bl	800194a <STHS34PF80_GetObjectTemperatureRaw>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007b8a:	f06f 0304 	mvn.w	r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007b90:	e006      	b.n	8007ba0 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
      break;
 8007b96:	e003      	b.n	8007ba0 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007b98:	f06f 0301 	mvn.w	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]
      break;
 8007b9e:	bf00      	nop
  }

  return ret;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000a74 	.word	0x20000a74

08007bb0 <CUSTOM_ENV_SENSOR_Get_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgTmos(uint32_t Instance, uint16_t *Value)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d111      	bne.n	8007be4 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007bc0:	4a0d      	ldr	r2, [pc, #52]	; (8007bf8 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x48>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7f9 ff16 	bl	80019fc <STHS34PF80_GetAvgTmos>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007bd6:	f06f 0304 	mvn.w	r3, #4
 8007bda:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007bdc:	e006      	b.n	8007bec <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
        ret = BSP_ERROR_NONE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
      break;
 8007be2:	e003      	b.n	8007bec <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007be4:	f06f 0301 	mvn.w	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
      break;
 8007bea:	bf00      	nop
  }

  return ret;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000a74 	.word	0x20000a74

08007bfc <CUSTOM_ENV_SENSOR_Set_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Set_AvgTmos(uint32_t Instance, uint16_t Value)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d112      	bne.n	8007c34 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x38>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_SetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x4c>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7f9 ff48 	bl	8001ab0 <STHS34PF80_SetAvgTmos>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c26:	f06f 0304 	mvn.w	r3, #4
 8007c2a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007c2c:	e006      	b.n	8007c3c <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
        ret = BSP_ERROR_NONE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
      break;
 8007c32:	e003      	b.n	8007c3c <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007c34:	f06f 0301 	mvn.w	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
      break;
 8007c3a:	bf00      	nop
  }

  return ret;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000a74 	.word	0x20000a74

08007c4c <CUSTOM_ENV_SENSOR_Get_AvgT>:
  * @param  Instance the device instance
  * @param  Value the AvgT data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgT(uint32_t Instance, uint8_t *Value)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d111      	bne.n	8007c80 <CUSTOM_ENV_SENSOR_Get_AvgT+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgT(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007c5c:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <CUSTOM_ENV_SENSOR_Get_AvgT+0x48>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f9 ff64 	bl	8001b34 <STHS34PF80_GetAvgT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <CUSTOM_ENV_SENSOR_Get_AvgT+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c72:	f06f 0304 	mvn.w	r3, #4
 8007c76:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007c78:	e006      	b.n	8007c88 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
        ret = BSP_ERROR_NONE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
      break;
 8007c7e:	e003      	b.n	8007c88 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007c80:	f06f 0301 	mvn.w	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
      break;
 8007c86:	bf00      	nop
  }

  return ret;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000a74 	.word	0x20000a74

08007c98 <CUSTOM_ENV_SENSOR_Get_GainFactor>:
  * @param  Instance the device instance
  * @param  Value the GainFactor data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_GainFactor(uint32_t Instance, uint8_t *Value)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d111      	bne.n	8007ccc <CUSTOM_ENV_SENSOR_Get_GainFactor+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetGainFactor(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007ca8:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x48>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7f9 ff7c 	bl	8001bb0 <STHS34PF80_GetGainFactor>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cbe:	f06f 0304 	mvn.w	r3, #4
 8007cc2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007cc4:	e006      	b.n	8007cd4 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
        ret = BSP_ERROR_NONE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
      break;
 8007cca:	e003      	b.n	8007cd4 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007ccc:	f06f 0301 	mvn.w	r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]
      break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000a74 	.word	0x20000a74

08007ce4 <CUSTOM_ENV_SENSOR_Get_Sensitivity>:
  * @param  Instance the device instance
  * @param  Value the Sensitivity value
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_Sensitivity(uint32_t Instance, uint16_t *Value)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d111      	bne.n	8007d18 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetSensitivity(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007cf4:	4a0d      	ldr	r2, [pc, #52]	; (8007d2c <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x48>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7f9 ff82 	bl	8001c08 <STHS34PF80_GetSensitivity>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d0a:	f06f 0304 	mvn.w	r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007d10:	e006      	b.n	8007d20 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
        ret = BSP_ERROR_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
      break;
 8007d16:	e003      	b.n	8007d20 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d18:	f06f 0301 	mvn.w	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	68fb      	ldr	r3, [r7, #12]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000a74 	.word	0x20000a74

08007d30 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8007d42:	bf00      	nop
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8007d50:	bf00      	nop
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8007d5e:	bf00      	nop
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f7ff fcca 	bl	8007708 <CUSTOM_ENV_SENSOR_Init>
#endif
#endif
#endif
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8007d7c:	bf00      	nop
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8007d86:	b480      	push	{r7}
 8007d88:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8007da6:	bf00      	nop
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f7ff fd2d 	bl	8007824 <CUSTOM_ENV_SENSOR_Enable>
#endif
#endif
#endif
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8007dea:	b480      	push	{r7}
 8007dec:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8007dee:	bf00      	nop
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8007dfc:	bf00      	nop
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8007e06:	b480      	push	{r7}
 8007e08:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8007e0a:	bf00      	nop
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8007e18:	2101      	movs	r1, #1
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f7ff fd42 	bl	80078a4 <CUSTOM_ENV_SENSOR_Disable>
#endif
#endif
#endif
}
 8007e20:	bf00      	nop
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8007e28:	bf00      	nop
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <BSP_SENSOR_TEMP_SetOutputDataRate>:
  * @brief  Set output data rate for temperature sensors
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_TEMP_SetOutputDataRate(float Odr)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)CUSTOM_HYBRID_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE, Odr);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE, Odr);
 8007e3c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007e40:	2101      	movs	r1, #1
 8007e42:	2000      	movs	r0, #0
 8007e44:	f7ff fd6e 	bl	8007924 <CUSTOM_ENV_SENSOR_SetOutputDataRate>
#endif
#endif
#endif
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <BSP_SENSOR_TEMP_GetTAmbRaw>:
  * @brief  Get the TAmbRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTAmbRaw(int16_t *Value)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TAmbRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	f7ff fe5c 	bl	8007b18 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>
#endif
#endif
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <BSP_SENSOR_TEMP_GetTObjRaw>:
  * @brief  Get the TObjRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTObjRaw(int16_t *Value)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TObjRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	2000      	movs	r0, #0
 8007e74:	f7ff fe76 	bl	8007b64 <CUSTOM_ENV_SENSOR_Get_TObjRaw>
#endif
#endif
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <BSP_SENSOR_TEMP_GetAvgTmos>:
  * @brief  Get the AvgTmos value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgTmos(uint16_t *Value)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f7ff fe90 	bl	8007bb0 <CUSTOM_ENV_SENSOR_Get_AvgTmos>
#endif
#endif
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <BSP_SENSOR_TEMP_SetAvgTmos>:
  * @brief  Set the AvgTmos value to infrared temperature sensor
  * @param  Value the value to be written to
  * @retval None
  */
void BSP_SENSOR_TEMP_SetAvgTmos(uint16_t Value)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	80fb      	strh	r3, [r7, #6]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Set_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f7ff fea8 	bl	8007bfc <CUSTOM_ENV_SENSOR_Set_AvgTmos>
#endif
#endif
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <BSP_SENSOR_TEMP_GetAvgT>:
  * @brief  Get the AvgT value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgT(uint8_t *Value)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgT(CUSTOM_TEMP_INSTANCE_0, Value);
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	f7ff fec4 	bl	8007c4c <CUSTOM_ENV_SENSOR_Get_AvgT>
#endif
#endif
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <BSP_SENSOR_TEMP_GetGainFactor>:
  * @brief  Get the GainFactor value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetGainFactor(uint8_t *Value)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_GainFactor(CUSTOM_TEMP_INSTANCE_0, Value);
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f7ff fede 	bl	8007c98 <CUSTOM_ENV_SENSOR_Get_GainFactor>
#endif
#endif
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <BSP_SENSOR_TEMP_GetSensitivity>:
  * @brief  Get the Sensitivity value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetSensitivity(uint16_t *Value)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_Sensitivity(CUSTOM_TEMP_INSTANCE_0, Value);
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f7ff fef8 	bl	8007ce4 <CUSTOM_ENV_SENSOR_Get_Sensitivity>
#endif
#endif
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	795a      	ldrb	r2, [r3, #5]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2232      	movs	r2, #50	; 0x32
 8007f10:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	799b      	ldrb	r3, [r3, #6]
 8007f16:	3b80      	subs	r3, #128	; 0x80
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	719a      	strb	r2, [r3, #6]
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
	...

08007f2c <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <INIT_STREAMING_HEADER+0x30>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2232      	movs	r2, #50	; 0x32
 8007f42:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2208      	movs	r2, #8
 8007f48:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	601a      	str	r2, [r3, #0]
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	2000007c 	.word	0x2000007c

08007f60 <HandleMSG>:
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b098      	sub	sp, #96	; 0x60
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d801      	bhi.n	8007f7c <HandleMSG+0x1c>
  {
    return 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e357      	b.n	800862c <HandleMSG+0x6cc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	791b      	ldrb	r3, [r3, #4]
 8007f80:	2b32      	cmp	r3, #50	; 0x32
 8007f82:	d001      	beq.n	8007f88 <HandleMSG+0x28>
  {
    return 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e351      	b.n	800862c <HandleMSG+0x6cc>
  }

  switch (Msg->Data[2])   /* CMD */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	799b      	ldrb	r3, [r3, #6]
 8007f8c:	2b12      	cmp	r3, #18
 8007f8e:	dc6b      	bgt.n	8008068 <HandleMSG+0x108>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dc3d      	bgt.n	8008010 <HandleMSG+0xb0>
 8007f94:	e346      	b.n	8008624 <HandleMSG+0x6c4>
 8007f96:	3b60      	subs	r3, #96	; 0x60
 8007f98:	2b1a      	cmp	r3, #26
 8007f9a:	f200 8343 	bhi.w	8008624 <HandleMSG+0x6c4>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <HandleMSG+0x44>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	0800810b 	.word	0x0800810b
 8007fa8:	08008625 	.word	0x08008625
 8007fac:	08008139 	.word	0x08008139
 8007fb0:	08008625 	.word	0x08008625
 8007fb4:	08008625 	.word	0x08008625
 8007fb8:	08008625 	.word	0x08008625
 8007fbc:	08008625 	.word	0x08008625
 8007fc0:	08008625 	.word	0x08008625
 8007fc4:	08008625 	.word	0x08008625
 8007fc8:	08008625 	.word	0x08008625
 8007fcc:	08008625 	.word	0x08008625
 8007fd0:	08008625 	.word	0x08008625
 8007fd4:	08008625 	.word	0x08008625
 8007fd8:	08008625 	.word	0x08008625
 8007fdc:	08008625 	.word	0x08008625
 8007fe0:	08008625 	.word	0x08008625
 8007fe4:	08008625 	.word	0x08008625
 8007fe8:	08008625 	.word	0x08008625
 8007fec:	08008625 	.word	0x08008625
 8007ff0:	08008625 	.word	0x08008625
 8007ff4:	08008625 	.word	0x08008625
 8007ff8:	08008625 	.word	0x08008625
 8007ffc:	08008167 	.word	0x08008167
 8008000:	08008625 	.word	0x08008625
 8008004:	08008625 	.word	0x08008625
 8008008:	08008625 	.word	0x08008625
 800800c:	08008195 	.word	0x08008195
 8008010:	3b01      	subs	r3, #1
 8008012:	2b11      	cmp	r3, #17
 8008014:	f200 8306 	bhi.w	8008624 <HandleMSG+0x6c4>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <HandleMSG+0xc0>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008075 	.word	0x08008075
 8008024:	080080af 	.word	0x080080af
 8008028:	08008625 	.word	0x08008625
 800802c:	08008625 	.word	0x08008625
 8008030:	08008625 	.word	0x08008625
 8008034:	08008625 	.word	0x08008625
 8008038:	08008625 	.word	0x08008625
 800803c:	080081c3 	.word	0x080081c3
 8008040:	0800826f 	.word	0x0800826f
 8008044:	08008625 	.word	0x08008625
 8008048:	08008625 	.word	0x08008625
 800804c:	080082b9 	.word	0x080082b9
 8008050:	08008625 	.word	0x08008625
 8008054:	08008095 	.word	0x08008095
 8008058:	08008625 	.word	0x08008625
 800805c:	080082ff 	.word	0x080082ff
 8008060:	08008575 	.word	0x08008575
 8008064:	080085c3 	.word	0x080085c3
 8008068:	2b7a      	cmp	r3, #122	; 0x7a
 800806a:	f300 82db 	bgt.w	8008624 <HandleMSG+0x6c4>
 800806e:	2b60      	cmp	r3, #96	; 0x60
 8008070:	da91      	bge.n	8007f96 <HandleMSG+0x36>
 8008072:	e2d7      	b.n	8008624 <HandleMSG+0x6c4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d001      	beq.n	8008080 <HandleMSG+0x120>
      {
        return 0;
 800807c:	2300      	movs	r3, #0
 800807e:	e2d5      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ff3b 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2203      	movs	r2, #3
 800808a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f917 	bl	80072c0 <UART_SendMsg>
      break;
 8008092:	e2ca      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d001      	beq.n	80080a0 <HandleMSG+0x140>
      {
        return 0;
 800809c:	2300      	movs	r3, #0
 800809e:	e2c5      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff2b 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2203      	movs	r2, #3
 80080aa:	601a      	str	r2, [r3, #0]
      break;
 80080ac:	e2bd      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d001      	beq.n	80080ba <HandleMSG+0x15a>
      {
        return 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e2b8      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff ff1e 	bl	8007efc <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 80080c0:	f107 020c 	add.w	r2, r7, #12
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fb08 	bl	80086e0 <Get_PresentationString>

      i = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80080d4:	e00d      	b.n	80080f2 <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 80080d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d8:	3303      	adds	r3, #3
 80080da:	f107 0110 	add.w	r1, r7, #16
 80080de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080e0:	440a      	add	r2, r1
 80080e2:	7811      	ldrb	r1, [r2, #0]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	460a      	mov	r2, r1
 80080ea:	711a      	strb	r2, [r3, #4]
        i++;
 80080ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080ee:	3301      	adds	r3, #1
 80080f0:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3ed      	bcc.n	80080d6 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 80080fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080fc:	1cda      	adds	r2, r3, #3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff f8dc 	bl	80072c0 <UART_SendMsg>
      break;
 8008108:	e28f      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d801      	bhi.n	8008116 <HandleMSG+0x1b6>
      {
        return 0;
 8008112:	2300      	movs	r3, #0
 8008114:	e28a      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fef0 	bl	8007efc <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3307      	adds	r3, #7
 8008120:	2204      	movs	r2, #4
 8008122:	21ff      	movs	r1, #255	; 0xff
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fc73 	bl	8008a10 <Serialize_s32>
      Msg->Len = 3 + 4;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2207      	movs	r2, #7
 800812e:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff f8c5 	bl	80072c0 <UART_SendMsg>
      break;
 8008136:	e278      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d801      	bhi.n	8008144 <HandleMSG+0x1e4>
      {
        return 0;
 8008140:	2300      	movs	r3, #0
 8008142:	e273      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fed9 	bl	8007efc <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3307      	adds	r3, #7
 800814e:	2204      	movs	r2, #4
 8008150:	2106      	movs	r1, #6
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fc5c 	bl	8008a10 <Serialize_s32>
      Msg->Len = 3 + 4;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2207      	movs	r2, #7
 800815c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff f8ae 	bl	80072c0 <UART_SendMsg>
      break;
 8008164:	e261      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d801      	bhi.n	8008172 <HandleMSG+0x212>
      {
        return 0;
 800816e:	2300      	movs	r3, #0
 8008170:	e25c      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fec2 	bl	8007efc <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3307      	adds	r3, #7
 800817c:	2204      	movs	r2, #4
 800817e:	21ff      	movs	r1, #255	; 0xff
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fc45 	bl	8008a10 <Serialize_s32>
      Msg->Len = 3 + 4;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2207      	movs	r2, #7
 800818a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff f897 	bl	80072c0 <UART_SendMsg>
      break;
 8008192:	e24a      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d801      	bhi.n	80081a0 <HandleMSG+0x240>
      {
        return 0;
 800819c:	2300      	movs	r3, #0
 800819e:	e245      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff feab 	bl	8007efc <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3307      	adds	r3, #7
 80081aa:	2204      	movs	r2, #4
 80081ac:	21ff      	movs	r1, #255	; 0xff
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fc2e 	bl	8008a10 <Serialize_s32>
      Msg->Len = 3 + 4;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2207      	movs	r2, #7
 80081b8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff f880 	bl	80072c0 <UART_SendMsg>
      break;
 80081c0:	e233      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d801      	bhi.n	80081ce <HandleMSG+0x26e>
      {
        return 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e22e      	b.n	800862c <HandleMSG+0x6cc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3307      	adds	r3, #7
 80081d2:	2104      	movs	r1, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fbf5 	bl	80089c4 <Deserialize>
 80081da:	4603      	mov	r3, r0
 80081dc:	4a4f      	ldr	r2, [pc, #316]	; (800831c <HandleMSG+0x3bc>)
 80081de:	6013      	str	r3, [r2, #0]
      DiscardSamples = 2;
 80081e0:	4b4f      	ldr	r3, [pc, #316]	; (8008320 <HandleMSG+0x3c0>)
 80081e2:	2202      	movs	r2, #2
 80081e4:	701a      	strb	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 80081e6:	4b4d      	ldr	r3, [pc, #308]	; (800831c <HandleMSG+0x3bc>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d101      	bne.n	80081f6 <HandleMSG+0x296>
      {
        BSP_SENSOR_PRESS_Enable();
 80081f2:	f7ff fddd 	bl	8007db0 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80081f6:	4b49      	ldr	r3, [pc, #292]	; (800831c <HandleMSG+0x3bc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d101      	bne.n	8008206 <HandleMSG+0x2a6>
      {
        BSP_SENSOR_TEMP_Enable();
 8008202:	f7ff fddc 	bl	8007dbe <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8008206:	4b45      	ldr	r3, [pc, #276]	; (800831c <HandleMSG+0x3bc>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b04      	cmp	r3, #4
 8008210:	d101      	bne.n	8008216 <HandleMSG+0x2b6>
      {
        BSP_SENSOR_HUM_Enable();
 8008212:	f7ff fddc 	bl	8007dce <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8008216:	4b41      	ldr	r3, [pc, #260]	; (800831c <HandleMSG+0x3bc>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b10      	cmp	r3, #16
 8008220:	d101      	bne.n	8008226 <HandleMSG+0x2c6>
      {
        BSP_SENSOR_ACC_Enable();
 8008222:	f7ff fdb0 	bl	8007d86 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8008226:	4b3d      	ldr	r3, [pc, #244]	; (800831c <HandleMSG+0x3bc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b20      	cmp	r3, #32
 8008230:	d101      	bne.n	8008236 <HandleMSG+0x2d6>
      {
        BSP_SENSOR_GYR_Enable();
 8008232:	f7ff fdaf 	bl	8007d94 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <HandleMSG+0x3bc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	2b40      	cmp	r3, #64	; 0x40
 8008240:	d101      	bne.n	8008246 <HandleMSG+0x2e6>
      {
        BSP_SENSOR_MAG_Enable();
 8008242:	f7ff fdae 	bl	8007da2 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8008246:	4837      	ldr	r0, [pc, #220]	; (8008324 <HandleMSG+0x3c4>)
 8008248:	f7fd fadc 	bl	8005804 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <HandleMSG+0x3c8>)
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	795a      	ldrb	r2, [r3, #5]
 8008256:	4b35      	ldr	r3, [pc, #212]	; (800832c <HandleMSG+0x3cc>)
 8008258:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff fe4e 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2203      	movs	r2, #3
 8008264:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff f82a 	bl	80072c0 <UART_SendMsg>
      break;
 800826c:	e1dd      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d801      	bhi.n	800827a <HandleMSG+0x31a>
      {
        return 0;
 8008276:	2300      	movs	r3, #0
 8008278:	e1d8      	b.n	800862c <HandleMSG+0x6cc>
      }

      DataLoggerActive = 0;
 800827a:	4b2b      	ldr	r3, [pc, #172]	; (8008328 <HandleMSG+0x3c8>)
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8008280:	4828      	ldr	r0, [pc, #160]	; (8008324 <HandleMSG+0x3c4>)
 8008282:	f7fd fb21 	bl	80058c8 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 8008286:	f7ff fda9 	bl	8007ddc <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800828a:	f7ff fdae 	bl	8007dea <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800828e:	f7ff fdb3 	bl	8007df8 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 8008292:	f7ff fdb8 	bl	8007e06 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 8008296:	f7ff fdbd 	bl	8007e14 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800829a:	f7ff fdc3 	bl	8007e24 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800829e:	4b1f      	ldr	r3, [pc, #124]	; (800831c <HandleMSG+0x3bc>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 80082a4:	4b22      	ldr	r3, [pc, #136]	; (8008330 <HandleMSG+0x3d0>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fe26 	bl	8007efc <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff f805 	bl	80072c0 <UART_SendMsg>
      break;
 80082b6:	e1b8      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d801      	bhi.n	80082c4 <HandleMSG+0x364>
      {
        return 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e1b3      	b.n	800862c <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fe19 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2203      	movs	r2, #3
 80082ce:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	79d8      	ldrb	r0, [r3, #7]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7a19      	ldrb	r1, [r3, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7a5b      	ldrb	r3, [r3, #9]
 80082dc:	461a      	mov	r2, r3
 80082de:	f000 f9d5 	bl	800868c <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7a98      	ldrb	r0, [r3, #10]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7ad9      	ldrb	r1, [r3, #11]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7b1a      	ldrb	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7b5b      	ldrb	r3, [r3, #13]
 80082f2:	f000 f9a1 	bl	8008638 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fe ffe2 	bl	80072c0 <UART_SendMsg>
      break;
 80082fc:	e195      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b36      	cmp	r3, #54	; 0x36
 8008304:	d801      	bhi.n	800830a <HandleMSG+0x3aa>
      {
        return 0;
 8008306:	2300      	movs	r3, #0
 8008308:	e190      	b.n	800862c <HandleMSG+0x6cc>
      }

      msg_offset = 4;
 800830a:	2304      	movs	r3, #4
 800830c:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	79db      	ldrb	r3, [r3, #7]
 8008312:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8008314:	2300      	movs	r3, #0
 8008316:	65bb      	str	r3, [r7, #88]	; 0x58
 8008318:	e11d      	b.n	8008556 <HandleMSG+0x5f6>
 800831a:	bf00      	nop
 800831c:	20000270 	.word	0x20000270
 8008320:	20000454 	.word	0x20000454
 8008324:	20000118 	.word	0x20000118
 8008328:	2000026c 	.word	0x2000026c
 800832c:	2000007c 	.word	0x2000007c
 8008330:	2000029d 	.word	0x2000029d
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8008334:	4ba6      	ldr	r3, [pc, #664]	; (80085d0 <HandleMSG+0x670>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2234      	movs	r2, #52	; 0x34
 800833a:	fb02 f303 	mul.w	r3, r2, r3
 800833e:	4aa5      	ldr	r2, [pc, #660]	; (80085d4 <HandleMSG+0x674>)
 8008340:	4413      	add	r3, r2
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008346:	440a      	add	r2, r1
 8008348:	3204      	adds	r2, #4
 800834a:	7812      	ldrb	r2, [r2, #0]
 800834c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800834e:	4ba0      	ldr	r3, [pc, #640]	; (80085d0 <HandleMSG+0x670>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2234      	movs	r2, #52	; 0x34
 8008354:	fb02 f303 	mul.w	r3, r2, r3
 8008358:	4a9e      	ldr	r2, [pc, #632]	; (80085d4 <HandleMSG+0x674>)
 800835a:	4413      	add	r3, r2
 800835c:	3301      	adds	r3, #1
 800835e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008360:	3201      	adds	r2, #1
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	440a      	add	r2, r1
 8008366:	3204      	adds	r2, #4
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800836c:	4b98      	ldr	r3, [pc, #608]	; (80085d0 <HandleMSG+0x670>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2234      	movs	r2, #52	; 0x34
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	4a97      	ldr	r2, [pc, #604]	; (80085d4 <HandleMSG+0x674>)
 8008378:	4413      	add	r3, r2
 800837a:	3302      	adds	r3, #2
 800837c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800837e:	3202      	adds	r2, #2
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	440a      	add	r2, r1
 8008384:	3204      	adds	r2, #4
 8008386:	7812      	ldrb	r2, [r2, #0]
 8008388:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800838a:	4b91      	ldr	r3, [pc, #580]	; (80085d0 <HandleMSG+0x670>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2234      	movs	r2, #52	; 0x34
 8008390:	fb02 f303 	mul.w	r3, r2, r3
 8008394:	4a8f      	ldr	r2, [pc, #572]	; (80085d4 <HandleMSG+0x674>)
 8008396:	4413      	add	r3, r2
 8008398:	3303      	adds	r3, #3
 800839a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800839c:	3203      	adds	r2, #3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	440a      	add	r2, r1
 80083a2:	3204      	adds	r2, #4
 80083a4:	7812      	ldrb	r2, [r2, #0]
 80083a6:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 80083a8:	4b89      	ldr	r3, [pc, #548]	; (80085d0 <HandleMSG+0x670>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2234      	movs	r2, #52	; 0x34
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	4a88      	ldr	r2, [pc, #544]	; (80085d4 <HandleMSG+0x674>)
 80083b4:	4413      	add	r3, r2
 80083b6:	3304      	adds	r3, #4
 80083b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ba:	3204      	adds	r2, #4
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	440a      	add	r2, r1
 80083c0:	3204      	adds	r2, #4
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 80083c6:	4b82      	ldr	r3, [pc, #520]	; (80085d0 <HandleMSG+0x670>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2234      	movs	r2, #52	; 0x34
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	3308      	adds	r3, #8
 80083d2:	4a80      	ldr	r2, [pc, #512]	; (80085d4 <HandleMSG+0x674>)
 80083d4:	4413      	add	r3, r2
 80083d6:	3304      	adds	r3, #4
 80083d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083da:	3208      	adds	r2, #8
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	440a      	add	r2, r1
 80083e0:	3204      	adds	r2, #4
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 80083e6:	4b7a      	ldr	r3, [pc, #488]	; (80085d0 <HandleMSG+0x670>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2234      	movs	r2, #52	; 0x34
 80083ec:	fb02 f303 	mul.w	r3, r2, r3
 80083f0:	3308      	adds	r3, #8
 80083f2:	4a78      	ldr	r2, [pc, #480]	; (80085d4 <HandleMSG+0x674>)
 80083f4:	4413      	add	r3, r2
 80083f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083f8:	320c      	adds	r2, #12
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	440a      	add	r2, r1
 80083fe:	3204      	adds	r2, #4
 8008400:	6812      	ldr	r2, [r2, #0]
 8008402:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 8008404:	4b72      	ldr	r3, [pc, #456]	; (80085d0 <HandleMSG+0x670>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2234      	movs	r2, #52	; 0x34
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	3310      	adds	r3, #16
 8008410:	4a70      	ldr	r2, [pc, #448]	; (80085d4 <HandleMSG+0x674>)
 8008412:	4413      	add	r3, r2
 8008414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008416:	3210      	adds	r2, #16
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	440a      	add	r2, r1
 800841c:	3204      	adds	r2, #4
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 8008422:	4b6b      	ldr	r3, [pc, #428]	; (80085d0 <HandleMSG+0x670>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2234      	movs	r2, #52	; 0x34
 8008428:	fb02 f303 	mul.w	r3, r2, r3
 800842c:	3310      	adds	r3, #16
 800842e:	4a69      	ldr	r2, [pc, #420]	; (80085d4 <HandleMSG+0x674>)
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008436:	3214      	adds	r2, #20
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	440a      	add	r2, r1
 800843c:	3204      	adds	r2, #4
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 8008442:	4b63      	ldr	r3, [pc, #396]	; (80085d0 <HandleMSG+0x670>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2234      	movs	r2, #52	; 0x34
 8008448:	fb02 f303 	mul.w	r3, r2, r3
 800844c:	3318      	adds	r3, #24
 800844e:	4a61      	ldr	r2, [pc, #388]	; (80085d4 <HandleMSG+0x674>)
 8008450:	4413      	add	r3, r2
 8008452:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008454:	3218      	adds	r2, #24
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	440a      	add	r2, r1
 800845a:	3204      	adds	r2, #4
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8008460:	4b5b      	ldr	r3, [pc, #364]	; (80085d0 <HandleMSG+0x670>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2234      	movs	r2, #52	; 0x34
 8008466:	fb02 f303 	mul.w	r3, r2, r3
 800846a:	3318      	adds	r3, #24
 800846c:	4a59      	ldr	r2, [pc, #356]	; (80085d4 <HandleMSG+0x674>)
 800846e:	4413      	add	r3, r2
 8008470:	3304      	adds	r3, #4
 8008472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008474:	321c      	adds	r2, #28
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	440a      	add	r2, r1
 800847a:	3204      	adds	r2, #4
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 8008480:	4b53      	ldr	r3, [pc, #332]	; (80085d0 <HandleMSG+0x670>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2234      	movs	r2, #52	; 0x34
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	3320      	adds	r3, #32
 800848c:	4a51      	ldr	r2, [pc, #324]	; (80085d4 <HandleMSG+0x674>)
 800848e:	4413      	add	r3, r2
 8008490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008492:	3220      	adds	r2, #32
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	440a      	add	r2, r1
 8008498:	3204      	adds	r2, #4
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800849e:	4b4c      	ldr	r3, [pc, #304]	; (80085d0 <HandleMSG+0x670>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2234      	movs	r2, #52	; 0x34
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
 80084a8:	3320      	adds	r3, #32
 80084aa:	4a4a      	ldr	r2, [pc, #296]	; (80085d4 <HandleMSG+0x674>)
 80084ac:	4413      	add	r3, r2
 80084ae:	3304      	adds	r3, #4
 80084b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084b2:	3224      	adds	r2, #36	; 0x24
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	440a      	add	r2, r1
 80084b8:	3204      	adds	r2, #4
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 80084be:	4b44      	ldr	r3, [pc, #272]	; (80085d0 <HandleMSG+0x670>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2234      	movs	r2, #52	; 0x34
 80084c4:	fb02 f303 	mul.w	r3, r2, r3
 80084c8:	3328      	adds	r3, #40	; 0x28
 80084ca:	4a42      	ldr	r2, [pc, #264]	; (80085d4 <HandleMSG+0x674>)
 80084cc:	4413      	add	r3, r2
 80084ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084d0:	3228      	adds	r2, #40	; 0x28
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	440a      	add	r2, r1
 80084d6:	3204      	adds	r2, #4
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 80084dc:	4b3c      	ldr	r3, [pc, #240]	; (80085d0 <HandleMSG+0x670>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2234      	movs	r2, #52	; 0x34
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	3328      	adds	r3, #40	; 0x28
 80084e8:	4a3a      	ldr	r2, [pc, #232]	; (80085d4 <HandleMSG+0x674>)
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084f0:	322c      	adds	r2, #44	; 0x2c
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	440a      	add	r2, r1
 80084f6:	3204      	adds	r2, #4
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80084fc:	4b34      	ldr	r3, [pc, #208]	; (80085d0 <HandleMSG+0x670>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2234      	movs	r2, #52	; 0x34
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	3330      	adds	r3, #48	; 0x30
 8008508:	4a32      	ldr	r2, [pc, #200]	; (80085d4 <HandleMSG+0x674>)
 800850a:	4413      	add	r3, r2
 800850c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800850e:	3230      	adds	r2, #48	; 0x30
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	440a      	add	r2, r1
 8008514:	3204      	adds	r2, #4
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800851a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800851c:	3334      	adds	r3, #52	; 0x34
 800851e:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 8008520:	4b2d      	ldr	r3, [pc, #180]	; (80085d8 <HandleMSG+0x678>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <HandleMSG+0x678>)
 8008528:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800852a:	4b2b      	ldr	r3, [pc, #172]	; (80085d8 <HandleMSG+0x678>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b08      	cmp	r3, #8
 8008530:	dd02      	ble.n	8008538 <HandleMSG+0x5d8>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 8008532:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <HandleMSG+0x678>)
 8008534:	2208      	movs	r2, #8
 8008536:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8008538:	4b25      	ldr	r3, [pc, #148]	; (80085d0 <HandleMSG+0x670>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3301      	adds	r3, #1
 800853e:	4a24      	ldr	r2, [pc, #144]	; (80085d0 <HandleMSG+0x670>)
 8008540:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <HandleMSG+0x670>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b07      	cmp	r3, #7
 8008548:	dd02      	ble.n	8008550 <HandleMSG+0x5f0>
        {
          OfflineDataWriteIndex = 0;
 800854a:	4b21      	ldr	r3, [pc, #132]	; (80085d0 <HandleMSG+0x670>)
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8008550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008552:	3301      	adds	r3, #1
 8008554:	65bb      	str	r3, [r7, #88]	; 0x58
 8008556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800855a:	429a      	cmp	r2, r3
 800855c:	f4ff aeea 	bcc.w	8008334 <HandleMSG+0x3d4>
        }
      }

      SensorReadRequest = 1;
 8008560:	4b1e      	ldr	r3, [pc, #120]	; (80085dc <HandleMSG+0x67c>)
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fcc8 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2203      	movs	r2, #3
 8008570:	601a      	str	r2, [r3, #0]
      break;
 8008572:	e05a      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b03      	cmp	r3, #3
 800857a:	d801      	bhi.n	8008580 <HandleMSG+0x620>
      {
        return 0;
 800857c:	2300      	movs	r3, #0
 800857e:	e055      	b.n	800862c <HandleMSG+0x6cc>
      }

      if (Msg->Data[3] == 1U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	79db      	ldrb	r3, [r3, #7]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d10e      	bne.n	80085a6 <HandleMSG+0x646>
      {
        UseOfflineData = 1U;
 8008588:	4b15      	ldr	r3, [pc, #84]	; (80085e0 <HandleMSG+0x680>)
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800858e:	4b15      	ldr	r3, [pc, #84]	; (80085e4 <HandleMSG+0x684>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <HandleMSG+0x688>)
 8008594:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <HandleMSG+0x684>)
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800859e:	4813      	ldr	r0, [pc, #76]	; (80085ec <HandleMSG+0x68c>)
 80085a0:	f7fd f992 	bl	80058c8 <HAL_TIM_Base_Stop_IT>
 80085a4:	e006      	b.n	80085b4 <HandleMSG+0x654>
      }
      else
      {
        UseOfflineData = 0U;
 80085a6:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <HandleMSG+0x680>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 80085ac:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <HandleMSG+0x688>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a0c      	ldr	r2, [pc, #48]	; (80085e4 <HandleMSG+0x684>)
 80085b2:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fca1 	bl	8007efc <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fe fe80 	bl	80072c0 <UART_SendMsg>
      break;
 80085c0:	e033      	b.n	800862a <HandleMSG+0x6ca>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d812      	bhi.n	80085f0 <HandleMSG+0x690>
      {
        return 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e02e      	b.n	800862c <HandleMSG+0x6cc>
 80085ce:	bf00      	nop
 80085d0:	20000444 	.word	0x20000444
 80085d4:	200002a0 	.word	0x200002a0
 80085d8:	20000448 	.word	0x20000448
 80085dc:	2000029c 	.word	0x2000029c
 80085e0:	2000029d 	.word	0x2000029d
 80085e4:	20000270 	.word	0x20000270
 80085e8:	20000ac8 	.word	0x20000ac8
 80085ec:	20000118 	.word	0x20000118
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3307      	adds	r3, #7
 80085f4:	4a0f      	ldr	r2, [pc, #60]	; (8008634 <HandleMSG+0x6d4>)
 80085f6:	6812      	ldr	r2, [r2, #0]
 80085f8:	4611      	mov	r1, r2
 80085fa:	2204      	movs	r2, #4
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fa07 	bl	8008a10 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	330b      	adds	r3, #11
 8008606:	2201      	movs	r2, #1
 8008608:	2102      	movs	r1, #2
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fa00 	bl	8008a10 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fc73 	bl	8007efc <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2208      	movs	r2, #8
 800861a:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7fe fe4f 	bl	80072c0 <UART_SendMsg>
      break;
 8008622:	e002      	b.n	800862a <HandleMSG+0x6ca>

    default:
      ret = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008628:	bf00      	nop
  }

  return ret;
 800862a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800862c:	4618      	mov	r0, r3
 800862e:	3760      	adds	r7, #96	; 0x60
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000038 	.word	0x20000038

08008638 <RTC_DateRegulate>:
  * @param  d the day value to be set
  * @param  dw the day-week value to be set
  * @retval None
  */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	461a      	mov	r2, r3
 8008646:	4623      	mov	r3, r4
 8008648:	71fb      	strb	r3, [r7, #7]
 800864a:	4603      	mov	r3, r0
 800864c:	71bb      	strb	r3, [r7, #6]
 800864e:	460b      	mov	r3, r1
 8008650:	717b      	strb	r3, [r7, #5]
 8008652:	4613      	mov	r3, r2
 8008654:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800865a:	79bb      	ldrb	r3, [r7, #6]
 800865c:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800865e:	797b      	ldrb	r3, [r7, #5]
 8008660:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 8008662:	793b      	ldrb	r3, [r7, #4]
 8008664:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	2200      	movs	r2, #0
 800866c:	4619      	mov	r1, r3
 800866e:	4806      	ldr	r0, [pc, #24]	; (8008688 <RTC_DateRegulate+0x50>)
 8008670:	f7fc fee7 	bl	8005442 <HAL_RTC_SetDate>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800867a:	f7f8 fca9 	bl	8000fd0 <Error_Handler>
  }
}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	bd90      	pop	{r4, r7, pc}
 8008686:	bf00      	nop
 8008688:	200000f8 	.word	0x200000f8

0800868c <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
 8008696:	460b      	mov	r3, r1
 8008698:	71bb      	strb	r3, [r7, #6]
 800869a:	4613      	mov	r3, r2
 800869c:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 80086a2:	79bb      	ldrb	r3, [r7, #6]
 80086a4:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 80086a6:	797b      	ldrb	r3, [r7, #5]
 80086a8:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	2200      	movs	r2, #0
 80086c0:	4619      	mov	r1, r3
 80086c2:	4806      	ldr	r0, [pc, #24]	; (80086dc <RTC_TimeRegulate+0x50>)
 80086c4:	f7fc fdc5 	bl	8005252 <HAL_RTC_SetTime>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80086ce:	f7f8 fc7f 	bl	8000fd0 <Error_Handler>
  }
}
 80086d2:	bf00      	nop
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	200000f8 	.word	0x200000f8

080086e0 <Get_PresentationString>:
  * @param  PresentationString the Presentation string
  * @param  Length the length of Presentation string
  * @retval None
  */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 80086e0:	b5b0      	push	{r4, r5, r7, lr}
 80086e2:	b0a0      	sub	sp, #128	; 0x80
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST InfraredXX v"); /* Shift string pointer by this amount */
 80086ea:	230f      	movs	r3, #15
 80086ec:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	637b      	str	r3, [r7, #52]	; 0x34
  const char ps[] = {"MEMS shield demo,29,"FW_VERSION",%s,"BOARD_NAME};
 80086f4:	4b19      	ldr	r3, [pc, #100]	; (800875c <Get_PresentationString+0x7c>)
 80086f6:	f107 040c 	add.w	r4, r7, #12
 80086fa:	461d      	mov	r5, r3
 80086fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008708:	6020      	str	r0, [r4, #0]
 800870a:	3404      	adds	r4, #4
 800870c:	7021      	strb	r1, [r4, #0]

  InfraredPD_manager_get_version(lib_version_string, &lib_version_len);
 800870e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f86f 	bl	80087fc <InfraredPD_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0 resp. ST InfraredXX v1.0.0 resp. ST EnvXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800871e:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	429a      	cmp	r2, r3
 8008726:	da06      	bge.n	8008736 <Get_PresentationString+0x56>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 8008728:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800872c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008730:	4413      	add	r3, r2
 8008732:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008734:	e002      	b.n	800873c <Get_PresentationString+0x5c>
  }
  else
  {
    lib_version_num = lib_version_string;
 8008736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800873a:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800873c:	f107 020c 	add.w	r2, r7, #12
 8008740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008742:	2140      	movs	r1, #64	; 0x40
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f85d 	bl	8009804 <sniprintf>
 800874a:	4603      	mov	r3, r0
 800874c:	461a      	mov	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	3780      	adds	r7, #128	; 0x80
 8008756:	46bd      	mov	sp, r7
 8008758:	bdb0      	pop	{r4, r5, r7, pc}
 800875a:	bf00      	nop
 800875c:	0800a320 	.word	0x0800a320

08008760 <InfraredPD_manager_init>:
  * @brief  Initialize the InfraredPD engine
  * @param  None
  * @retval None
  */
void InfraredPD_manager_init(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
  IPD_device_conf_t device_conf;
  IPD_algo_conf_t algo_conf;

  InfraredPD_Initialize(IPD_MCU_STM32);
 8008766:	2000      	movs	r0, #0
 8008768:	f000 f976 	bl	8008a58 <InfraredPD_Initialize>

  device_conf.odr = Odr;
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <InfraredPD_manager_init+0x60>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	733b      	strb	r3, [r7, #12]
  device_conf.avg_tmos = AvgTmos;
 8008772:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <InfraredPD_manager_init+0x64>)
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	81fb      	strh	r3, [r7, #14]
  device_conf.avg_t = AvgT;
 8008778:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <InfraredPD_manager_init+0x68>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	743b      	strb	r3, [r7, #16]
  device_conf.gain_factor = GainFactor;
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <InfraredPD_manager_init+0x6c>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	747b      	strb	r3, [r7, #17]
  device_conf.sens_data = Sensitivity;
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <InfraredPD_manager_init+0x70>)
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	827b      	strh	r3, [r7, #18]
  device_conf.transmittance = 1.0f; /* 1.0f if no optical system is used */
 800878a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800878e:	617b      	str	r3, [r7, #20]

  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f9fc 	bl	8008b90 <InfraredPD_CreateInstance>
 8008798:	4603      	mov	r3, r0
 800879a:	4a0e      	ldr	r2, [pc, #56]	; (80087d4 <InfraredPD_manager_init+0x74>)
 800879c:	6013      	str	r3, [r2, #0]

  /* User can modify the algo_conf settings here */

  if (InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf) != IPD_INIT_OK)
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <InfraredPD_manager_init+0x74>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	1d3a      	adds	r2, r7, #4
 80087a4:	f107 010c 	add.w	r1, r7, #12
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fa0b 	bl	8008bc4 <InfraredPD_Start>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d000      	beq.n	80087b6 <InfraredPD_manager_init+0x56>
  {
    for (;;)
 80087b4:	e7fe      	b.n	80087b4 <InfraredPD_manager_init+0x54>
    {
      /* The library was not correctly started */
    }
  }
}
 80087b6:	bf00      	nop
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000044c 	.word	0x2000044c
 80087c4:	2000044e 	.word	0x2000044e
 80087c8:	20000450 	.word	0x20000450
 80087cc:	20000451 	.word	0x20000451
 80087d0:	20000452 	.word	0x20000452
 80087d4:	20000acc 	.word	0x20000acc

080087d8 <InfraredPD_manager_run>:
  * @param  data_in  Structure containing input data
  * @param  data_out Structure containing output data
  * @retval None
  */
void InfraredPD_manager_run(IPD_input_t *data_in, IPD_output_t *data_out)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  InfraredPD_Update(IPD_Instance, data_in, data_out);
 80087e2:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <InfraredPD_manager_run+0x20>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fbdc 	bl	8008fa8 <InfraredPD_Update>
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000acc 	.word	0x20000acc

080087fc <InfraredPD_manager_get_version>:
  * @param  version Library version string (must be array of 35 char)
  * @param  length  Library version string length
  * @retval None
  */
void InfraredPD_manager_get_version(char *version, int *length)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  *length = (int)InfraredPD_GetLibVersion(version);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 ff16 	bl	8009638 <InfraredPD_GetLibVersion>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	601a      	str	r2, [r3, #0]
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <ByteStuffCopyByte>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8008828:	2302      	movs	r3, #2
 800882a:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2bf0      	cmp	r3, #240	; 0xf0
 8008830:	d002      	beq.n	8008838 <ByteStuffCopyByte+0x1c>
 8008832:	2bf1      	cmp	r3, #241	; 0xf1
 8008834:	d008      	beq.n	8008848 <ByteStuffCopyByte+0x2c>
 8008836:	e00f      	b.n	8008858 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	22f1      	movs	r2, #241	; 0xf1
 800883c:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3301      	adds	r3, #1
 8008842:	22f2      	movs	r2, #242	; 0xf2
 8008844:	701a      	strb	r2, [r3, #0]
      break;
 8008846:	e00d      	b.n	8008864 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	22f1      	movs	r2, #241	; 0xf1
 800884c:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3301      	adds	r3, #1
 8008852:	22f1      	movs	r2, #241	; 0xf1
 8008854:	701a      	strb	r2, [r3, #0]
      break;
 8008856:	e005      	b.n	8008864 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800885e:	2301      	movs	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
      break;
 8008862:	bf00      	nop
  }

  return ret;
 8008864:	68fb      	ldr	r3, [r7, #12]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <ByteStuffCopy>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e011      	b.n	80088aa <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	18d0      	adds	r0, r2, r3
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4413      	add	r3, r2
 8008892:	3304      	adds	r3, #4
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	f7ff ffc0 	bl	800881c <ByteStuffCopyByte>
 800889c:	4602      	mov	r2, r0
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d3e8      	bcc.n	8008886 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4413      	add	r3, r2
 80088ba:	22f0      	movs	r2, #240	; 0xf0
 80088bc:	701a      	strb	r2, [r3, #0]
  count++;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3301      	adds	r3, #1
 80088c2:	60bb      	str	r3, [r7, #8]
  return count;
 80088c4:	68bb      	ldr	r3, [r7, #8]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <ReverseByteStuffCopyByte2>:
  * @param  Source1 input data
  * @param  Dest the destination data
  * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
  */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	4603      	mov	r3, r0
 80088d6:	603a      	str	r2, [r7, #0]
 80088d8:	71fb      	strb	r3, [r7, #7]
 80088da:	460b      	mov	r3, r1
 80088dc:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	2bf1      	cmp	r3, #241	; 0xf1
 80088e2:	d111      	bne.n	8008908 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 80088e4:	79bb      	ldrb	r3, [r7, #6]
 80088e6:	2bf1      	cmp	r3, #241	; 0xf1
 80088e8:	d104      	bne.n	80088f4 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	22f1      	movs	r2, #241	; 0xf1
 80088ee:	701a      	strb	r2, [r3, #0]
      return 2;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e00d      	b.n	8008910 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 80088f4:	79bb      	ldrb	r3, [r7, #6]
 80088f6:	2bf2      	cmp	r3, #242	; 0xf2
 80088f8:	d104      	bne.n	8008904 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	22f0      	movs	r2, #240	; 0xf0
 80088fe:	701a      	strb	r2, [r3, #0]
      return 2;
 8008900:	2302      	movs	r3, #2
 8008902:	e005      	b.n	8008910 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8008904:	2300      	movs	r3, #0
 8008906:	e003      	b.n	8008910 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	79fa      	ldrb	r2, [r7, #7]
 800890c:	701a      	strb	r2, [r3, #0]
    return 1;
 800890e:	2301      	movs	r3, #1
  }
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <CHK_ComputeAndAdd>:
  * @brief  Compute and add checksum
  * @param  Msg pointer to the message
  * @retval None
  */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8008928:	2300      	movs	r3, #0
 800892a:	60bb      	str	r3, [r7, #8]
 800892c:	e00a      	b.n	8008944 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4413      	add	r3, r2
 8008934:	3304      	adds	r3, #4
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	7bfa      	ldrb	r2, [r7, #15]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3301      	adds	r3, #1
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d3ef      	bcc.n	800892e <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4413      	add	r3, r2
 8008954:	3304      	adds	r3, #4
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <CHK_CheckAndRemove>:
  * @brief  Compute and remove checksum
  * @param  Msg pointer to the message
  * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
  */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800897c:	2300      	movs	r3, #0
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	e00a      	b.n	8008998 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4413      	add	r3, r2
 8008988:	3304      	adds	r3, #4
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4413      	add	r3, r2
 8008990:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	3301      	adds	r3, #1
 8008996:	60bb      	str	r3, [r7, #8]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d3ef      	bcc.n	8008982 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	1e5a      	subs	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <Deserialize>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval Rebuild unsigned int variable
  */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	4413      	add	r3, r2
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80089de:	e00d      	b.n	80089fc <Deserialize+0x38>
  {
    app <<= 8;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	4413      	add	r3, r2
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1ee      	bne.n	80089e0 <Deserialize+0x1c>
  }

  return app;
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <Serialize_s32>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval None
  */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e00f      	b.n	8008a42 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	0a1b      	lsrs	r3, r3, #8
 8008a36:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d3eb      	bcc.n	8008a22 <Serialize_s32+0x12>
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	bf00      	nop
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <InfraredPD_Initialize>:
 8008a58:	2802      	cmp	r0, #2
 8008a5a:	d825      	bhi.n	8008aa8 <InfraredPD_Initialize+0x50>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d130      	bne.n	8008ac2 <InfraredPD_Initialize+0x6a>
 8008a60:	4a3e      	ldr	r2, [pc, #248]	; (8008b5c <InfraredPD_Initialize+0x104>)
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8008a72:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008a76:	f24c 2240 	movw	r2, #49728	; 0xc240
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d02e      	beq.n	8008ade <InfraredPD_Initialize+0x86>
 8008a80:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8008a84:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008a88:	400b      	ands	r3, r1
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d027      	beq.n	8008ade <InfraredPD_Initialize+0x86>
 8008a8e:	4a34      	ldr	r2, [pc, #208]	; (8008b60 <InfraredPD_Initialize+0x108>)
 8008a90:	2301      	movs	r3, #1
 8008a92:	6093      	str	r3, [r2, #8]
 8008a94:	6893      	ldr	r3, [r2, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1fc      	bne.n	8008a94 <InfraredPD_Initialize+0x3c>
 8008a9a:	4b32      	ldr	r3, [pc, #200]	; (8008b64 <InfraredPD_Initialize+0x10c>)
 8008a9c:	6013      	str	r3, [r2, #0]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <InfraredPD_Initialize+0x110>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d016      	beq.n	8008ad4 <InfraredPD_Initialize+0x7c>
 8008aa6:	e7fe      	b.n	8008aa6 <InfraredPD_Initialize+0x4e>
 8008aa8:	2803      	cmp	r0, #3
 8008aaa:	d1d9      	bne.n	8008a60 <InfraredPD_Initialize+0x8>
 8008aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ab0:	4a2e      	ldr	r2, [pc, #184]	; (8008b6c <InfraredPD_Initialize+0x114>)
 8008ab2:	6859      	ldr	r1, [r3, #4]
 8008ab4:	4291      	cmp	r1, r2
 8008ab6:	d00d      	beq.n	8008ad4 <InfraredPD_Initialize+0x7c>
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <InfraredPD_Initialize+0x118>)
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d009      	beq.n	8008ad4 <InfraredPD_Initialize+0x7c>
 8008ac0:	e7fe      	b.n	8008ac0 <InfraredPD_Initialize+0x68>
 8008ac2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ac6:	4a2b      	ldr	r2, [pc, #172]	; (8008b74 <InfraredPD_Initialize+0x11c>)
 8008ac8:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	041b      	lsls	r3, r3, #16
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d103      	bne.n	8008adc <InfraredPD_Initialize+0x84>
 8008ad4:	4b28      	ldr	r3, [pc, #160]	; (8008b78 <InfraredPD_Initialize+0x120>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	4770      	bx	lr
 8008adc:	e7fe      	b.n	8008adc <InfraredPD_Initialize+0x84>
 8008ade:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <InfraredPD_Initialize+0x124>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d3      	bne.n	8008a8e <InfraredPD_Initialize+0x36>
 8008ae6:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <InfraredPD_Initialize+0x128>)
 8008ae8:	6813      	ldr	r3, [r2, #0]
 8008aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008af2:	d021      	beq.n	8008b38 <InfraredPD_Initialize+0xe0>
 8008af4:	6813      	ldr	r3, [r2, #0]
 8008af6:	f240 4183 	movw	r1, #1155	; 0x483
 8008afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008afe:	428b      	cmp	r3, r1
 8008b00:	d01a      	beq.n	8008b38 <InfraredPD_Initialize+0xe0>
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f240 4285 	movw	r2, #1157	; 0x485
 8008b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <InfraredPD_Initialize+0xe0>
 8008b10:	4b1c      	ldr	r3, [pc, #112]	; (8008b84 <InfraredPD_Initialize+0x12c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b18:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008b1c:	d1b7      	bne.n	8008a8e <InfraredPD_Initialize+0x36>
 8008b1e:	4a1a      	ldr	r2, [pc, #104]	; (8008b88 <InfraredPD_Initialize+0x130>)
 8008b20:	2301      	movs	r3, #1
 8008b22:	6093      	str	r3, [r2, #8]
 8008b24:	6893      	ldr	r3, [r2, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1fc      	bne.n	8008b24 <InfraredPD_Initialize+0xcc>
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <InfraredPD_Initialize+0x10c>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <InfraredPD_Initialize+0x110>)
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d0ce      	beq.n	8008ad4 <InfraredPD_Initialize+0x7c>
 8008b36:	e7b6      	b.n	8008aa6 <InfraredPD_Initialize+0x4e>
 8008b38:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <InfraredPD_Initialize+0x134>)
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1fb      	bne.n	8008b40 <InfraredPD_Initialize+0xe8>
 8008b48:	4b06      	ldr	r3, [pc, #24]	; (8008b64 <InfraredPD_Initialize+0x10c>)
 8008b4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008b4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <InfraredPD_Initialize+0x110>)
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d0bd      	beq.n	8008ad4 <InfraredPD_Initialize+0x7c>
 8008b58:	e7a5      	b.n	8008aa6 <InfraredPD_Initialize+0x4e>
 8008b5a:	bf00      	nop
 8008b5c:	e0002000 	.word	0xe0002000
 8008b60:	40023000 	.word	0x40023000
 8008b64:	f407a5c2 	.word	0xf407a5c2
 8008b68:	b5e8b5cd 	.word	0xb5e8b5cd
 8008b6c:	0201e041 	.word	0x0201e041
 8008b70:	02028041 	.word	0x02028041
 8008b74:	aa550000 	.word	0xaa550000
 8008b78:	200000ec 	.word	0x200000ec
 8008b7c:	e0042000 	.word	0xe0042000
 8008b80:	5c001000 	.word	0x5c001000
 8008b84:	50081000 	.word	0x50081000
 8008b88:	4c004000 	.word	0x4c004000
 8008b8c:	58024000 	.word	0x58024000

08008b90 <InfraredPD_CreateInstance>:
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <InfraredPD_CreateInstance+0x2c>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b183      	cbz	r3, 8008bb8 <InfraredPD_CreateInstance+0x28>
 8008b96:	b510      	push	{r4, lr}
 8008b98:	4604      	mov	r4, r0
 8008b9a:	20c0      	movs	r0, #192	; 0xc0
 8008b9c:	f000 fd76 	bl	800968c <malloc>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	b138      	cbz	r0, 8008bb4 <InfraredPD_CreateInstance+0x24>
 8008ba4:	4a06      	ldr	r2, [pc, #24]	; (8008bc0 <InfraredPD_CreateInstance+0x30>)
 8008ba6:	ca03      	ldmia	r2!, {r0, r1}
 8008ba8:	f04f 0c00 	mov.w	ip, #0
 8008bac:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 8008bb0:	6020      	str	r0, [r4, #0]
 8008bb2:	6061      	str	r1, [r4, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	bd10      	pop	{r4, pc}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	4770      	bx	lr
 8008bbc:	200000ec 	.word	0x200000ec
 8008bc0:	0800a348 	.word	0x0800a348

08008bc4 <InfraredPD_Start>:
 8008bc4:	4bbc      	ldr	r3, [pc, #752]	; (8008eb8 <InfraredPD_Start+0x2f4>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b90b      	cbnz	r3, 8008bce <InfraredPD_Start+0xa>
 8008bca:	4618      	mov	r0, r3
 8008bcc:	4770      	bx	lr
 8008bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd2:	ed2d 8b04 	vpush	{d8-d9}
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	780a      	ldrb	r2, [r1, #0]
 8008bda:	1e53      	subs	r3, r2, #1
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	4604      	mov	r4, r0
 8008be0:	460d      	mov	r5, r1
 8008be2:	d917      	bls.n	8008c14 <InfraredPD_Start+0x50>
 8008be4:	2a0f      	cmp	r2, #15
 8008be6:	d846      	bhi.n	8008c76 <InfraredPD_Start+0xb2>
 8008be8:	f248 1310 	movw	r3, #33040	; 0x8110
 8008bec:	40d3      	lsrs	r3, r2
 8008bee:	07db      	lsls	r3, r3, #31
 8008bf0:	f140 81aa 	bpl.w	8008f48 <InfraredPD_Start+0x384>
 8008bf4:	884b      	ldrh	r3, [r1, #2]
 8008bf6:	2b80      	cmp	r3, #128	; 0x80
 8008bf8:	f000 81ae 	beq.w	8008f58 <InfraredPD_Start+0x394>
 8008bfc:	d90f      	bls.n	8008c1e <InfraredPD_Start+0x5a>
 8008bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c02:	f000 81ae 	beq.w	8008f62 <InfraredPD_Start+0x39e>
 8008c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c0a:	f040 817b 	bne.w	8008f04 <InfraredPD_Start+0x340>
 8008c0e:	4bab      	ldr	r3, [pc, #684]	; (8008ebc <InfraredPD_Start+0x2f8>)
 8008c10:	60a3      	str	r3, [r4, #8]
 8008c12:	e020      	b.n	8008c56 <InfraredPD_Start+0x92>
 8008c14:	884b      	ldrh	r3, [r1, #2]
 8008c16:	2b80      	cmp	r3, #128	; 0x80
 8008c18:	f000 8187 	beq.w	8008f2a <InfraredPD_Start+0x366>
 8008c1c:	d810      	bhi.n	8008c40 <InfraredPD_Start+0x7c>
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	f000 817d 	beq.w	8008f1e <InfraredPD_Start+0x35a>
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	d120      	bne.n	8008c6a <InfraredPD_Start+0xa6>
 8008c28:	4ba5      	ldr	r3, [pc, #660]	; (8008ec0 <InfraredPD_Start+0x2fc>)
 8008c2a:	60a3      	str	r3, [r4, #8]
 8008c2c:	792b      	ldrb	r3, [r5, #4]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	2b07      	cmp	r3, #7
 8008c32:	d838      	bhi.n	8008ca6 <InfraredPD_Start+0xe2>
 8008c34:	e8df f003 	tbb	[pc, r3]
 8008c38:	ac37b13d 	.word	0xac37b13d
 8008c3c:	a7373737 	.word	0xa7373737
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c44:	f000 816e 	beq.w	8008f24 <InfraredPD_Start+0x360>
 8008c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4c:	d106      	bne.n	8008c5c <InfraredPD_Start+0x98>
 8008c4e:	4b9b      	ldr	r3, [pc, #620]	; (8008ebc <InfraredPD_Start+0x2f8>)
 8008c50:	6083      	str	r3, [r0, #8]
 8008c52:	2a02      	cmp	r2, #2
 8008c54:	d1ea      	bne.n	8008c2c <InfraredPD_Start+0x68>
 8008c56:	2301      	movs	r3, #1
 8008c58:	702b      	strb	r3, [r5, #0]
 8008c5a:	e7e7      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c60:	f040 814a 	bne.w	8008ef8 <InfraredPD_Start+0x334>
 8008c64:	4b97      	ldr	r3, [pc, #604]	; (8008ec4 <InfraredPD_Start+0x300>)
 8008c66:	6083      	str	r3, [r0, #8]
 8008c68:	e7e0      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	f040 8144 	bne.w	8008ef8 <InfraredPD_Start+0x334>
 8008c70:	4b95      	ldr	r3, [pc, #596]	; (8008ec8 <InfraredPD_Start+0x304>)
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	e7da      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008c76:	2a1e      	cmp	r2, #30
 8008c78:	f040 8166 	bne.w	8008f48 <InfraredPD_Start+0x384>
 8008c7c:	884b      	ldrh	r3, [r1, #2]
 8008c7e:	2b80      	cmp	r3, #128	; 0x80
 8008c80:	f000 815d 	beq.w	8008f3e <InfraredPD_Start+0x37a>
 8008c84:	d9cb      	bls.n	8008c1e <InfraredPD_Start+0x5a>
 8008c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8a:	f000 8172 	beq.w	8008f72 <InfraredPD_Start+0x3ae>
 8008c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c92:	d0bc      	beq.n	8008c0e <InfraredPD_Start+0x4a>
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c98:	f040 812e 	bne.w	8008ef8 <InfraredPD_Start+0x334>
 8008c9c:	4b89      	ldr	r3, [pc, #548]	; (8008ec4 <InfraredPD_Start+0x300>)
 8008c9e:	6083      	str	r3, [r0, #8]
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	702b      	strb	r3, [r5, #0]
 8008ca4:	e7c2      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	ecbd 8b04 	vpop	{d8-d9}
 8008cac:	4618      	mov	r0, r3
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	4b86      	ldr	r3, [pc, #536]	; (8008ecc <InfraredPD_Start+0x308>)
 8008cb4:	eddf 7a86 	vldr	s15, [pc, #536]	; 8008ed0 <InfraredPD_Start+0x30c>
 8008cb8:	60e3      	str	r3, [r4, #12]
 8008cba:	796b      	ldrb	r3, [r5, #5]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d002      	beq.n	8008cc6 <InfraredPD_Start+0x102>
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	f040 812a 	bne.w	8008f1a <InfraredPD_Start+0x356>
 8008cc6:	ed95 7a02 	vldr	s14, [r5, #8]
 8008cca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd2:	f100 8120 	bmi.w	8008f16 <InfraredPD_Start+0x352>
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce2:	f300 8118 	bgt.w	8008f16 <InfraredPD_Start+0x352>
 8008ce6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008cea:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8008ed4 <InfraredPD_Start+0x310>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bfbc      	itt	lt
 8008cf2:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8008cf6:	8073      	strhlt	r3, [r6, #2]
 8008cf8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	bfbc      	itt	lt
 8008d00:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8008d04:	80b3      	strhlt	r3, [r6, #4]
 8008d06:	88eb      	ldrh	r3, [r5, #6]
 8008d08:	ee08 3a10 	vmov	s16, r3
 8008d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008d10:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008d14:	edd4 6a02 	vldr	s13, [r4, #8]
 8008d18:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008d1c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008d20:	ed84 8a05 	vstr	s16, [r4, #20]
 8008d24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d28:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8008d2c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8008d30:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8008d34:	ed84 7a04 	vstr	s14, [r4, #16]
 8008d38:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d3c:	ed84 0a06 	vstr	s0, [r4, #24]
 8008d40:	f001 f9b0 	bl	800a0a4 <ceilf>
 8008d44:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8008d4e:	ee10 3a10 	vmov	r3, s0
 8008d52:	b298      	uxth	r0, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	83a0      	strh	r0, [r4, #28]
 8008d58:	6223      	str	r3, [r4, #32]
 8008d5a:	7833      	ldrb	r3, [r6, #0]
 8008d5c:	b313      	cbz	r3, 8008da4 <InfraredPD_Start+0x1e0>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	f000 80e6 	beq.w	8008f30 <InfraredPD_Start+0x36c>
 8008d64:	7873      	ldrb	r3, [r6, #1]
 8008d66:	b1eb      	cbz	r3, 8008da4 <InfraredPD_Start+0x1e0>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008d6e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f000 8100 	beq.w	8008f78 <InfraredPD_Start+0x3b4>
 8008d78:	0080      	lsls	r0, r0, #2
 8008d7a:	f000 fc87 	bl	800968c <malloc>
 8008d7e:	6460      	str	r0, [r4, #68]	; 0x44
 8008d80:	b980      	cbnz	r0, 8008da4 <InfraredPD_Start+0x1e0>
 8008d82:	2306      	movs	r3, #6
 8008d84:	e790      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008d86:	4b54      	ldr	r3, [pc, #336]	; (8008ed8 <InfraredPD_Start+0x314>)
 8008d88:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008edc <InfraredPD_Start+0x318>
 8008d8c:	60e3      	str	r3, [r4, #12]
 8008d8e:	e794      	b.n	8008cba <InfraredPD_Start+0xf6>
 8008d90:	4b53      	ldr	r3, [pc, #332]	; (8008ee0 <InfraredPD_Start+0x31c>)
 8008d92:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008ee4 <InfraredPD_Start+0x320>
 8008d96:	60e3      	str	r3, [r4, #12]
 8008d98:	e78f      	b.n	8008cba <InfraredPD_Start+0xf6>
 8008d9a:	4b53      	ldr	r3, [pc, #332]	; (8008ee8 <InfraredPD_Start+0x324>)
 8008d9c:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008eec <InfraredPD_Start+0x328>
 8008da0:	60e3      	str	r3, [r4, #12]
 8008da2:	e78a      	b.n	8008cba <InfraredPD_Start+0xf6>
 8008da4:	2300      	movs	r3, #0
 8008da6:	7828      	ldrb	r0, [r5, #0]
 8008da8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8008dac:	2301      	movs	r3, #1
 8008dae:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8008db2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8008db6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008dba:	0040      	lsls	r0, r0, #1
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 8008dc2:	f000 80c3 	beq.w	8008f4c <InfraredPD_Start+0x388>
 8008dc6:	0080      	lsls	r0, r0, #2
 8008dc8:	f000 fc60 	bl	800968c <malloc>
 8008dcc:	6520      	str	r0, [r4, #80]	; 0x50
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f000 80d7 	beq.w	8008f82 <InfraredPD_Start+0x3be>
 8008dd4:	f04f 0800 	mov.w	r8, #0
 8008dd8:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8008ddc:	2300      	movs	r3, #0
 8008dde:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008de0:	88b3      	ldrh	r3, [r6, #4]
 8008de2:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8008ef0 <InfraredPD_Start+0x32c>
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dee:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8008df2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008df6:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8008dfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008dfe:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8008e02:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 8008e06:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 8008e0a:	782f      	ldrb	r7, [r5, #0]
 8008e0c:	ee07 7a90 	vmov	s15, r7
 8008e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e14:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008e18:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008e1c:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8008e20:	eeb1 9a67 	vneg.f32	s18, s15
 8008e24:	f001 f8fa 	bl	800a01c <expf>
 8008e28:	eddf 7a32 	vldr	s15, [pc, #200]	; 8008ef4 <InfraredPD_Start+0x330>
 8008e2c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8008e30:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8008e34:	ee29 0a27 	vmul.f32	s0, s18, s15
 8008e38:	f001 f8f0 	bl	800a01c <expf>
 8008e3c:	8873      	ldrh	r3, [r6, #2]
 8008e3e:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	2201      	movs	r2, #1
 8008e48:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8008e4c:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8008e50:	b2ba      	uxth	r2, r7
 8008e52:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 8008e56:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8008e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008e62:	0049      	lsls	r1, r1, #1
 8008e64:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8008e68:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8008e6c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8008e70:	00c9      	lsls	r1, r1, #3
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8008e78:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8008e7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e80:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 8008e84:	ee38 0a40 	vsub.f32	s0, s16, s0
 8008e88:	ecbd 8b04 	vpop	{d8-d9}
 8008e8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008e90:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8008e94:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8008e98:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8008e9c:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8008ea0:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8008ea4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8008ea8:	6830      	ldr	r0, [r6, #0]
 8008eaa:	6871      	ldr	r1, [r6, #4]
 8008eac:	4643      	mov	r3, r8
 8008eae:	34b8      	adds	r4, #184	; 0xb8
 8008eb0:	c403      	stmia	r4!, {r0, r1}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	200000ec 	.word	0x200000ec
 8008ebc:	41680000 	.word	0x41680000
 8008ec0:	42006666 	.word	0x42006666
 8008ec4:	419b3333 	.word	0x419b3333
 8008ec8:	42c6999a 	.word	0x42c6999a
 8008ecc:	43168000 	.word	0x43168000
 8008ed0:	3e1a1cad 	.word	0x3e1a1cad
 8008ed4:	3f933333 	.word	0x3f933333
 8008ed8:	4254cccd 	.word	0x4254cccd
 8008edc:	3d59e83f 	.word	0x3d59e83f
 8008ee0:	42966666 	.word	0x42966666
 8008ee4:	3d9a0275 	.word	0x3d9a0275
 8008ee8:	42d4cccd 	.word	0x42d4cccd
 8008eec:	3dd9e83f 	.word	0x3dd9e83f
 8008ef0:	4048e093 	.word	0x4048e093
 8008ef4:	3ea0da75 	.word	0x3ea0da75
 8008ef8:	ecbd 8b04 	vpop	{d8-d9}
 8008efc:	2302      	movs	r3, #2
 8008efe:	4618      	mov	r0, r3
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f08:	d1f6      	bne.n	8008ef8 <InfraredPD_Start+0x334>
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <InfraredPD_Start+0x3d0>)
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	2a04      	cmp	r2, #4
 8008f10:	f63f aec6 	bhi.w	8008ca0 <InfraredPD_Start+0xdc>
 8008f14:	e68a      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f16:	2305      	movs	r3, #5
 8008f18:	e6c6      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	e6c4      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008f1e:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <InfraredPD_Start+0x3d4>)
 8008f20:	60a3      	str	r3, [r4, #8]
 8008f22:	e683      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f24:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <InfraredPD_Start+0x3d8>)
 8008f26:	6083      	str	r3, [r0, #8]
 8008f28:	e680      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <InfraredPD_Start+0x3dc>)
 8008f2c:	6083      	str	r3, [r0, #8]
 8008f2e:	e67d      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f30:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008fa4 <InfraredPD_Start+0x3e0>
 8008f34:	ee28 7a07 	vmul.f32	s14, s16, s14
 8008f38:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8008f3c:	e712      	b.n	8008d64 <InfraredPD_Start+0x1a0>
 8008f3e:	4b18      	ldr	r3, [pc, #96]	; (8008fa0 <InfraredPD_Start+0x3dc>)
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	2308      	movs	r3, #8
 8008f44:	702b      	strb	r3, [r5, #0]
 8008f46:	e671      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e6ad      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008f4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008f4e:	f000 fba5 	bl	800969c <free>
 8008f52:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8008f56:	e736      	b.n	8008dc6 <InfraredPD_Start+0x202>
 8008f58:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <InfraredPD_Start+0x3dc>)
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	2a08      	cmp	r2, #8
 8008f5e:	d8f0      	bhi.n	8008f42 <InfraredPD_Start+0x37e>
 8008f60:	e664      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f62:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <InfraredPD_Start+0x3d8>)
 8008f64:	60a3      	str	r3, [r4, #8]
 8008f66:	2a02      	cmp	r2, #2
 8008f68:	f67f ae60 	bls.w	8008c2c <InfraredPD_Start+0x68>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	702b      	strb	r3, [r5, #0]
 8008f70:	e65c      	b.n	8008c2c <InfraredPD_Start+0x68>
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <InfraredPD_Start+0x3d8>)
 8008f74:	6083      	str	r3, [r0, #8]
 8008f76:	e7f9      	b.n	8008f6c <InfraredPD_Start+0x3a8>
 8008f78:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008f7a:	f000 fb8f 	bl	800969c <free>
 8008f7e:	8ba0      	ldrh	r0, [r4, #28]
 8008f80:	e6fa      	b.n	8008d78 <InfraredPD_Start+0x1b4>
 8008f82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008f84:	b118      	cbz	r0, 8008f8e <InfraredPD_Start+0x3ca>
 8008f86:	f000 fb89 	bl	800969c <free>
 8008f8a:	2307      	movs	r3, #7
 8008f8c:	e68c      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008f8e:	2307      	movs	r3, #7
 8008f90:	e68a      	b.n	8008ca8 <InfraredPD_Start+0xe4>
 8008f92:	bf00      	nop
 8008f94:	419b3333 	.word	0x419b3333
 8008f98:	42560000 	.word	0x42560000
 8008f9c:	41873333 	.word	0x41873333
 8008fa0:	41b00000 	.word	0x41b00000
 8008fa4:	3223b1a8 	.word	0x3223b1a8

08008fa8 <InfraredPD_Update>:
 8008fa8:	4bba      	ldr	r3, [pc, #744]	; (8009294 <InfraredPD_Update+0x2ec>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b903      	cbnz	r3, 8008fb0 <InfraredPD_Update+0x8>
 8008fae:	4770      	bx	lr
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	ed2d 8b02 	vpush	{d8}
 8008fb8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8008fbc:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008fc6:	fb16 f303 	smulbb	r3, r6, r3
 8008fca:	ee07 2a10 	vmov	s14, r2
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fda:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8008fde:	ed80 7a00 	vstr	s14, [r0]
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	edc0 7a01 	vstr	s15, [r0, #4]
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	d067      	beq.n	80090be <InfraredPD_Update+0x116>
 8008fee:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d168      	bne.n	80090c8 <InfraredPD_Update+0x120>
 8008ff6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 8303 	bne.w	8009606 <InfraredPD_Update+0x65e>
 8009000:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8009004:	6a07      	ldr	r7, [r0, #32]
 8009006:	3301      	adds	r3, #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800900e:	3a01      	subs	r2, #1
 8009010:	0090      	lsls	r0, r2, #2
 8009012:	2f01      	cmp	r7, #1
 8009014:	d068      	beq.n	80090e8 <InfraredPD_Update+0x140>
 8009016:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8009298 <InfraredPD_Update+0x2f0>
 800901a:	eeb0 6ae7 	vabs.f32	s12, s15
 800901e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8009022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009026:	d57b      	bpl.n	8009120 <InfraredPD_Update+0x178>
 8009028:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 800902c:	2a00      	cmp	r2, #0
 800902e:	f000 81a8 	beq.w	8009382 <InfraredPD_Update+0x3da>
 8009032:	2a01      	cmp	r2, #1
 8009034:	f000 8265 	beq.w	8009502 <InfraredPD_Update+0x55a>
 8009038:	2a02      	cmp	r2, #2
 800903a:	f000 8246 	beq.w	80094ca <InfraredPD_Update+0x522>
 800903e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009042:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8009046:	2a00      	cmp	r2, #0
 8009048:	f000 80a6 	beq.w	8009198 <InfraredPD_Update+0x1f0>
 800904c:	e070      	b.n	8009130 <InfraredPD_Update+0x188>
 800904e:	2f01      	cmp	r7, #1
 8009050:	f000 82c2 	beq.w	80095d8 <InfraredPD_Update+0x630>
 8009054:	2300      	movs	r3, #0
 8009056:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 800905a:	2f00      	cmp	r7, #0
 800905c:	f040 82d0 	bne.w	8009600 <InfraredPD_Update+0x658>
 8009060:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8009064:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8009068:	3301      	adds	r3, #1
 800906a:	b29b      	uxth	r3, r3
 800906c:	429a      	cmp	r2, r3
 800906e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009072:	d10b      	bne.n	800908c <InfraredPD_Update+0xe4>
 8009074:	2300      	movs	r3, #0
 8009076:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800907a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800907e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009082:	b91b      	cbnz	r3, 800908c <InfraredPD_Update+0xe4>
 8009084:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009088:	2300      	movs	r3, #0
 800908a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800908c:	ee07 6a90 	vmov	s15, r6
 8009090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009094:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009098:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800909c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80090a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090a4:	ee17 3a10 	vmov	r3, s14
 80090a8:	802b      	strh	r3, [r5, #0]
 80090aa:	ee17 3a90 	vmov	r3, s15
 80090ae:	806b      	strh	r3, [r5, #2]
 80090b0:	2300      	movs	r3, #0
 80090b2:	716b      	strb	r3, [r5, #5]
 80090b4:	712f      	strb	r7, [r5, #4]
 80090b6:	2f01      	cmp	r7, #1
 80090b8:	d101      	bne.n	80090be <InfraredPD_Update+0x116>
 80090ba:	2301      	movs	r3, #1
 80090bc:	716b      	strb	r3, [r5, #5]
 80090be:	b003      	add	sp, #12
 80090c0:	ecbd 8b02 	vpop	{d8}
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	2200      	movs	r2, #0
 80090ca:	2301      	movs	r3, #1
 80090cc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80090d0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80090d4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80090d8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80090dc:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 80090e0:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 80090e4:	6203      	str	r3, [r0, #32]
 80090e6:	4610      	mov	r0, r2
 80090e8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 80090ec:	b182      	cbz	r2, 8009110 <InfraredPD_Update+0x168>
 80090ee:	2a01      	cmp	r2, #1
 80090f0:	f000 81e8 	beq.w	80094c4 <InfraredPD_Update+0x51c>
 80090f4:	2a02      	cmp	r2, #2
 80090f6:	d10b      	bne.n	8009110 <InfraredPD_Update+0x168>
 80090f8:	ed9f 6a68 	vldr	s12, [pc, #416]	; 800929c <InfraredPD_Update+0x2f4>
 80090fc:	eddf 6a68 	vldr	s13, [pc, #416]	; 80092a0 <InfraredPD_Update+0x2f8>
 8009100:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009104:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8009108:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800910c:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8009110:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8009114:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8009118:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 800911c:	2701      	movs	r7, #1
 800911e:	e77a      	b.n	8009016 <InfraredPD_Update+0x6e>
 8009120:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8009124:	b3b2      	cbz	r2, 8009194 <InfraredPD_Update+0x1ec>
 8009126:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 800912a:	b39a      	cbz	r2, 8009194 <InfraredPD_Update+0x1ec>
 800912c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009130:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8009134:	8ba1      	ldrh	r1, [r4, #28]
 8009136:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800913a:	3201      	adds	r2, #1
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	428a      	cmp	r2, r1
 8009140:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8009144:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8009148:	bf08      	it	eq
 800914a:	2200      	moveq	r2, #0
 800914c:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8009150:	bf08      	it	eq
 8009152:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8009156:	2901      	cmp	r1, #1
 8009158:	f240 81ce 	bls.w	80094f8 <InfraredPD_Update+0x550>
 800915c:	42b9      	cmp	r1, r7
 800915e:	f240 81df 	bls.w	8009520 <InfraredPD_Update+0x578>
 8009162:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80092a4 <InfraredPD_Update+0x2fc>
 8009166:	b167      	cbz	r7, 8009182 <InfraredPD_Update+0x1da>
 8009168:	2200      	movs	r2, #0
 800916a:	4611      	mov	r1, r2
 800916c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8009170:	3201      	adds	r2, #1
 8009172:	edd1 7a00 	vldr	s15, [r1]
 8009176:	b292      	uxth	r2, r2
 8009178:	42ba      	cmp	r2, r7
 800917a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800917e:	4611      	mov	r1, r2
 8009180:	d3f4      	bcc.n	800916c <InfraredPD_Update+0x1c4>
 8009182:	ee07 7a90 	vmov	s15, r7
 8009186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800918a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800918e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009192:	e003      	b.n	800919c <InfraredPD_Update+0x1f4>
 8009194:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009198:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800919c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800919e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80091a2:	180a      	adds	r2, r1, r0
 80091a4:	edc2 7a00 	vstr	s15, [r2]
 80091a8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80091ac:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d07b      	beq.n	80092ac <InfraredPD_Update+0x304>
 80091b4:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 80091b8:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 80091bc:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 80091c0:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 80091c4:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 80091c8:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 80091cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091d0:	ee37 8a46 	vsub.f32	s16, s14, s12
 80091d4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80091d8:	ee28 8a05 	vmul.f32	s16, s16, s10
 80091dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091e0:	eea6 8a28 	vfma.f32	s16, s12, s17
 80091e4:	eee8 7aa6 	vfma.f32	s15, s17, s13
 80091e8:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 80091ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 80091f0:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 80091f4:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	f000 80b4 	beq.w	8009366 <InfraredPD_Update+0x3be>
 80091fe:	2f01      	cmp	r7, #1
 8009200:	d114      	bne.n	800922c <InfraredPD_Update+0x284>
 8009202:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8009206:	eef0 6ac8 	vabs.f32	s13, s16
 800920a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	f140 80c0 	bpl.w	8009396 <InfraredPD_Update+0x3ee>
 8009216:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800921a:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 800921e:	3301      	adds	r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	429a      	cmp	r2, r3
 8009224:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8009228:	f240 8146 	bls.w	80094b8 <InfraredPD_Update+0x510>
 800922c:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8009230:	f1bc 0f00 	cmp.w	ip, #0
 8009234:	d108      	bne.n	8009248 <InfraredPD_Update+0x2a0>
 8009236:	f1b8 0f03 	cmp.w	r8, #3
 800923a:	d809      	bhi.n	8009250 <InfraredPD_Update+0x2a8>
 800923c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8009240:	010d011c 	.word	0x010d011c
 8009244:	00af00fd 	.word	0x00af00fd
 8009248:	f1b8 0f00 	cmp.w	r8, #0
 800924c:	f43f af17 	beq.w	800907e <InfraredPD_Update+0xd6>
 8009250:	ee07 6a90 	vmov	s15, r6
 8009254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009258:	f1b8 0f02 	cmp.w	r8, #2
 800925c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009260:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8009264:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800926c:	ee17 3a10 	vmov	r3, s14
 8009270:	802b      	strh	r3, [r5, #0]
 8009272:	ee17 3a90 	vmov	r3, s15
 8009276:	806b      	strh	r3, [r5, #2]
 8009278:	f43f af1a 	beq.w	80090b0 <InfraredPD_Update+0x108>
 800927c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8009280:	f1b8 0f01 	cmp.w	r8, #1
 8009284:	f000 8080 	beq.w	8009388 <InfraredPD_Update+0x3e0>
 8009288:	796b      	ldrb	r3, [r5, #5]
 800928a:	712f      	strb	r7, [r5, #4]
 800928c:	2b01      	cmp	r3, #1
 800928e:	f47f af12 	bne.w	80090b6 <InfraredPD_Update+0x10e>
 8009292:	e712      	b.n	80090ba <InfraredPD_Update+0x112>
 8009294:	200000ec 	.word	0x200000ec
 8009298:	46f05e00 	.word	0x46f05e00
 800929c:	3c23d70a 	.word	0x3c23d70a
 80092a0:	43889333 	.word	0x43889333
 80092a4:	00000000 	.word	0x00000000
 80092a8:	7fc00000 	.word	0x7fc00000
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 80092b2:	f1bc 0f00 	cmp.w	ip, #0
 80092b6:	d169      	bne.n	800938c <InfraredPD_Update+0x3e4>
 80092b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80092ba:	65a2      	str	r2, [r4, #88]	; 0x58
 80092bc:	b1d3      	cbz	r3, 80092f4 <InfraredPD_Update+0x34c>
 80092be:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 80092a4 <InfraredPD_Update+0x2fc>
 80092c2:	2200      	movs	r2, #0
 80092c4:	3201      	adds	r2, #1
 80092c6:	ecb1 7a01 	vldmia	r1!, {s14}
 80092ca:	b290      	uxth	r0, r2
 80092cc:	4283      	cmp	r3, r0
 80092ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d2:	d8f7      	bhi.n	80092c4 <InfraredPD_Update+0x31c>
 80092d4:	ee07 3a10 	vmov	s14, r3
 80092d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80092dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092e0:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 80092e4:	f1bc 0f00 	cmp.w	ip, #0
 80092e8:	d00a      	beq.n	8009300 <InfraredPD_Update+0x358>
 80092ea:	f04f 0c00 	mov.w	ip, #0
 80092ee:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 80092f2:	e75f      	b.n	80091b4 <InfraredPD_Update+0x20c>
 80092f4:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 80092a8 <InfraredPD_Update+0x300>
 80092f8:	eeb0 7a67 	vmov.f32	s14, s15
 80092fc:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8009300:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8009304:	2b00      	cmp	r3, #0
 8009306:	f040 80c8 	bne.w	800949a <InfraredPD_Update+0x4f2>
 800930a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800930e:	b17a      	cbz	r2, 8009330 <InfraredPD_Update+0x388>
 8009310:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8009314:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8009318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800931c:	eef1 6a66 	vneg.f32	s13, s13
 8009320:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	f340 8115 	ble.w	8009556 <InfraredPD_Update+0x5ae>
 800932c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009330:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009334:	2b00      	cmp	r3, #0
 8009336:	f47f af3d 	bne.w	80091b4 <InfraredPD_Update+0x20c>
 800933a:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 800933e:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8009342:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934e:	f340 8127 	ble.w	80095a0 <InfraredPD_Update+0x5f8>
 8009352:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8009356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800935a:	2301      	movs	r3, #1
 800935c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009360:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8009364:	e726      	b.n	80091b4 <InfraredPD_Update+0x20c>
 8009366:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800936a:	eef0 6ac8 	vabs.f32	s13, s16
 800936e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009376:	f77f af59 	ble.w	800922c <InfraredPD_Update+0x284>
 800937a:	2701      	movs	r7, #1
 800937c:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8009380:	e754      	b.n	800922c <InfraredPD_Update+0x284>
 8009382:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8009386:	e707      	b.n	8009198 <InfraredPD_Update+0x1f0>
 8009388:	712f      	strb	r7, [r5, #4]
 800938a:	e696      	b.n	80090ba <InfraredPD_Update+0x112>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d196      	bne.n	80092be <InfraredPD_Update+0x316>
 8009390:	4ba5      	ldr	r3, [pc, #660]	; (8009628 <InfraredPD_Update+0x680>)
 8009392:	6563      	str	r3, [r4, #84]	; 0x54
 8009394:	e7a9      	b.n	80092ea <InfraredPD_Update+0x342>
 8009396:	2300      	movs	r3, #0
 8009398:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 800939c:	e746      	b.n	800922c <InfraredPD_Update+0x284>
 800939e:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 80093a2:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 80093a6:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80093aa:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80093ae:	f109 0901 	add.w	r9, r9, #1
 80093b2:	fa1f f989 	uxth.w	r9, r9
 80093b6:	ee17 0a90 	vmov	r0, s15
 80093ba:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 80093be:	ed8d 7a01 	vstr	s14, [sp, #4]
 80093c2:	f7f7 f9eb 	bl	800079c <__aeabi_f2d>
 80093c6:	4682      	mov	sl, r0
 80093c8:	9801      	ldr	r0, [sp, #4]
 80093ca:	468b      	mov	fp, r1
 80093cc:	f7f7 f9e6 	bl	800079c <__aeabi_f2d>
 80093d0:	a393      	add	r3, pc, #588	; (adr r3, 8009620 <InfraredPD_Update+0x678>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f6 ff53 	bl	8000280 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4650      	mov	r0, sl
 80093e0:	4659      	mov	r1, fp
 80093e2:	f7f7 fa93 	bl	800090c <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f47f ae44 	bne.w	8009074 <InfraredPD_Update+0xcc>
 80093ec:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80093f0:	454b      	cmp	r3, r9
 80093f2:	f43f ae3f 	beq.w	8009074 <InfraredPD_Update+0xcc>
 80093f6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80093fa:	ed9d 7a01 	vldr	s14, [sp, #4]
 80093fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009406:	d505      	bpl.n	8009414 <InfraredPD_Update+0x46c>
 8009408:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 800940c:	f04f 0801 	mov.w	r8, #1
 8009410:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8009414:	ee07 6a90 	vmov	s15, r6
 8009418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941c:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8009420:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8009424:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8009428:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800942c:	ee16 3a90 	vmov	r3, s13
 8009430:	802b      	strh	r3, [r5, #0]
 8009432:	ee17 3a10 	vmov	r3, s14
 8009436:	806b      	strh	r3, [r5, #2]
 8009438:	e720      	b.n	800927c <InfraredPD_Update+0x2d4>
 800943a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800943e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8009442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944a:	f57f ae00 	bpl.w	800904e <InfraredPD_Update+0xa6>
 800944e:	2300      	movs	r3, #0
 8009450:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009454:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8009458:	e611      	b.n	800907e <InfraredPD_Update+0xd6>
 800945a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800945e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8009462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946a:	d57b      	bpl.n	8009564 <InfraredPD_Update+0x5bc>
 800946c:	2300      	movs	r3, #0
 800946e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009472:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8009476:	e602      	b.n	800907e <InfraredPD_Update+0xd6>
 8009478:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800947c:	ee78 6ae7 	vsub.f32	s13, s17, s15
 8009480:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009488:	f340 8081 	ble.w	800958e <InfraredPD_Update+0x5e6>
 800948c:	f04f 0803 	mov.w	r8, #3
 8009490:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8009494:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8009498:	e7bc      	b.n	8009414 <InfraredPD_Update+0x46c>
 800949a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800949e:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 80094a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	d552      	bpl.n	8009556 <InfraredPD_Update+0x5ae>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80094b6:	e73b      	b.n	8009330 <InfraredPD_Update+0x388>
 80094b8:	2700      	movs	r7, #0
 80094ba:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 80094be:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 80094c2:	e6b3      	b.n	800922c <InfraredPD_Update+0x284>
 80094c4:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 80094c8:	e622      	b.n	8009110 <InfraredPD_Update+0x168>
 80094ca:	eddf 5a58 	vldr	s11, [pc, #352]	; 800962c <InfraredPD_Update+0x684>
 80094ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009630 <InfraredPD_Update+0x688>
 80094d2:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 80094d6:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 80094da:	eee7 6a25 	vfma.f32	s13, s14, s11
 80094de:	eeb0 7a46 	vmov.f32	s14, s12
 80094e2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80094e6:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 80094ea:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 80094ee:	eee5 7a07 	vfma.f32	s15, s10, s14
 80094f2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80094f6:	e5a4      	b.n	8009042 <InfraredPD_Update+0x9a>
 80094f8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80094fc:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009500:	e64c      	b.n	800919c <InfraredPD_Update+0x1f4>
 8009502:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8009506:	edd4 6a05 	vldr	s13, [r4, #20]
 800950a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800962c <InfraredPD_Update+0x684>
 800950e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009512:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009516:	eee7 7a26 	vfma.f32	s15, s14, s13
 800951a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800951e:	e590      	b.n	8009042 <InfraredPD_Update+0x9a>
 8009520:	1e4f      	subs	r7, r1, #1
 8009522:	4662      	mov	r2, ip
 8009524:	fa1f fc87 	uxth.w	ip, r7
 8009528:	2700      	movs	r7, #0
 800952a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800952e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009634 <InfraredPD_Update+0x68c>
 8009532:	1d17      	adds	r7, r2, #4
 8009534:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8009538:	ecf2 7a01 	vldmia	r2!, {s15}
 800953c:	4297      	cmp	r7, r2
 800953e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009542:	d1f9      	bne.n	8009538 <InfraredPD_Update+0x590>
 8009544:	ee07 1a90 	vmov	s15, r1
 8009548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009550:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009554:	e622      	b.n	800919c <InfraredPD_Update+0x1f4>
 8009556:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800955a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8009562:	e6e5      	b.n	8009330 <InfraredPD_Update+0x388>
 8009564:	bba7      	cbnz	r7, 80095d0 <InfraredPD_Update+0x628>
 8009566:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800956a:	b38b      	cbz	r3, 80095d0 <InfraredPD_Update+0x628>
 800956c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8009570:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 8009574:	3301      	adds	r3, #1
 8009576:	b29b      	uxth	r3, r3
 8009578:	429a      	cmp	r2, r3
 800957a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800957e:	f47f af49 	bne.w	8009414 <InfraredPD_Update+0x46c>
 8009582:	2302      	movs	r3, #2
 8009584:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009588:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 800958c:	e57e      	b.n	800908c <InfraredPD_Update+0xe4>
 800958e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8009592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959a:	f57f ad70 	bpl.w	800907e <InfraredPD_Update+0xd6>
 800959e:	e735      	b.n	800940c <InfraredPD_Update+0x464>
 80095a0:	eef1 7a67 	vneg.f32	s15, s15
 80095a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ac:	f57f ae02 	bpl.w	80091b4 <InfraredPD_Update+0x20c>
 80095b0:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80095b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	f77f adfa 	ble.w	80091b4 <InfraredPD_Update+0x20c>
 80095c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095c4:	2301      	movs	r3, #1
 80095c6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80095ca:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 80095ce:	e5f1      	b.n	80091b4 <InfraredPD_Update+0x20c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80095d6:	e71d      	b.n	8009414 <InfraredPD_Update+0x46c>
 80095d8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 80095dc:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 80095e0:	3301      	adds	r3, #1
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2200      	movs	r2, #0
 80095e6:	4299      	cmp	r1, r3
 80095e8:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 80095ec:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80095f0:	f47f ad4c 	bne.w	800908c <InfraredPD_Update+0xe4>
 80095f4:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 80095f8:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 80095fc:	46b8      	mov	r8, r7
 80095fe:	e709      	b.n	8009414 <InfraredPD_Update+0x46c>
 8009600:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009604:	e542      	b.n	800908c <InfraredPD_Update+0xe4>
 8009606:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800960a:	6a07      	ldr	r7, [r0, #32]
 800960c:	3301      	adds	r3, #1
 800960e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009612:	fa12 f283 	uxtah	r2, r2, r3
 8009616:	3701      	adds	r7, #1
 8009618:	6207      	str	r7, [r0, #32]
 800961a:	b29b      	uxth	r3, r3
 800961c:	0090      	lsls	r0, r2, #2
 800961e:	e4f8      	b.n	8009012 <InfraredPD_Update+0x6a>
 8009620:	cccccccd 	.word	0xcccccccd
 8009624:	3feccccc 	.word	0x3feccccc
 8009628:	7fc00000 	.word	0x7fc00000
 800962c:	3c23d70a 	.word	0x3c23d70a
 8009630:	43889333 	.word	0x43889333
 8009634:	00000000 	.word	0x00000000

08009638 <InfraredPD_GetLibVersion>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4b12      	ldr	r3, [pc, #72]	; (8009684 <InfraredPD_GetLibVersion+0x4c>)
 800963c:	781e      	ldrb	r6, [r3, #0]
 800963e:	b08a      	sub	sp, #40	; 0x28
 8009640:	b1ee      	cbz	r6, 800967e <InfraredPD_GetLibVersion+0x46>
 8009642:	4d11      	ldr	r5, [pc, #68]	; (8009688 <InfraredPD_GetLibVersion+0x50>)
 8009644:	4684      	mov	ip, r0
 8009646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009648:	f10d 0e04 	add.w	lr, sp, #4
 800964c:	4674      	mov	r4, lr
 800964e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009652:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009656:	f84e 0b04 	str.w	r0, [lr], #4
 800965a:	f88e 1000 	strb.w	r1, [lr]
 800965e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009660:	f8cc 0000 	str.w	r0, [ip]
 8009664:	f8cc 2008 	str.w	r2, [ip, #8]
 8009668:	6820      	ldr	r0, [r4, #0]
 800966a:	7922      	ldrb	r2, [r4, #4]
 800966c:	f8cc 1004 	str.w	r1, [ip, #4]
 8009670:	2614      	movs	r6, #20
 8009672:	f8cc 300c 	str.w	r3, [ip, #12]
 8009676:	f8cc 0010 	str.w	r0, [ip, #16]
 800967a:	f88c 2014 	strb.w	r2, [ip, #20]
 800967e:	4630      	mov	r0, r6
 8009680:	b00a      	add	sp, #40	; 0x28
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	200000ec 	.word	0x200000ec
 8009688:	0800a350 	.word	0x0800a350

0800968c <malloc>:
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <malloc+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f000 b82b 	b.w	80096ec <_malloc_r>
 8009696:	bf00      	nop
 8009698:	200000cc 	.word	0x200000cc

0800969c <free>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <free+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f000 b927 	b.w	80098f4 <_free_r>
 80096a6:	bf00      	nop
 80096a8:	200000cc 	.word	0x200000cc

080096ac <sbrk_aligned>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4e0e      	ldr	r6, [pc, #56]	; (80096e8 <sbrk_aligned+0x3c>)
 80096b0:	460c      	mov	r4, r1
 80096b2:	6831      	ldr	r1, [r6, #0]
 80096b4:	4605      	mov	r5, r0
 80096b6:	b911      	cbnz	r1, 80096be <sbrk_aligned+0x12>
 80096b8:	f000 f8e0 	bl	800987c <_sbrk_r>
 80096bc:	6030      	str	r0, [r6, #0]
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f8db 	bl	800987c <_sbrk_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d00a      	beq.n	80096e0 <sbrk_aligned+0x34>
 80096ca:	1cc4      	adds	r4, r0, #3
 80096cc:	f024 0403 	bic.w	r4, r4, #3
 80096d0:	42a0      	cmp	r0, r4
 80096d2:	d007      	beq.n	80096e4 <sbrk_aligned+0x38>
 80096d4:	1a21      	subs	r1, r4, r0
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 f8d0 	bl	800987c <_sbrk_r>
 80096dc:	3001      	adds	r0, #1
 80096de:	d101      	bne.n	80096e4 <sbrk_aligned+0x38>
 80096e0:	f04f 34ff 	mov.w	r4, #4294967295
 80096e4:	4620      	mov	r0, r4
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	20000ad4 	.word	0x20000ad4

080096ec <_malloc_r>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	1ccd      	adds	r5, r1, #3
 80096f2:	f025 0503 	bic.w	r5, r5, #3
 80096f6:	3508      	adds	r5, #8
 80096f8:	2d0c      	cmp	r5, #12
 80096fa:	bf38      	it	cc
 80096fc:	250c      	movcc	r5, #12
 80096fe:	2d00      	cmp	r5, #0
 8009700:	4607      	mov	r7, r0
 8009702:	db01      	blt.n	8009708 <_malloc_r+0x1c>
 8009704:	42a9      	cmp	r1, r5
 8009706:	d905      	bls.n	8009714 <_malloc_r+0x28>
 8009708:	230c      	movs	r3, #12
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	2600      	movs	r6, #0
 800970e:	4630      	mov	r0, r6
 8009710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097e8 <_malloc_r+0xfc>
 8009718:	f000 f868 	bl	80097ec <__malloc_lock>
 800971c:	f8d8 3000 	ldr.w	r3, [r8]
 8009720:	461c      	mov	r4, r3
 8009722:	bb5c      	cbnz	r4, 800977c <_malloc_r+0x90>
 8009724:	4629      	mov	r1, r5
 8009726:	4638      	mov	r0, r7
 8009728:	f7ff ffc0 	bl	80096ac <sbrk_aligned>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	4604      	mov	r4, r0
 8009730:	d155      	bne.n	80097de <_malloc_r+0xf2>
 8009732:	f8d8 4000 	ldr.w	r4, [r8]
 8009736:	4626      	mov	r6, r4
 8009738:	2e00      	cmp	r6, #0
 800973a:	d145      	bne.n	80097c8 <_malloc_r+0xdc>
 800973c:	2c00      	cmp	r4, #0
 800973e:	d048      	beq.n	80097d2 <_malloc_r+0xe6>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	4631      	mov	r1, r6
 8009744:	4638      	mov	r0, r7
 8009746:	eb04 0903 	add.w	r9, r4, r3
 800974a:	f000 f897 	bl	800987c <_sbrk_r>
 800974e:	4581      	cmp	r9, r0
 8009750:	d13f      	bne.n	80097d2 <_malloc_r+0xe6>
 8009752:	6821      	ldr	r1, [r4, #0]
 8009754:	1a6d      	subs	r5, r5, r1
 8009756:	4629      	mov	r1, r5
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ffa7 	bl	80096ac <sbrk_aligned>
 800975e:	3001      	adds	r0, #1
 8009760:	d037      	beq.n	80097d2 <_malloc_r+0xe6>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	442b      	add	r3, r5
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	f8d8 3000 	ldr.w	r3, [r8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d038      	beq.n	80097e2 <_malloc_r+0xf6>
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	42a2      	cmp	r2, r4
 8009774:	d12b      	bne.n	80097ce <_malloc_r+0xe2>
 8009776:	2200      	movs	r2, #0
 8009778:	605a      	str	r2, [r3, #4]
 800977a:	e00f      	b.n	800979c <_malloc_r+0xb0>
 800977c:	6822      	ldr	r2, [r4, #0]
 800977e:	1b52      	subs	r2, r2, r5
 8009780:	d41f      	bmi.n	80097c2 <_malloc_r+0xd6>
 8009782:	2a0b      	cmp	r2, #11
 8009784:	d917      	bls.n	80097b6 <_malloc_r+0xca>
 8009786:	1961      	adds	r1, r4, r5
 8009788:	42a3      	cmp	r3, r4
 800978a:	6025      	str	r5, [r4, #0]
 800978c:	bf18      	it	ne
 800978e:	6059      	strne	r1, [r3, #4]
 8009790:	6863      	ldr	r3, [r4, #4]
 8009792:	bf08      	it	eq
 8009794:	f8c8 1000 	streq.w	r1, [r8]
 8009798:	5162      	str	r2, [r4, r5]
 800979a:	604b      	str	r3, [r1, #4]
 800979c:	4638      	mov	r0, r7
 800979e:	f104 060b 	add.w	r6, r4, #11
 80097a2:	f000 f829 	bl	80097f8 <__malloc_unlock>
 80097a6:	f026 0607 	bic.w	r6, r6, #7
 80097aa:	1d23      	adds	r3, r4, #4
 80097ac:	1af2      	subs	r2, r6, r3
 80097ae:	d0ae      	beq.n	800970e <_malloc_r+0x22>
 80097b0:	1b9b      	subs	r3, r3, r6
 80097b2:	50a3      	str	r3, [r4, r2]
 80097b4:	e7ab      	b.n	800970e <_malloc_r+0x22>
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	6862      	ldr	r2, [r4, #4]
 80097ba:	d1dd      	bne.n	8009778 <_malloc_r+0x8c>
 80097bc:	f8c8 2000 	str.w	r2, [r8]
 80097c0:	e7ec      	b.n	800979c <_malloc_r+0xb0>
 80097c2:	4623      	mov	r3, r4
 80097c4:	6864      	ldr	r4, [r4, #4]
 80097c6:	e7ac      	b.n	8009722 <_malloc_r+0x36>
 80097c8:	4634      	mov	r4, r6
 80097ca:	6876      	ldr	r6, [r6, #4]
 80097cc:	e7b4      	b.n	8009738 <_malloc_r+0x4c>
 80097ce:	4613      	mov	r3, r2
 80097d0:	e7cc      	b.n	800976c <_malloc_r+0x80>
 80097d2:	230c      	movs	r3, #12
 80097d4:	603b      	str	r3, [r7, #0]
 80097d6:	4638      	mov	r0, r7
 80097d8:	f000 f80e 	bl	80097f8 <__malloc_unlock>
 80097dc:	e797      	b.n	800970e <_malloc_r+0x22>
 80097de:	6025      	str	r5, [r4, #0]
 80097e0:	e7dc      	b.n	800979c <_malloc_r+0xb0>
 80097e2:	605b      	str	r3, [r3, #4]
 80097e4:	deff      	udf	#255	; 0xff
 80097e6:	bf00      	nop
 80097e8:	20000ad0 	.word	0x20000ad0

080097ec <__malloc_lock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__malloc_lock+0x8>)
 80097ee:	f000 b87f 	b.w	80098f0 <__retarget_lock_acquire_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000c14 	.word	0x20000c14

080097f8 <__malloc_unlock>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__malloc_unlock+0x8>)
 80097fa:	f000 b87a 	b.w	80098f2 <__retarget_lock_release_recursive>
 80097fe:	bf00      	nop
 8009800:	20000c14 	.word	0x20000c14

08009804 <sniprintf>:
 8009804:	b40c      	push	{r2, r3}
 8009806:	b530      	push	{r4, r5, lr}
 8009808:	4b17      	ldr	r3, [pc, #92]	; (8009868 <sniprintf+0x64>)
 800980a:	1e0c      	subs	r4, r1, #0
 800980c:	681d      	ldr	r5, [r3, #0]
 800980e:	b09d      	sub	sp, #116	; 0x74
 8009810:	da08      	bge.n	8009824 <sniprintf+0x20>
 8009812:	238b      	movs	r3, #139	; 0x8b
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	b01d      	add	sp, #116	; 0x74
 800981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009820:	b002      	add	sp, #8
 8009822:	4770      	bx	lr
 8009824:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009828:	f8ad 3014 	strh.w	r3, [sp, #20]
 800982c:	bf14      	ite	ne
 800982e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009832:	4623      	moveq	r3, r4
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	9006      	str	r0, [sp, #24]
 8009840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009846:	ab21      	add	r3, sp, #132	; 0x84
 8009848:	a902      	add	r1, sp, #8
 800984a:	4628      	mov	r0, r5
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	f000 f8f7 	bl	8009a40 <_svfiprintf_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	bfbc      	itt	lt
 8009856:	238b      	movlt	r3, #139	; 0x8b
 8009858:	602b      	strlt	r3, [r5, #0]
 800985a:	2c00      	cmp	r4, #0
 800985c:	d0dd      	beq.n	800981a <sniprintf+0x16>
 800985e:	9b02      	ldr	r3, [sp, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e7d9      	b.n	800981a <sniprintf+0x16>
 8009866:	bf00      	nop
 8009868:	200000cc 	.word	0x200000cc

0800986c <memset>:
 800986c:	4402      	add	r2, r0
 800986e:	4603      	mov	r3, r0
 8009870:	4293      	cmp	r3, r2
 8009872:	d100      	bne.n	8009876 <memset+0xa>
 8009874:	4770      	bx	lr
 8009876:	f803 1b01 	strb.w	r1, [r3], #1
 800987a:	e7f9      	b.n	8009870 <memset+0x4>

0800987c <_sbrk_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d06      	ldr	r5, [pc, #24]	; (8009898 <_sbrk_r+0x1c>)
 8009880:	2300      	movs	r3, #0
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	f7f7 fde4 	bl	8001454 <_sbrk>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_sbrk_r+0x1a>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_sbrk_r+0x1a>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000c10 	.word	0x20000c10

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200000cc 	.word	0x200000cc

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4d0d      	ldr	r5, [pc, #52]	; (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	; (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2600      	movs	r6, #0
 80098b4:	42a6      	cmp	r6, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4d0b      	ldr	r5, [pc, #44]	; (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	; (80098ec <__libc_init_array+0x44>)
 80098bc:	f000 fd24 	bl	800a308 <_init>
 80098c0:	1b64      	subs	r4, r4, r5
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2600      	movs	r6, #0
 80098c6:	42a6      	cmp	r6, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d0:	4798      	blx	r3
 80098d2:	3601      	adds	r6, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098da:	4798      	blx	r3
 80098dc:	3601      	adds	r6, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800a3ec 	.word	0x0800a3ec
 80098e4:	0800a3ec 	.word	0x0800a3ec
 80098e8:	0800a3ec 	.word	0x0800a3ec
 80098ec:	0800a3f0 	.word	0x0800a3f0

080098f0 <__retarget_lock_acquire_recursive>:
 80098f0:	4770      	bx	lr

080098f2 <__retarget_lock_release_recursive>:
 80098f2:	4770      	bx	lr

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d044      	beq.n	8009984 <_free_r+0x90>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f7ff ff6f 	bl	80097ec <__malloc_lock>
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <_free_r+0x94>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x30>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009920:	f7ff bf6a 	b.w	80097f8 <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x46>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1949      	addeq	r1, r1, r5
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x22>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x50>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x46>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1855      	adds	r5, r2, r1
 8009948:	42a5      	cmp	r5, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x70>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	4421      	add	r1, r4
 8009950:	1854      	adds	r4, r2, r1
 8009952:	42a3      	cmp	r3, r4
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x26>
 8009958:	681c      	ldr	r4, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	440c      	add	r4, r1
 8009960:	6014      	str	r4, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x26>
 8009964:	d902      	bls.n	800996c <_free_r+0x78>
 8009966:	230c      	movs	r3, #12
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x26>
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1961      	adds	r1, r4, r5
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1949      	addeq	r1, r1, r5
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x26>
 8009984:	b003      	add	sp, #12
 8009986:	bd30      	pop	{r4, r5, pc}
 8009988:	20000ad0 	.word	0x20000ad0

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	688e      	ldr	r6, [r1, #8]
 8009992:	461f      	mov	r7, r3
 8009994:	42be      	cmp	r6, r7
 8009996:	680b      	ldr	r3, [r1, #0]
 8009998:	4682      	mov	sl, r0
 800999a:	460c      	mov	r4, r1
 800999c:	4690      	mov	r8, r2
 800999e:	d82c      	bhi.n	80099fa <__ssputs_r+0x6e>
 80099a0:	898a      	ldrh	r2, [r1, #12]
 80099a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099a6:	d026      	beq.n	80099f6 <__ssputs_r+0x6a>
 80099a8:	6965      	ldr	r5, [r4, #20]
 80099aa:	6909      	ldr	r1, [r1, #16]
 80099ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b0:	eba3 0901 	sub.w	r9, r3, r1
 80099b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099b8:	1c7b      	adds	r3, r7, #1
 80099ba:	444b      	add	r3, r9
 80099bc:	106d      	asrs	r5, r5, #1
 80099be:	429d      	cmp	r5, r3
 80099c0:	bf38      	it	cc
 80099c2:	461d      	movcc	r5, r3
 80099c4:	0553      	lsls	r3, r2, #21
 80099c6:	d527      	bpl.n	8009a18 <__ssputs_r+0x8c>
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7ff fe8f 	bl	80096ec <_malloc_r>
 80099ce:	4606      	mov	r6, r0
 80099d0:	b360      	cbz	r0, 8009a2c <__ssputs_r+0xa0>
 80099d2:	6921      	ldr	r1, [r4, #16]
 80099d4:	464a      	mov	r2, r9
 80099d6:	f000 fadb 	bl	8009f90 <memcpy>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	6126      	str	r6, [r4, #16]
 80099e8:	6165      	str	r5, [r4, #20]
 80099ea:	444e      	add	r6, r9
 80099ec:	eba5 0509 	sub.w	r5, r5, r9
 80099f0:	6026      	str	r6, [r4, #0]
 80099f2:	60a5      	str	r5, [r4, #8]
 80099f4:	463e      	mov	r6, r7
 80099f6:	42be      	cmp	r6, r7
 80099f8:	d900      	bls.n	80099fc <__ssputs_r+0x70>
 80099fa:	463e      	mov	r6, r7
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	4632      	mov	r2, r6
 8009a00:	4641      	mov	r1, r8
 8009a02:	f000 faab 	bl	8009f5c <memmove>
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	1b9b      	subs	r3, r3, r6
 8009a0a:	60a3      	str	r3, [r4, #8]
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	4433      	add	r3, r6
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	2000      	movs	r0, #0
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	462a      	mov	r2, r5
 8009a1a:	f000 fac7 	bl	8009fac <_realloc_r>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d1e0      	bne.n	80099e6 <__ssputs_r+0x5a>
 8009a24:	6921      	ldr	r1, [r4, #16]
 8009a26:	4650      	mov	r0, sl
 8009a28:	f7ff ff64 	bl	80098f4 <_free_r>
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	f8ca 3000 	str.w	r3, [sl]
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	e7e9      	b.n	8009a14 <__ssputs_r+0x88>

08009a40 <_svfiprintf_r>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	4698      	mov	r8, r3
 8009a46:	898b      	ldrh	r3, [r1, #12]
 8009a48:	061b      	lsls	r3, r3, #24
 8009a4a:	b09d      	sub	sp, #116	; 0x74
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	460d      	mov	r5, r1
 8009a50:	4614      	mov	r4, r2
 8009a52:	d50e      	bpl.n	8009a72 <_svfiprintf_r+0x32>
 8009a54:	690b      	ldr	r3, [r1, #16]
 8009a56:	b963      	cbnz	r3, 8009a72 <_svfiprintf_r+0x32>
 8009a58:	2140      	movs	r1, #64	; 0x40
 8009a5a:	f7ff fe47 	bl	80096ec <_malloc_r>
 8009a5e:	6028      	str	r0, [r5, #0]
 8009a60:	6128      	str	r0, [r5, #16]
 8009a62:	b920      	cbnz	r0, 8009a6e <_svfiprintf_r+0x2e>
 8009a64:	230c      	movs	r3, #12
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	e0d0      	b.n	8009c10 <_svfiprintf_r+0x1d0>
 8009a6e:	2340      	movs	r3, #64	; 0x40
 8009a70:	616b      	str	r3, [r5, #20]
 8009a72:	2300      	movs	r3, #0
 8009a74:	9309      	str	r3, [sp, #36]	; 0x24
 8009a76:	2320      	movs	r3, #32
 8009a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a80:	2330      	movs	r3, #48	; 0x30
 8009a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c28 <_svfiprintf_r+0x1e8>
 8009a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a8a:	f04f 0901 	mov.w	r9, #1
 8009a8e:	4623      	mov	r3, r4
 8009a90:	469a      	mov	sl, r3
 8009a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a96:	b10a      	cbz	r2, 8009a9c <_svfiprintf_r+0x5c>
 8009a98:	2a25      	cmp	r2, #37	; 0x25
 8009a9a:	d1f9      	bne.n	8009a90 <_svfiprintf_r+0x50>
 8009a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa0:	d00b      	beq.n	8009aba <_svfiprintf_r+0x7a>
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff ff6f 	bl	800998c <__ssputs_r>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	f000 80a9 	beq.w	8009c06 <_svfiprintf_r+0x1c6>
 8009ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab6:	445a      	add	r2, fp
 8009ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80a1 	beq.w	8009c06 <_svfiprintf_r+0x1c6>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ace:	f10a 0a01 	add.w	sl, sl, #1
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ada:	931a      	str	r3, [sp, #104]	; 0x68
 8009adc:	4654      	mov	r4, sl
 8009ade:	2205      	movs	r2, #5
 8009ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae4:	4850      	ldr	r0, [pc, #320]	; (8009c28 <_svfiprintf_r+0x1e8>)
 8009ae6:	f7f6 fb7b 	bl	80001e0 <memchr>
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	b9d8      	cbnz	r0, 8009b26 <_svfiprintf_r+0xe6>
 8009aee:	06d0      	lsls	r0, r2, #27
 8009af0:	bf44      	itt	mi
 8009af2:	2320      	movmi	r3, #32
 8009af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af8:	0711      	lsls	r1, r2, #28
 8009afa:	bf44      	itt	mi
 8009afc:	232b      	movmi	r3, #43	; 0x2b
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b2a      	cmp	r3, #42	; 0x2a
 8009b08:	d015      	beq.n	8009b36 <_svfiprintf_r+0xf6>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	4654      	mov	r4, sl
 8009b0e:	2000      	movs	r0, #0
 8009b10:	f04f 0c0a 	mov.w	ip, #10
 8009b14:	4621      	mov	r1, r4
 8009b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b1a:	3b30      	subs	r3, #48	; 0x30
 8009b1c:	2b09      	cmp	r3, #9
 8009b1e:	d94d      	bls.n	8009bbc <_svfiprintf_r+0x17c>
 8009b20:	b1b0      	cbz	r0, 8009b50 <_svfiprintf_r+0x110>
 8009b22:	9207      	str	r2, [sp, #28]
 8009b24:	e014      	b.n	8009b50 <_svfiprintf_r+0x110>
 8009b26:	eba0 0308 	sub.w	r3, r0, r8
 8009b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	46a2      	mov	sl, r4
 8009b34:	e7d2      	b.n	8009adc <_svfiprintf_r+0x9c>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	1d19      	adds	r1, r3, #4
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	9103      	str	r1, [sp, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfbb      	ittet	lt
 8009b42:	425b      	neglt	r3, r3
 8009b44:	f042 0202 	orrlt.w	r2, r2, #2
 8009b48:	9307      	strge	r3, [sp, #28]
 8009b4a:	9307      	strlt	r3, [sp, #28]
 8009b4c:	bfb8      	it	lt
 8009b4e:	9204      	strlt	r2, [sp, #16]
 8009b50:	7823      	ldrb	r3, [r4, #0]
 8009b52:	2b2e      	cmp	r3, #46	; 0x2e
 8009b54:	d10c      	bne.n	8009b70 <_svfiprintf_r+0x130>
 8009b56:	7863      	ldrb	r3, [r4, #1]
 8009b58:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5a:	d134      	bne.n	8009bc6 <_svfiprintf_r+0x186>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d1a      	adds	r2, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9203      	str	r2, [sp, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfb8      	it	lt
 8009b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b6c:	3402      	adds	r4, #2
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c38 <_svfiprintf_r+0x1f8>
 8009b74:	7821      	ldrb	r1, [r4, #0]
 8009b76:	2203      	movs	r2, #3
 8009b78:	4650      	mov	r0, sl
 8009b7a:	f7f6 fb31 	bl	80001e0 <memchr>
 8009b7e:	b138      	cbz	r0, 8009b90 <_svfiprintf_r+0x150>
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	eba0 000a 	sub.w	r0, r0, sl
 8009b86:	2240      	movs	r2, #64	; 0x40
 8009b88:	4082      	lsls	r2, r0
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b94:	4825      	ldr	r0, [pc, #148]	; (8009c2c <_svfiprintf_r+0x1ec>)
 8009b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b9a:	2206      	movs	r2, #6
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d038      	beq.n	8009c16 <_svfiprintf_r+0x1d6>
 8009ba4:	4b22      	ldr	r3, [pc, #136]	; (8009c30 <_svfiprintf_r+0x1f0>)
 8009ba6:	bb1b      	cbnz	r3, 8009bf0 <_svfiprintf_r+0x1b0>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	3307      	adds	r3, #7
 8009bac:	f023 0307 	bic.w	r3, r3, #7
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb6:	4433      	add	r3, r6
 8009bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bba:	e768      	b.n	8009a8e <_svfiprintf_r+0x4e>
 8009bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	e7a6      	b.n	8009b14 <_svfiprintf_r+0xd4>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	3401      	adds	r4, #1
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f04f 0c0a 	mov.w	ip, #10
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd8:	3a30      	subs	r2, #48	; 0x30
 8009bda:	2a09      	cmp	r2, #9
 8009bdc:	d903      	bls.n	8009be6 <_svfiprintf_r+0x1a6>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0c6      	beq.n	8009b70 <_svfiprintf_r+0x130>
 8009be2:	9105      	str	r1, [sp, #20]
 8009be4:	e7c4      	b.n	8009b70 <_svfiprintf_r+0x130>
 8009be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bea:	4604      	mov	r4, r0
 8009bec:	2301      	movs	r3, #1
 8009bee:	e7f0      	b.n	8009bd2 <_svfiprintf_r+0x192>
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <_svfiprintf_r+0x1f4>)
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f3af 8000 	nop.w
 8009c00:	1c42      	adds	r2, r0, #1
 8009c02:	4606      	mov	r6, r0
 8009c04:	d1d6      	bne.n	8009bb4 <_svfiprintf_r+0x174>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	065b      	lsls	r3, r3, #25
 8009c0a:	f53f af2d 	bmi.w	8009a68 <_svfiprintf_r+0x28>
 8009c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c10:	b01d      	add	sp, #116	; 0x74
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <_svfiprintf_r+0x1f4>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	4638      	mov	r0, r7
 8009c22:	f000 f879 	bl	8009d18 <_printf_i>
 8009c26:	e7eb      	b.n	8009c00 <_svfiprintf_r+0x1c0>
 8009c28:	0800a398 	.word	0x0800a398
 8009c2c:	0800a3a2 	.word	0x0800a3a2
 8009c30:	00000000 	.word	0x00000000
 8009c34:	0800998d 	.word	0x0800998d
 8009c38:	0800a39e 	.word	0x0800a39e

08009c3c <_printf_common>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	4616      	mov	r6, r2
 8009c42:	4699      	mov	r9, r3
 8009c44:	688a      	ldr	r2, [r1, #8]
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfb8      	it	lt
 8009c50:	4613      	movlt	r3, r2
 8009c52:	6033      	str	r3, [r6, #0]
 8009c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c58:	4607      	mov	r7, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b10a      	cbz	r2, 8009c62 <_printf_common+0x26>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	6033      	str	r3, [r6, #0]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	0699      	lsls	r1, r3, #26
 8009c66:	bf42      	ittt	mi
 8009c68:	6833      	ldrmi	r3, [r6, #0]
 8009c6a:	3302      	addmi	r3, #2
 8009c6c:	6033      	strmi	r3, [r6, #0]
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	f015 0506 	ands.w	r5, r5, #6
 8009c74:	d106      	bne.n	8009c84 <_printf_common+0x48>
 8009c76:	f104 0a19 	add.w	sl, r4, #25
 8009c7a:	68e3      	ldr	r3, [r4, #12]
 8009c7c:	6832      	ldr	r2, [r6, #0]
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	dc26      	bgt.n	8009cd2 <_printf_common+0x96>
 8009c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c88:	1e13      	subs	r3, r2, #0
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	bf18      	it	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	0692      	lsls	r2, r2, #26
 8009c92:	d42b      	bmi.n	8009cec <_printf_common+0xb0>
 8009c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c98:	4649      	mov	r1, r9
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	47c0      	blx	r8
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d01e      	beq.n	8009ce0 <_printf_common+0xa4>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6922      	ldr	r2, [r4, #16]
 8009ca6:	f003 0306 	and.w	r3, r3, #6
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	bf02      	ittt	eq
 8009cae:	68e5      	ldreq	r5, [r4, #12]
 8009cb0:	6833      	ldreq	r3, [r6, #0]
 8009cb2:	1aed      	subeq	r5, r5, r3
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	bf0c      	ite	eq
 8009cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cbc:	2500      	movne	r5, #0
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bfc4      	itt	gt
 8009cc2:	1a9b      	subgt	r3, r3, r2
 8009cc4:	18ed      	addgt	r5, r5, r3
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	341a      	adds	r4, #26
 8009cca:	42b5      	cmp	r5, r6
 8009ccc:	d11a      	bne.n	8009d04 <_printf_common+0xc8>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e008      	b.n	8009ce4 <_printf_common+0xa8>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	4638      	mov	r0, r7
 8009cda:	47c0      	blx	r8
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d103      	bne.n	8009ce8 <_printf_common+0xac>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	3501      	adds	r5, #1
 8009cea:	e7c6      	b.n	8009c7a <_printf_common+0x3e>
 8009cec:	18e1      	adds	r1, r4, r3
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	2030      	movs	r0, #48	; 0x30
 8009cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cf6:	4422      	add	r2, r4
 8009cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d00:	3302      	adds	r3, #2
 8009d02:	e7c7      	b.n	8009c94 <_printf_common+0x58>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4622      	mov	r2, r4
 8009d08:	4649      	mov	r1, r9
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	47c0      	blx	r8
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d0e6      	beq.n	8009ce0 <_printf_common+0xa4>
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7d9      	b.n	8009cca <_printf_common+0x8e>
	...

08009d18 <_printf_i>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	7e0f      	ldrb	r7, [r1, #24]
 8009d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d20:	2f78      	cmp	r7, #120	; 0x78
 8009d22:	4691      	mov	r9, r2
 8009d24:	4680      	mov	r8, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	469a      	mov	sl, r3
 8009d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d2e:	d807      	bhi.n	8009d40 <_printf_i+0x28>
 8009d30:	2f62      	cmp	r7, #98	; 0x62
 8009d32:	d80a      	bhi.n	8009d4a <_printf_i+0x32>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	f000 80d4 	beq.w	8009ee2 <_printf_i+0x1ca>
 8009d3a:	2f58      	cmp	r7, #88	; 0x58
 8009d3c:	f000 80c0 	beq.w	8009ec0 <_printf_i+0x1a8>
 8009d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d48:	e03a      	b.n	8009dc0 <_printf_i+0xa8>
 8009d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d4e:	2b15      	cmp	r3, #21
 8009d50:	d8f6      	bhi.n	8009d40 <_printf_i+0x28>
 8009d52:	a101      	add	r1, pc, #4	; (adr r1, 8009d58 <_printf_i+0x40>)
 8009d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d58:	08009db1 	.word	0x08009db1
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009d41 	.word	0x08009d41
 8009d64:	08009d41 	.word	0x08009d41
 8009d68:	08009d41 	.word	0x08009d41
 8009d6c:	08009d41 	.word	0x08009d41
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009d41 	.word	0x08009d41
 8009d78:	08009d41 	.word	0x08009d41
 8009d7c:	08009d41 	.word	0x08009d41
 8009d80:	08009d41 	.word	0x08009d41
 8009d84:	08009ec9 	.word	0x08009ec9
 8009d88:	08009df1 	.word	0x08009df1
 8009d8c:	08009e83 	.word	0x08009e83
 8009d90:	08009d41 	.word	0x08009d41
 8009d94:	08009d41 	.word	0x08009d41
 8009d98:	08009eeb 	.word	0x08009eeb
 8009d9c:	08009d41 	.word	0x08009d41
 8009da0:	08009df1 	.word	0x08009df1
 8009da4:	08009d41 	.word	0x08009d41
 8009da8:	08009d41 	.word	0x08009d41
 8009dac:	08009e8b 	.word	0x08009e8b
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	602a      	str	r2, [r5, #0]
 8009db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e09f      	b.n	8009f04 <_printf_i+0x1ec>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	0607      	lsls	r7, r0, #24
 8009dca:	f103 0104 	add.w	r1, r3, #4
 8009dce:	6029      	str	r1, [r5, #0]
 8009dd0:	d501      	bpl.n	8009dd6 <_printf_i+0xbe>
 8009dd2:	681e      	ldr	r6, [r3, #0]
 8009dd4:	e003      	b.n	8009dde <_printf_i+0xc6>
 8009dd6:	0646      	lsls	r6, r0, #25
 8009dd8:	d5fb      	bpl.n	8009dd2 <_printf_i+0xba>
 8009dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	da03      	bge.n	8009dea <_printf_i+0xd2>
 8009de2:	232d      	movs	r3, #45	; 0x2d
 8009de4:	4276      	negs	r6, r6
 8009de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dea:	485a      	ldr	r0, [pc, #360]	; (8009f54 <_printf_i+0x23c>)
 8009dec:	230a      	movs	r3, #10
 8009dee:	e012      	b.n	8009e16 <_printf_i+0xfe>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	6820      	ldr	r0, [r4, #0]
 8009df4:	1d19      	adds	r1, r3, #4
 8009df6:	6029      	str	r1, [r5, #0]
 8009df8:	0605      	lsls	r5, r0, #24
 8009dfa:	d501      	bpl.n	8009e00 <_printf_i+0xe8>
 8009dfc:	681e      	ldr	r6, [r3, #0]
 8009dfe:	e002      	b.n	8009e06 <_printf_i+0xee>
 8009e00:	0641      	lsls	r1, r0, #25
 8009e02:	d5fb      	bpl.n	8009dfc <_printf_i+0xe4>
 8009e04:	881e      	ldrh	r6, [r3, #0]
 8009e06:	4853      	ldr	r0, [pc, #332]	; (8009f54 <_printf_i+0x23c>)
 8009e08:	2f6f      	cmp	r7, #111	; 0x6f
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2308      	moveq	r3, #8
 8009e0e:	230a      	movne	r3, #10
 8009e10:	2100      	movs	r1, #0
 8009e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e16:	6865      	ldr	r5, [r4, #4]
 8009e18:	60a5      	str	r5, [r4, #8]
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	bfa2      	ittt	ge
 8009e1e:	6821      	ldrge	r1, [r4, #0]
 8009e20:	f021 0104 	bicge.w	r1, r1, #4
 8009e24:	6021      	strge	r1, [r4, #0]
 8009e26:	b90e      	cbnz	r6, 8009e2c <_printf_i+0x114>
 8009e28:	2d00      	cmp	r5, #0
 8009e2a:	d04b      	beq.n	8009ec4 <_printf_i+0x1ac>
 8009e2c:	4615      	mov	r5, r2
 8009e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e32:	fb03 6711 	mls	r7, r3, r1, r6
 8009e36:	5dc7      	ldrb	r7, [r0, r7]
 8009e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e3c:	4637      	mov	r7, r6
 8009e3e:	42bb      	cmp	r3, r7
 8009e40:	460e      	mov	r6, r1
 8009e42:	d9f4      	bls.n	8009e2e <_printf_i+0x116>
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d10b      	bne.n	8009e60 <_printf_i+0x148>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	07de      	lsls	r6, r3, #31
 8009e4c:	d508      	bpl.n	8009e60 <_printf_i+0x148>
 8009e4e:	6923      	ldr	r3, [r4, #16]
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	4299      	cmp	r1, r3
 8009e54:	bfde      	ittt	le
 8009e56:	2330      	movle	r3, #48	; 0x30
 8009e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e60:	1b52      	subs	r2, r2, r5
 8009e62:	6122      	str	r2, [r4, #16]
 8009e64:	f8cd a000 	str.w	sl, [sp]
 8009e68:	464b      	mov	r3, r9
 8009e6a:	aa03      	add	r2, sp, #12
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4640      	mov	r0, r8
 8009e70:	f7ff fee4 	bl	8009c3c <_printf_common>
 8009e74:	3001      	adds	r0, #1
 8009e76:	d14a      	bne.n	8009f0e <_printf_i+0x1f6>
 8009e78:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7c:	b004      	add	sp, #16
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	f043 0320 	orr.w	r3, r3, #32
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	4833      	ldr	r0, [pc, #204]	; (8009f58 <_printf_i+0x240>)
 8009e8c:	2778      	movs	r7, #120	; 0x78
 8009e8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	6829      	ldr	r1, [r5, #0]
 8009e96:	061f      	lsls	r7, r3, #24
 8009e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e9c:	d402      	bmi.n	8009ea4 <_printf_i+0x18c>
 8009e9e:	065f      	lsls	r7, r3, #25
 8009ea0:	bf48      	it	mi
 8009ea2:	b2b6      	uxthmi	r6, r6
 8009ea4:	07df      	lsls	r7, r3, #31
 8009ea6:	bf48      	it	mi
 8009ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8009eac:	6029      	str	r1, [r5, #0]
 8009eae:	bf48      	it	mi
 8009eb0:	6023      	strmi	r3, [r4, #0]
 8009eb2:	b91e      	cbnz	r6, 8009ebc <_printf_i+0x1a4>
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	f023 0320 	bic.w	r3, r3, #32
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	e7a7      	b.n	8009e10 <_printf_i+0xf8>
 8009ec0:	4824      	ldr	r0, [pc, #144]	; (8009f54 <_printf_i+0x23c>)
 8009ec2:	e7e4      	b.n	8009e8e <_printf_i+0x176>
 8009ec4:	4615      	mov	r5, r2
 8009ec6:	e7bd      	b.n	8009e44 <_printf_i+0x12c>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	6826      	ldr	r6, [r4, #0]
 8009ecc:	6961      	ldr	r1, [r4, #20]
 8009ece:	1d18      	adds	r0, r3, #4
 8009ed0:	6028      	str	r0, [r5, #0]
 8009ed2:	0635      	lsls	r5, r6, #24
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	d501      	bpl.n	8009edc <_printf_i+0x1c4>
 8009ed8:	6019      	str	r1, [r3, #0]
 8009eda:	e002      	b.n	8009ee2 <_printf_i+0x1ca>
 8009edc:	0670      	lsls	r0, r6, #25
 8009ede:	d5fb      	bpl.n	8009ed8 <_printf_i+0x1c0>
 8009ee0:	8019      	strh	r1, [r3, #0]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6123      	str	r3, [r4, #16]
 8009ee6:	4615      	mov	r5, r2
 8009ee8:	e7bc      	b.n	8009e64 <_printf_i+0x14c>
 8009eea:	682b      	ldr	r3, [r5, #0]
 8009eec:	1d1a      	adds	r2, r3, #4
 8009eee:	602a      	str	r2, [r5, #0]
 8009ef0:	681d      	ldr	r5, [r3, #0]
 8009ef2:	6862      	ldr	r2, [r4, #4]
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f7f6 f972 	bl	80001e0 <memchr>
 8009efc:	b108      	cbz	r0, 8009f02 <_printf_i+0x1ea>
 8009efe:	1b40      	subs	r0, r0, r5
 8009f00:	6060      	str	r0, [r4, #4]
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	2300      	movs	r3, #0
 8009f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f0c:	e7aa      	b.n	8009e64 <_printf_i+0x14c>
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	462a      	mov	r2, r5
 8009f12:	4649      	mov	r1, r9
 8009f14:	4640      	mov	r0, r8
 8009f16:	47d0      	blx	sl
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d0ad      	beq.n	8009e78 <_printf_i+0x160>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	079b      	lsls	r3, r3, #30
 8009f20:	d413      	bmi.n	8009f4a <_printf_i+0x232>
 8009f22:	68e0      	ldr	r0, [r4, #12]
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	4298      	cmp	r0, r3
 8009f28:	bfb8      	it	lt
 8009f2a:	4618      	movlt	r0, r3
 8009f2c:	e7a6      	b.n	8009e7c <_printf_i+0x164>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4632      	mov	r2, r6
 8009f32:	4649      	mov	r1, r9
 8009f34:	4640      	mov	r0, r8
 8009f36:	47d0      	blx	sl
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d09d      	beq.n	8009e78 <_printf_i+0x160>
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	68e3      	ldr	r3, [r4, #12]
 8009f40:	9903      	ldr	r1, [sp, #12]
 8009f42:	1a5b      	subs	r3, r3, r1
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	dcf2      	bgt.n	8009f2e <_printf_i+0x216>
 8009f48:	e7eb      	b.n	8009f22 <_printf_i+0x20a>
 8009f4a:	2500      	movs	r5, #0
 8009f4c:	f104 0619 	add.w	r6, r4, #25
 8009f50:	e7f5      	b.n	8009f3e <_printf_i+0x226>
 8009f52:	bf00      	nop
 8009f54:	0800a3a9 	.word	0x0800a3a9
 8009f58:	0800a3ba 	.word	0x0800a3ba

08009f5c <memmove>:
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	eb01 0402 	add.w	r4, r1, r2
 8009f64:	d902      	bls.n	8009f6c <memmove+0x10>
 8009f66:	4284      	cmp	r4, r0
 8009f68:	4623      	mov	r3, r4
 8009f6a:	d807      	bhi.n	8009f7c <memmove+0x20>
 8009f6c:	1e43      	subs	r3, r0, #1
 8009f6e:	42a1      	cmp	r1, r4
 8009f70:	d008      	beq.n	8009f84 <memmove+0x28>
 8009f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f7a:	e7f8      	b.n	8009f6e <memmove+0x12>
 8009f7c:	4402      	add	r2, r0
 8009f7e:	4601      	mov	r1, r0
 8009f80:	428a      	cmp	r2, r1
 8009f82:	d100      	bne.n	8009f86 <memmove+0x2a>
 8009f84:	bd10      	pop	{r4, pc}
 8009f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8e:	e7f7      	b.n	8009f80 <memmove+0x24>

08009f90 <memcpy>:
 8009f90:	440a      	add	r2, r1
 8009f92:	4291      	cmp	r1, r2
 8009f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f98:	d100      	bne.n	8009f9c <memcpy+0xc>
 8009f9a:	4770      	bx	lr
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa6:	4291      	cmp	r1, r2
 8009fa8:	d1f9      	bne.n	8009f9e <memcpy+0xe>
 8009faa:	bd10      	pop	{r4, pc}

08009fac <_realloc_r>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	4680      	mov	r8, r0
 8009fb2:	4614      	mov	r4, r2
 8009fb4:	460e      	mov	r6, r1
 8009fb6:	b921      	cbnz	r1, 8009fc2 <_realloc_r+0x16>
 8009fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	f7ff bb95 	b.w	80096ec <_malloc_r>
 8009fc2:	b92a      	cbnz	r2, 8009fd0 <_realloc_r+0x24>
 8009fc4:	f7ff fc96 	bl	80098f4 <_free_r>
 8009fc8:	4625      	mov	r5, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd0:	f000 f81b 	bl	800a00a <_malloc_usable_size_r>
 8009fd4:	4284      	cmp	r4, r0
 8009fd6:	4607      	mov	r7, r0
 8009fd8:	d802      	bhi.n	8009fe0 <_realloc_r+0x34>
 8009fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fde:	d812      	bhi.n	800a006 <_realloc_r+0x5a>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fb82 	bl	80096ec <_malloc_r>
 8009fe8:	4605      	mov	r5, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0ed      	beq.n	8009fca <_realloc_r+0x1e>
 8009fee:	42bc      	cmp	r4, r7
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	bf28      	it	cs
 8009ff6:	463a      	movcs	r2, r7
 8009ff8:	f7ff ffca 	bl	8009f90 <memcpy>
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4640      	mov	r0, r8
 800a000:	f7ff fc78 	bl	80098f4 <_free_r>
 800a004:	e7e1      	b.n	8009fca <_realloc_r+0x1e>
 800a006:	4635      	mov	r5, r6
 800a008:	e7df      	b.n	8009fca <_realloc_r+0x1e>

0800a00a <_malloc_usable_size_r>:
 800a00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00e:	1f18      	subs	r0, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfbc      	itt	lt
 800a014:	580b      	ldrlt	r3, [r1, r0]
 800a016:	18c0      	addlt	r0, r0, r3
 800a018:	4770      	bx	lr
	...

0800a01c <expf>:
 800a01c:	b508      	push	{r3, lr}
 800a01e:	ed2d 8b02 	vpush	{d8}
 800a022:	eef0 8a40 	vmov.f32	s17, s0
 800a026:	f000 f87f 	bl	800a128 <__ieee754_expf>
 800a02a:	eeb0 8a40 	vmov.f32	s16, s0
 800a02e:	eeb0 0a68 	vmov.f32	s0, s17
 800a032:	f000 f829 	bl	800a088 <finitef>
 800a036:	b160      	cbz	r0, 800a052 <expf+0x36>
 800a038:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a078 <expf+0x5c>
 800a03c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a044:	dd0a      	ble.n	800a05c <expf+0x40>
 800a046:	f7ff fc29 	bl	800989c <__errno>
 800a04a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a07c <expf+0x60>
 800a04e:	2322      	movs	r3, #34	; 0x22
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	eeb0 0a48 	vmov.f32	s0, s16
 800a056:	ecbd 8b02 	vpop	{d8}
 800a05a:	bd08      	pop	{r3, pc}
 800a05c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a080 <expf+0x64>
 800a060:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a068:	d5f3      	bpl.n	800a052 <expf+0x36>
 800a06a:	f7ff fc17 	bl	800989c <__errno>
 800a06e:	2322      	movs	r3, #34	; 0x22
 800a070:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a084 <expf+0x68>
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	e7ec      	b.n	800a052 <expf+0x36>
 800a078:	42b17217 	.word	0x42b17217
 800a07c:	7f800000 	.word	0x7f800000
 800a080:	c2cff1b5 	.word	0xc2cff1b5
 800a084:	00000000 	.word	0x00000000

0800a088 <finitef>:
 800a088:	b082      	sub	sp, #8
 800a08a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a08e:	9801      	ldr	r0, [sp, #4]
 800a090:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a094:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a098:	bfac      	ite	ge
 800a09a:	2000      	movge	r0, #0
 800a09c:	2001      	movlt	r0, #1
 800a09e:	b002      	add	sp, #8
 800a0a0:	4770      	bx	lr
	...

0800a0a4 <ceilf>:
 800a0a4:	ee10 3a10 	vmov	r3, s0
 800a0a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a0ac:	3a7f      	subs	r2, #127	; 0x7f
 800a0ae:	2a16      	cmp	r2, #22
 800a0b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a0b4:	dc2a      	bgt.n	800a10c <ceilf+0x68>
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	da11      	bge.n	800a0de <ceilf+0x3a>
 800a0ba:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a120 <ceilf+0x7c>
 800a0be:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	dd05      	ble.n	800a0d8 <ceilf+0x34>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	db23      	blt.n	800a118 <ceilf+0x74>
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	bf18      	it	ne
 800a0d4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800a0d8:	ee00 3a10 	vmov	s0, r3
 800a0dc:	4770      	bx	lr
 800a0de:	4911      	ldr	r1, [pc, #68]	; (800a124 <ceilf+0x80>)
 800a0e0:	4111      	asrs	r1, r2
 800a0e2:	420b      	tst	r3, r1
 800a0e4:	d0fa      	beq.n	800a0dc <ceilf+0x38>
 800a0e6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a120 <ceilf+0x7c>
 800a0ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a0ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	ddef      	ble.n	800a0d8 <ceilf+0x34>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfc2      	ittt	gt
 800a0fc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800a100:	fa40 f202 	asrgt.w	r2, r0, r2
 800a104:	189b      	addgt	r3, r3, r2
 800a106:	ea23 0301 	bic.w	r3, r3, r1
 800a10a:	e7e5      	b.n	800a0d8 <ceilf+0x34>
 800a10c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a110:	d3e4      	bcc.n	800a0dc <ceilf+0x38>
 800a112:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a116:	4770      	bx	lr
 800a118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a11c:	e7dc      	b.n	800a0d8 <ceilf+0x34>
 800a11e:	bf00      	nop
 800a120:	7149f2ca 	.word	0x7149f2ca
 800a124:	007fffff 	.word	0x007fffff

0800a128 <__ieee754_expf>:
 800a128:	ee10 2a10 	vmov	r2, s0
 800a12c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a130:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a134:	d902      	bls.n	800a13c <__ieee754_expf+0x14>
 800a136:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a13a:	4770      	bx	lr
 800a13c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a140:	d106      	bne.n	800a150 <__ieee754_expf+0x28>
 800a142:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800a27c <__ieee754_expf+0x154>
 800a146:	2900      	cmp	r1, #0
 800a148:	bf18      	it	ne
 800a14a:	eeb0 0a67 	vmovne.f32	s0, s15
 800a14e:	4770      	bx	lr
 800a150:	484b      	ldr	r0, [pc, #300]	; (800a280 <__ieee754_expf+0x158>)
 800a152:	4282      	cmp	r2, r0
 800a154:	dd02      	ble.n	800a15c <__ieee754_expf+0x34>
 800a156:	2000      	movs	r0, #0
 800a158:	f000 b8d0 	b.w	800a2fc <__math_oflowf>
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	da05      	bge.n	800a16c <__ieee754_expf+0x44>
 800a160:	4a48      	ldr	r2, [pc, #288]	; (800a284 <__ieee754_expf+0x15c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d902      	bls.n	800a16c <__ieee754_expf+0x44>
 800a166:	2000      	movs	r0, #0
 800a168:	f000 b8c2 	b.w	800a2f0 <__math_uflowf>
 800a16c:	4a46      	ldr	r2, [pc, #280]	; (800a288 <__ieee754_expf+0x160>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a174:	d952      	bls.n	800a21c <__ieee754_expf+0xf4>
 800a176:	4a45      	ldr	r2, [pc, #276]	; (800a28c <__ieee754_expf+0x164>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a17e:	d834      	bhi.n	800a1ea <__ieee754_expf+0xc2>
 800a180:	4b43      	ldr	r3, [pc, #268]	; (800a290 <__ieee754_expf+0x168>)
 800a182:	4413      	add	r3, r2
 800a184:	ed93 7a00 	vldr	s14, [r3]
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <__ieee754_expf+0x16c>)
 800a18a:	4413      	add	r3, r2
 800a18c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a190:	f1c1 0201 	rsb	r2, r1, #1
 800a194:	edd3 7a00 	vldr	s15, [r3]
 800a198:	1a52      	subs	r2, r2, r1
 800a19a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a19e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a1a2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a298 <__ieee754_expf+0x170>
 800a1a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a29c <__ieee754_expf+0x174>
 800a1aa:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a1ae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a2a0 <__ieee754_expf+0x178>
 800a1b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a1b6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a2a4 <__ieee754_expf+0x17c>
 800a1ba:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a1be:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a2a8 <__ieee754_expf+0x180>
 800a1c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a1c6:	eef0 6a40 	vmov.f32	s13, s0
 800a1ca:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a1ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a1d2:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a1d6:	bb92      	cbnz	r2, 800a23e <__ieee754_expf+0x116>
 800a1d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a1dc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a1e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a1e4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a1e8:	4770      	bx	lr
 800a1ea:	4b30      	ldr	r3, [pc, #192]	; (800a2ac <__ieee754_expf+0x184>)
 800a1ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a2b0 <__ieee754_expf+0x188>
 800a1f0:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a2b4 <__ieee754_expf+0x18c>
 800a1f4:	4413      	add	r3, r2
 800a1f6:	edd3 7a00 	vldr	s15, [r3]
 800a1fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a1fe:	eeb0 7a40 	vmov.f32	s14, s0
 800a202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a206:	ee17 2a90 	vmov	r2, s15
 800a20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a20e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a212:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a2b8 <__ieee754_expf+0x190>
 800a216:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a21a:	e7be      	b.n	800a19a <__ieee754_expf+0x72>
 800a21c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800a220:	d20b      	bcs.n	800a23a <__ieee754_expf+0x112>
 800a222:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a2bc <__ieee754_expf+0x194>
 800a226:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a22a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a232:	dd02      	ble.n	800a23a <__ieee754_expf+0x112>
 800a234:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a238:	4770      	bx	lr
 800a23a:	2200      	movs	r2, #0
 800a23c:	e7af      	b.n	800a19e <__ieee754_expf+0x76>
 800a23e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a242:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a246:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a24a:	bfb8      	it	lt
 800a24c:	3264      	addlt	r2, #100	; 0x64
 800a24e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a256:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a25a:	ee17 3a90 	vmov	r3, s15
 800a25e:	bfab      	itete	ge
 800a260:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a264:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a268:	ee00 3a10 	vmovge	s0, r3
 800a26c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800a2c0 <__ieee754_expf+0x198>
 800a270:	bfbc      	itt	lt
 800a272:	ee00 3a10 	vmovlt	s0, r3
 800a276:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a27a:	4770      	bx	lr
 800a27c:	00000000 	.word	0x00000000
 800a280:	42b17217 	.word	0x42b17217
 800a284:	42cff1b5 	.word	0x42cff1b5
 800a288:	3eb17218 	.word	0x3eb17218
 800a28c:	3f851591 	.word	0x3f851591
 800a290:	0800a3d4 	.word	0x0800a3d4
 800a294:	0800a3dc 	.word	0x0800a3dc
 800a298:	3331bb4c 	.word	0x3331bb4c
 800a29c:	b5ddea0e 	.word	0xb5ddea0e
 800a2a0:	388ab355 	.word	0x388ab355
 800a2a4:	bb360b61 	.word	0xbb360b61
 800a2a8:	3e2aaaab 	.word	0x3e2aaaab
 800a2ac:	0800a3cc 	.word	0x0800a3cc
 800a2b0:	3fb8aa3b 	.word	0x3fb8aa3b
 800a2b4:	3f317180 	.word	0x3f317180
 800a2b8:	3717f7d1 	.word	0x3717f7d1
 800a2bc:	7149f2ca 	.word	0x7149f2ca
 800a2c0:	0d800000 	.word	0x0d800000

0800a2c4 <with_errnof>:
 800a2c4:	b513      	push	{r0, r1, r4, lr}
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a2cc:	f7ff fae6 	bl	800989c <__errno>
 800a2d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a2d4:	6004      	str	r4, [r0, #0]
 800a2d6:	b002      	add	sp, #8
 800a2d8:	bd10      	pop	{r4, pc}

0800a2da <xflowf>:
 800a2da:	b130      	cbz	r0, 800a2ea <xflowf+0x10>
 800a2dc:	eef1 7a40 	vneg.f32	s15, s0
 800a2e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a2e4:	2022      	movs	r0, #34	; 0x22
 800a2e6:	f7ff bfed 	b.w	800a2c4 <with_errnof>
 800a2ea:	eef0 7a40 	vmov.f32	s15, s0
 800a2ee:	e7f7      	b.n	800a2e0 <xflowf+0x6>

0800a2f0 <__math_uflowf>:
 800a2f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a2f8 <__math_uflowf+0x8>
 800a2f4:	f7ff bff1 	b.w	800a2da <xflowf>
 800a2f8:	10000000 	.word	0x10000000

0800a2fc <__math_oflowf>:
 800a2fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a304 <__math_oflowf+0x8>
 800a300:	f7ff bfeb 	b.w	800a2da <xflowf>
 800a304:	70000000 	.word	0x70000000

0800a308 <_init>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	bf00      	nop
 800a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30e:	bc08      	pop	{r3}
 800a310:	469e      	mov	lr, r3
 800a312:	4770      	bx	lr

0800a314 <_fini>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	bf00      	nop
 800a318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31a:	bc08      	pop	{r3}
 800a31c:	469e      	mov	lr, r3
 800a31e:	4770      	bx	lr
